package capp;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.ImageObserver;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

class MyImgButton extends JButton
{

    Image image;
    ImageObserver imageObserver;

    MyImgButton(String filename) {
        super();
        ImageIcon icon = new ImageIcon(filename);
        image = icon.getImage();
        imageObserver = icon.getImageObserver();
    }

    public void paint(Graphics g) {
        super.paint(g);
        g.drawImage(image, 0, 0, getWidth(), getHeight(), imageObserver);
    }
}


class MyColoredButton extends JButton 
{

    public MyColoredButton(String tt) 
    {
       super(tt);
       this.setBorder(BorderFactory.createBevelBorder(0));
       this.setForeground(Color.WHITE);
       this.setBackground(Color.decode("#4F81BD"));
       this.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me)
            {
                setBackground(Color.decode("#197BF1"));
                repaint();
            }

            @Override
            public void mousePressed(MouseEvent me){}

            @Override
            public void mouseReleased(MouseEvent me) {}

            @Override
            public void mouseEntered(MouseEvent me) 
            {
                setBackground(Color.decode("#3883DE"));
                repaint();
            }

            @Override
            public void mouseExited(MouseEvent me) 
            {
                setBackground(Color.decode("#4F81BD"));
                repaint();
            }
        });
    }
}

class MyColoredButtonE extends JButton 
{

    public MyColoredButtonE(String tt) 
    {
       super(tt);
       this.setBorder(BorderFactory.createBevelBorder(0));
       this.setForeground(Color.WHITE);
       this.setBackground(Color.decode("#E60A0A"));
       this.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me)
            {
                setBackground(Color.decode("#E15858"));
                repaint();
            }

            @Override
            public void mousePressed(MouseEvent me){}

            @Override
            public void mouseReleased(MouseEvent me) {}

            @Override
            public void mouseEntered(MouseEvent me) 
            {
                setBackground(Color.decode("#E60A08"));
                repaint();
            }

            @Override
            public void mouseExited(MouseEvent me) 
            {
                setBackground(Color.decode("#E60A0A"));
                repaint();
            }
        });
    }
}
public class CAPP {

    JFrame jf = new JFrame();
    Toolkit t = Toolkit.getDefaultToolkit();
    Image cu = t.getImage("D:\\CAPP\\src\\MEDIAS\\cursor.png");
    Cursor c = t.createCustomCursor(cu, new Point(jf.getX(), jf.getY()), "img");

    static String log_user;
    static int co1 = 0, len_s1 = 0, press_con = 0;
    private JFileChooser dialog = new JFileChooser(System.getProperty("user.dir"));
    private String currentFile = "VM_Untitled";
    private boolean changed = false;

    public void vm_text_edtior() {
        JFrame VM_Text_Editor_f = new JFrame();
        VM_Text_Editor_f.repaint();

        JTextArea VM_Text_Editor_textarea = new JTextArea();
        VM_Text_Editor_textarea.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane VM_Text_Editor_Scroller = new JScrollPane(VM_Text_Editor_textarea);
        VM_Text_Editor_Scroller.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        VM_Text_Editor_Scroller.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        VM_Text_Editor_Scroller.setBounds(0, 20, 495, 305);
        VM_Text_Editor_f.add(VM_Text_Editor_Scroller);

        MyColoredButton save = new MyColoredButton("Save");
        save.setBounds(130, 0, 100, 20);
        VM_Text_Editor_f.add(save);
        save.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                if (!currentFile.equals("VM_Untitled")) {
                    try {
                        FileWriter w = new FileWriter(currentFile);
                        VM_Text_Editor_textarea.write(w);
                        w.close();
                        currentFile = currentFile;
                        VM_Text_Editor_f.setTitle(currentFile);
                        changed = false;
                        save.setEnabled(false);
                    } catch (IOException e) {
                    }
                } else {
                    if (dialog.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                        try {
                            FileWriter w = new FileWriter(dialog.getSelectedFile().getAbsolutePath());
                            VM_Text_Editor_textarea.write(w);
                            w.close();
                            currentFile = dialog.getSelectedFile().getAbsolutePath();
                            VM_Text_Editor_f.setTitle(currentFile);
                            changed = false;
                            save.setEnabled(false);
                        } catch (IOException e) {
                        }
                    }
                }
            }
        });
        save.setEnabled(false);
        VM_Text_Editor_f.repaint();

        MyColoredButton saveAs = new MyColoredButton("Save As");
        saveAs.setBounds(250, 0, 100, 20);
        VM_Text_Editor_f.add(saveAs);
        saveAs.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                if (dialog.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {

                    try {
                        FileWriter w = new FileWriter(dialog.getSelectedFile().getAbsolutePath());
                        VM_Text_Editor_textarea.write(w);
                        w.close();
                        currentFile = dialog.getSelectedFile().getAbsolutePath();
                        VM_Text_Editor_f.setTitle(currentFile);
                        changed = false;
                        save.setEnabled(false);
                    } catch (IOException e) {
                    }
                }

            }
        });
        saveAs.setEnabled(false);

        VM_Text_Editor_f.repaint();
        MyColoredButton open = new MyColoredButton("Open");
        open.setBounds(10, 0, 100, 20);
        VM_Text_Editor_f.add(open);
        open.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    if (changed) {
                        if (JOptionPane.showConfirmDialog(VM_Text_Editor_f, "Would you like to save " + currentFile + " ?", "Save", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                            try {
                                FileWriter w = new FileWriter(currentFile);
                                VM_Text_Editor_textarea.write(w);
                                w.close();
                                currentFile = currentFile;
                                VM_Text_Editor_f.setTitle(currentFile);
                                changed = false;
                                save.setEnabled(false);
                            } catch (IOException e) {
                            }
                        }
                    }
                    if (dialog.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                        try {
                            FileReader r = new FileReader(currentFile);
                            VM_Text_Editor_textarea.read(r, null);
                            r.close();
                            currentFile = currentFile;
                            VM_Text_Editor_f.setTitle(currentFile);
                            changed = false;
                        } catch (IOException e) {
                            Toolkit.getDefaultToolkit().beep();
                            JOptionPane.showMessageDialog(VM_Text_Editor_f, "Editor can't find the file called " + currentFile);
                        }
                    }
                    saveAs.setEnabled(true);
                } catch (Exception e) {
                }
            }
        });
        VM_Text_Editor_f.repaint();

        MyColoredButton quit = new MyColoredButton("Quit");
        quit.setBounds(370, 0, 100, 20);
        VM_Text_Editor_f.add(quit);
        quit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                if (JOptionPane.showConfirmDialog(VM_Text_Editor_f, "Would you like to save " + currentFile + " ?", "Save", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    if (!currentFile.equals("VM_Untitled")) {
                        try {
                            FileWriter w = new FileWriter(currentFile);
                            VM_Text_Editor_textarea.write(w);
                            w.close();
                            currentFile = currentFile;
                            VM_Text_Editor_f.setTitle(currentFile);
                            changed = false;
                            save.setEnabled(false);
                        } catch (IOException e) {
                        }
                    } else {
                        if (dialog.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                            try {
                                FileWriter w = new FileWriter(dialog.getSelectedFile().getAbsolutePath());
                                VM_Text_Editor_textarea.write(w);
                                w.close();
                                currentFile = dialog.getSelectedFile().getAbsolutePath();
                                VM_Text_Editor_f.setTitle(currentFile);
                                changed = false;
                                save.setEnabled(false);
                            } catch (IOException e) {
                            }
                        }
                    }
                }

                VM_Text_Editor_f.dispose();
            }
        });
        VM_Text_Editor_f.repaint();

        VM_Text_Editor_f.repaint();

        VM_Text_Editor_textarea.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
            }

            @Override
            public void keyPressed(KeyEvent ke) {
                changed = true;
                save.setEnabled(true);
                VM_Text_Editor_f.repaint();
                saveAs.setEnabled(true);
                VM_Text_Editor_f.repaint();
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        VM_Text_Editor_f.setSize(500, 350);
        VM_Text_Editor_f.setLayout(null);
        VM_Text_Editor_f.setVisible(true);
        VM_Text_Editor_f.setResizable(false);
        VM_Text_Editor_f.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        ImageIcon imggg_icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\editor.png");
        VM_Text_Editor_f.setIconImage(imggg_icon.getImage());
        VM_Text_Editor_f.repaint();
    }


    public void mainmenu() {

        jf.setVisible(true);
        jf.setLayout(null);
        jf.setSize(750, 465);
        jf.setTitle("CAPP");
        ImageIcon img = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\app_icon.png");
        jf.setIconImage(img.getImage());
        jf.setResizable(false);
        jf.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();
        JLabel ml = new JLabel("Main Menu", SwingConstants.CENTER);
        ml.setBounds(115, 20, 500, 50);
        ml.setBorder(BorderFactory.createLineBorder(Color.black, 3));
        ml.setFont(new Font("Castellar", Font.BOLD, 35));
        jp.add(ml, new Integer(-6));

        jp.repaint();
        MyColoredButton sl = new MyColoredButton("Simple Calculator");
        sl.setBounds(85, 100, 270, 40);
        sl.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(sl);
        sl.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                calculator();
            }
        });

        jp.repaint();
        MyColoredButton fl = new MyColoredButton("Find Or Test");
        fl.setBounds(390, 100, 270, 40);
        fl.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(fl);
        fl.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                find_test();
            }
        });

        jp.repaint();
        MyColoredButton al = new MyColoredButton("Area Calculator");
        al.setBounds(85, 170, 270, 40);
        al.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(al);
        al.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                area_calculator();
            }
        });

        jp.repaint();
        MyColoredButton vl = new MyColoredButton("Volume Calculator");
        vl.setBounds(390, 170, 270, 40);
        vl.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(vl);
        vl.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                volume_calculator();
            }
        });

        jp.repaint();
        MyColoredButton bi = new MyColoredButton("Decimal-Binary Operations");
        bi.setBounds(85, 240, 270, 40);
        bi.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(bi);
        bi.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                binary();
            }
        });

        jp.repaint();
        MyColoredButton fu = new MyColoredButton("Decimal-Hexadecimal");
        fu.setBounds(390, 240, 270, 40);
        fu.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(fu);
        fu.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                hexadecimal();
            }
        });

        jp.repaint();
        MyColoredButton fir = new MyColoredButton("Find In Range");
        fir.setBounds(85, 310, 270, 40);
        fir.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(fir);
        fir.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                Find_In_Range();
            }
        });

        jp.repaint();
        MyColoredButton ad = new MyColoredButton("Ascending Descending Orders");
        ad.setBounds(390, 310, 270, 40);
        ad.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(ad);
        ad.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                ascend_descend();
            }
        });

        jp.repaint();
        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(325, 380, 100, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        jp.repaint();
    }

    public void calculator() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);;
        jp.repaint();

        jp.repaint();
        JLabel scl = new JLabel("Simple Calculator", SwingConstants.CENTER);
        scl.setBounds(115, 20, 500, 50);
        scl.setBorder(BorderFactory.createLineBorder(Color.black, 3));
        scl.setFont(new Font("Garamond", Font.BOLD, 35));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel n1 = new JLabel("Enter First Number:");
        n1.setBounds(100, 70, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(290, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your first number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '-') || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets First Number");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter Second Number:");
        n2.setBounds(80, 120, 204, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(290, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter your second number here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '-') || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(500, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets second number");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                n2tb.setText("");
            }
        });

        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(135, 230, 500, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        JLabel opl = new JLabel("Select Operater:");
        opl.setBounds(135, 170, 204, 100);
        opl.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(opl);

        jp.repaint();
        MyColoredButton add = new MyColoredButton("+");
        add.setBounds(285, 207, 50, 30);;
        add.setFont(new Font("Arial", Font.BOLD, 20));
        add.setToolTipText("Adds first & second number");
        jp.add(add);
        add.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double num1 = 0, num2 = 0;
                try {
                    num1 = Double.parseDouble(n1tb.getText());
                    num2 = Double.parseDouble(n2tb.getText());
                } catch (Exception ne) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number");
                }
                double result = num1 + num2;
                res.setText("Result: " + num1 + " + " + num2 + " = " + result);
                jp.repaint();
            }
        });

        jp.repaint();
        MyColoredButton sub = new MyColoredButton("-");
        sub.setBounds(345, 207, 50, 30);;
        sub.setFont(new Font("Arial", Font.BOLD, 20));
        sub.setToolTipText("Subtracts second number from first number");
        jp.add(sub);
        sub.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double num1 = 0, num2 = 0;
                try {
                    num1 = Double.parseDouble(n1tb.getText());
                    num2 = Double.parseDouble(n2tb.getText());
                } catch (Exception ne) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number.");
                }
                double result = num1 - num2;
                res.setText("Result: " + num1 + " - " + num2 + " = " + result);
                jp.repaint();
            }
        });

        jp.repaint();
        MyColoredButton mul = new MyColoredButton("x");
        mul.setBounds(405, 207, 50, 30);;
        mul.setFont(new Font("Arial", Font.BOLD, 20));
        mul.setToolTipText("Multiplies both numbers");
        jp.add(mul);
        mul.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double num1 = 0, num2 = 0;
                try {
                    num1 = Double.parseDouble(n1tb.getText());
                    num2 = Double.parseDouble(n2tb.getText());
                } catch (Exception ne) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number.");
                }
                double result = num1 * num2;
                res.setText("Result: " + num1 + " x " + num2 + " = " + result);
                jp.repaint();
            }
        });

        jp.repaint();
        MyColoredButton div = new MyColoredButton("/");
        div.setBounds(465, 207, 50, 30);;
        div.setFont(new Font("Arial", Font.BOLD, 20));
        div.setToolTipText("Divides second number from first number");
        jp.add(div);
        div.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double num1 = 0, num2 = 0;
                try {
                    num1 = Double.parseDouble(n1tb.getText());
                    num2 = Double.parseDouble(n2tb.getText());
                } catch (Exception ne) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number.");
                }
                double result = num1 / num2;
                res.setText("Result:" + num1 + " / " + num2 + " = " + result);
                jp.repaint();
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                res.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setToolTipText("Click for info");
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\simple_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to do simple calculations such as\n addition subtraction multiplication division of two numbers.\n"
                            + "Steps to calculate:\n"
                            + "1. Enter both the numbers.\n"
                            + "2. Click and select the operator.\n"
                            + " And Your result will be display.\n"
                            + "<html>*You can clear the content of any textbox using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it,</html>\n<html> also you can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to clear all textbox and result.</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("First Number: " + num1 + "\nSecond Number: " + num2 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(140, 380, 200, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }

                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(400, 380, 200, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        jp.repaint();
        
    }

    public void find_test() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        jp.repaint();
        JLabel ml = new JLabel("Find Or Test", SwingConstants.CENTER);
        ml.setBounds(115, 20, 500, 50);
        ml.setBorder(BorderFactory.createLineBorder(Color.black, 3));
        ml.setFont(new Font("Garamond", Font.BOLD, 35));
        jp.add(ml, new Integer(-6));

        jp.repaint();
        MyColoredButton mt = new MyColoredButton("Multiplication Table Of A Number");
        mt.setBounds(85, 100, 270, 40);
        mt.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(mt);
        mt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                multiplication_table();
            }
        });

        jp.repaint();
        MyColoredButton fn = new MyColoredButton("Factorial Of A Number");
        fn.setBounds(390, 100, 270, 40);
        fn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(fn);
        fn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                Fact();
            }
        });

        jp.repaint();
        MyColoredButton pn = new MyColoredButton("Prime Number Test");
        pn.setBounds(85, 170, 270, 40);
        pn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(pn);
        pn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                prime();
            }
        });

        jp.repaint();
        MyColoredButton eo = new MyColoredButton("Even Odd Number Test");
        eo.setBounds(390, 170, 270, 40);
        eo.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(eo);
        eo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                evenodd();
            }
        });

        jp.repaint();
        MyColoredButton sn = new MyColoredButton("Perfect Square Number Test");
        sn.setBounds(85, 240, 270, 40);
        sn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(sn);
        sn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                perfct_sq();
            }
        });

        jp.repaint();
        MyColoredButton sr = new MyColoredButton("Square and Square Root");
        sr.setBounds(390, 240, 270, 40);
        sr.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(sr);
        sr.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                square_Sroot();
            }
        });

        jp.repaint();
        MyColoredButton cr = new MyColoredButton("Cube and Cube Root");
        cr.setBounds(85, 310, 270, 40);
        cr.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(cr);
        cr.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                cube_croot();
            }
        });

        jp.repaint();
        MyColoredButton qe = new MyColoredButton("Roots of Quadratic Equation");
        qe.setBounds(390, 310, 270, 40);
        qe.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(qe);
        qe.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                quadratic_eq();
            }
        });

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(140, 380, 200, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                mainmenu();
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(400, 380, 200, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        jp.repaint();
        jp.repaint();
    }

    public void multiplication_table() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        jp.repaint();
        JLabel scl = new JLabel("Multiplication Table Of A Number", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));
        jp.repaint();

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter A Number:");
        n1.setBounds(40, 70, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your number here.");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '-') || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel r = new JLabel();
        JLabel r1 = new JLabel();
        JLabel r2 = new JLabel();
        JLabel r3 = new JLabel();
        JLabel r4 = new JLabel();
        JLabel r5 = new JLabel();
        JLabel r6 = new JLabel();
        JLabel r7 = new JLabel();
        JLabel r8 = new JLabel();
        JLabel r9 = new JLabel();
        JLabel r10 = new JLabel();

        jp.repaint();
        MyColoredButton smt = new MyColoredButton("Show Multiplication Table");
        smt.setBounds(80, 158, 300, 30);
        smt.setFont(new Font("Arial", Font.BOLD, 15));
        smt.setToolTipText("Shows multiplication table of the number");
        jp.add(smt);
        smt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                int n = 0;
                try {
                    n = Integer.parseInt(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number.");
                }

                int resu[] = new int[10];
                int j = 0;
                for (int i = 1; i <= 10; i++) {
                    resu[j] = n * i;
                    j++;
                }

                jp.repaint();
                r.setText("Result:");
                r.setBounds(470, 78, 200, 30);
                r.setFont(new Font("Century Gothic", Font.BOLD, 18));
                jp.add(r);

                jp.repaint();
                r1.setText(n + " X 1 = " + resu[0]);
                r1.setBounds(500, 108, 400, 30);
                r1.setFont(new Font("Century Gothic", Font.BOLD, 18));
                jp.add(r1);

                jp.repaint();
                r2.setText(n + " X 2 = " + resu[1]);
                r2.setBounds(500, 133, 400, 30);
                r2.setFont(new Font("Century Gothic", Font.BOLD, 18));
                jp.add(r2);

                jp.repaint();
                r3.setText(n + " X 3 = " + resu[2]);
                r3.setBounds(500, 158, 400, 30);
                r3.setFont(new Font("Century Gothic", Font.BOLD, 18));
                jp.add(r3);

                jp.repaint();
                r4.setText(n + " X 4 = " + resu[3]);
                r4.setBounds(500, 183, 400, 30);
                r4.setFont(new Font("Century Gothic", Font.BOLD, 18));
                jp.add(r4);

                jp.repaint();
                r5.setText(n + " X 5 = " + resu[4]);
                r5.setBounds(500, 208, 400, 30);
                r5.setFont(new Font("Century Gothic", Font.BOLD, 18));
                jp.add(r5);

                jp.repaint();
                r6.setText(n + " X 6 = " + resu[5]);
                r6.setBounds(500, 233, 400, 30);
                r6.setFont(new Font("Century Gothic", Font.BOLD, 18));
                jp.add(r6);

                jp.repaint();
                r7.setText(n + " X 7 = " + resu[6]);
                r7.setBounds(500, 258, 400, 30);
                r7.setFont(new Font("Century Gothic", Font.BOLD, 18));
                jp.add(r7);

                jp.repaint();
                r8.setText(n + " X 8 = " + resu[7]);
                r8.setBounds(500, 283, 400, 30);
                r8.setFont(new Font("Century Gothic", Font.BOLD, 18));
                jp.add(r8);

                jp.repaint();
                r9.setText(n + " X 9 = " + resu[8]);
                r9.setBounds(500, 308, 400, 30);
                r9.setFont(new Font("Century Gothic", Font.BOLD, 18));
                jp.add(r9);

                jp.repaint();
                r10.setText(n + " X 10 = " + resu[9]);
                r10.setBounds(500, 333, 400, 30);
                r10.setFont(new Font("Century Gothic", Font.BOLD, 18));
                jp.add(r10);
                jp.repaint();
            }
        });

        jp.repaint();
        MyColoredButton rst = new MyColoredButton("Reset");
        rst.setBounds(330, 258, 100, 30);
        rst.setFont(new Font("Arial", Font.BOLD, 15));
        rst.setToolTipText("Resets everything");
        jp.add(rst);
        rst.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                r.setText("");
                r1.setText("");
                r2.setText("");
                r3.setText("");
                r4.setText("");
                r5.setText("");
                r6.setText("");
                r7.setText("");
                r8.setText("");
                r9.setText("");
                r10.setText("");
                n1tb.setText("");
                jp.repaint();
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setToolTipText("Click for info");
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\multi_table_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to get the multiplication table \n"
                            + "of a number.\n"
                            + "Step to calculate:\n"
                            + "1. Enter a number.\n"
                            + "<html>2. Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Show Multiplication Table <b color='black'>|</b></font></html>\n"
                            + "  And your result will be displayed.\n"
                            + "<html>*You can clear all the text box with result using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font></html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setToolTipText("Click to get copy of result");
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num3 = r.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your Number: " + num1 + "\n" + r.getText() + "\n" + r1.getText() + "\n" + r2.getText() + "\n" + r3.getText() + "\n" + r4.getText() + "\n" + r5.getText() + "\n" + r6.getText() + "\n" + r7.getText() + "\n" + r8.getText() + "\n" + r9.getText() + "\n" + r10.getText());
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = r.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            find_test();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    find_test();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = r.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });
        jp.repaint();

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Multiplication Table Of A Number");
        sh.addItem("Factorial Of A Number");
        sh.addItem("Prime Number Test");
        sh.addItem("Even Odd Number Test");
        sh.addItem("Perfect Square Number Test");
        sh.addItem("Square and Square Root");
        sh.addItem("Cube and Cube Root");
        sh.addItem("Roots of Quadratic Equation");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Factorial Of A Number")) {
                    String s1 = n1tb.getText();
                    String s2 = r.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                Fact();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }

                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        Fact();
                    }
                }
                if (op.equals("Prime Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = r.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                prime();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }

                        } catch (Exception e) {
                        }
                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        prime();
                    }
                }
                if (op.equals("Even Odd Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = r.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                evenodd();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }

                        } catch (Exception e) {
                        }
                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        evenodd();
                    }
                }
                if (op.equals("Perfect Square Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = r.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfct_sq();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }

                        } catch (Exception e) {
                        }
                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfct_sq();
                    }
                }
                if (op.equals("Square and Square Root")) {
                    String s1 = n1tb.getText();
                    String s2 = r.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                square_Sroot();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }

                        } catch (Exception e) {
                        }
                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        square_Sroot();
                    }
                }
                if (op.equals("Cube and Cube Root")) {
                    String s1 = n1tb.getText();
                    String s2 = r.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                cube_croot();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }
                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        cube_croot();
                    }
                }
                if (op.equals("Roots of Quadratic Equation")) {
                    String s1 = n1tb.getText();
                    String s2 = r.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                quadratic_eq();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }

                        } catch (Exception e) {
                        }
                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        quadratic_eq();
                    }
                }

            }
        });
        jp.repaint();

        jp.repaint();
        
    }

    public void Fact() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);;
        jp.repaint();

        JLabel scl = new JLabel("Factorial Of A Number", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter A Number:");
        n1.setBounds(40, 70, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        jp.add(n1tb);
        n1tb.setToolTipText("Enter your number here.");
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(135, 230, 500, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets Everything");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                res.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Show Factorial");
        fact.setBounds(200, 158, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Shows the factorial of the number");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                int n = 0, fact = 1;
                try {
                    n = Integer.parseInt(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number.");
                }
                for (int i = n; i >= 1; i--) {
                    fact = fact * i;
                }
                res.setText("Result: Factorial of " + n + " = " + fact);
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setToolTipText("Click for info");
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\fact_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to find the factorial of a number.\n"
                            + "Steps to calculate:\n"
                            + "1.Enter your number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Show Factorial <b color='black'>|</b></font> .</html>\n"
                            + " And your result will be displayed.\n"
                            + "*You can clear the content of textbox with its result\n"
                            + "<html>using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> .</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        jp.repaint();
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setToolTipText("Click to get copy of result");
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your Number: " + num1 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            find_test();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    find_test();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Factorial Of A Number");
        sh.addItem("Multiplication Table Of A Number");
        sh.addItem("Prime Number Test");
        sh.addItem("Even Odd Number Test");
        sh.addItem("Perfect Square Number Test");
        sh.addItem("Square and Square Root");
        sh.addItem("Cube and Cube Root");
        sh.addItem("Roots of Quadratic Equation");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Multiplication Table Of A Number")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                multiplication_table();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        multiplication_table();
                    }
                }
                if (op.equals("Prime Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                prime();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        prime();
                    }
                }
                if (op.equals("Even Odd Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                evenodd();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        evenodd();
                    }
                }
                if (op.equals("Perfect Square Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfct_sq();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfct_sq();
                    }
                }
                if (op.equals("Square and Square Root")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                square_Sroot();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        square_Sroot();
                    }
                }
                if (op.equals("Cube and Cube Root")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                cube_croot();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        cube_croot();
                    }
                }
                if (op.equals("Roots of Quadratic Equation")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                quadratic_eq();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        quadratic_eq();
                    }
                }

            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();
    }

    public void prime() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Prime Number Test", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter A Number:");
        n1.setBounds(40, 70, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your number here.");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(135, 230, 500, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                res.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Show Test Result");
        fact.setBounds(200, 158, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Shows Whether the number is prime or not");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                int n = 0, flag = 0;
                try {
                    n = Integer.parseInt(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number.");
                }
                for (int i = n - 1; i > 1; i--) {
                    if (n % i == 0) {
                        flag = 1;
                        break;
                    }
                }
                if (flag == 0) {
                    res.setText("Result: " + n + " is a Prime Number.");
                } else {
                    res.setText("Result: " + n + " is not a Prime Number.");
                }

            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\prime_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to find whether the number\n"
                            + "prime or not.\n"
                            + "Steps to calculate:\n"
                            + "1.Enter your number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Show Test Result <b color='black'>|</b></font> .</html>\n"
                            + " And your result will be displayed.\n"
                            + "*You can clear the content of textbox with its result\n"
                            + "<html>using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font>.</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your Number: " + num1 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            find_test();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    find_test();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Prime Number Test");
        sh.addItem("Multiplication Table Of A Number");
        sh.addItem("Factorial Of A Number");
        sh.addItem("Even Odd Number Test");
        sh.addItem("Perfect Square Number Test");
        sh.addItem("Square and Square Root");
        sh.addItem("Cube and Cube Root");
        sh.addItem("Roots of Quadratic Equation");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Multiplication Table Of A Number")) {

                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                multiplication_table();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        multiplication_table();
                    }
                }
                if (op.equals("Factorial Of A Number")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                Fact();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        Fact();
                    }
                }
                if (op.equals("Even Odd Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                evenodd();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        evenodd();
                    }
                }
                if (op.equals("Perfect Square Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfct_sq();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfct_sq();
                    }
                }
                if (op.equals("Square and Square Root")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                square_Sroot();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        square_Sroot();
                    }
                }
                if (op.equals("Cube and Cube Root")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                cube_croot();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        cube_croot();
                    }
                }
                if (op.equals("Roots of Quadratic Equation")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                quadratic_eq();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        quadratic_eq();
                    }
                }

            }
        });
        jp.repaint();
        jp.repaint();
    }

    public void evenodd() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Even Odd Number Test", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter A Number:");
        n1.setBounds(40, 70, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(135, 230, 500, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setToolTipText("Resets everything");
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                res.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Show Test Result");
        fact.setBounds(200, 158, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Shows whether number is even or odd");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                int n = 0, flag = 0;
                try {
                    n = Integer.parseInt(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number.");
                }
                if (n % 2 == 0) {
                    res.setText("Result: " + n + " is an Even Number.");
                } else {
                    res.setText("Result: " + n + " is an Odd Number.");
                }

            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\eo_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to find whether the number\n"
                            + "even or odd.\n"
                            + "Steps to calculate:\n"
                            + "1.Enter your number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Show Test Result <b color='black'>|</b></font> .</html>\n"
                            + " And your result will be displayed.\n"
                            + "*You can clear the content of textbox with its result\n"
                            + "<html>using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> .</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your Number: " + num1 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all texbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    find_test();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Even Odd Number Test");
        sh.addItem("Multiplication Table Of A Number");
        sh.addItem("Factorial Of A Number");
        sh.addItem("Prime Number Test");
        sh.addItem("Perfect Square Number Test");
        sh.addItem("Square and Square Root");
        sh.addItem("Cube and Cube Root");
        sh.addItem("Roots of Quadratic Equation");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Multiplication Table Of A Number")) {

                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                multiplication_table();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        multiplication_table();
                    }
                }
                if (op.equals("Factorial Of A Number")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                Fact();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        Fact();
                    }
                }
                if (op.equals("Prime Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                prime();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        prime();
                    }
                }
                if (op.equals("Perfect Square Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfct_sq();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfct_sq();
                    }
                }
                if (op.equals("Square and Square Root")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                square_Sroot();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        square_Sroot();
                    }
                }
                if (op.equals("Cube and Cube Root")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                cube_croot();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        cube_croot();
                    }
                }
                if (op.equals("Roots of Quadratic Equation")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                quadratic_eq();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        quadratic_eq();
                    }
                }

            }
        });
        jp.repaint();

        
    }

    public void perfct_sq() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Perfect Square Number Test", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter A Number:");
        n1.setBounds(40, 70, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(50, 230, 900, 100);
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets everything");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                res.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Show Test Result");
        fact.setBounds(200, 158, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Show whether number is perfect square or not");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double n = 0, flag = 0, sqrt = 0;
                try {
                    n = Integer.parseInt(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number.");
                }
                for (double i = 1; i <= n; i++) {
                    if (n / i == i) {
                        flag = 1;
                        sqrt = i;
                        break;
                    }
                }
                if (flag == 0) {
                    res.setText("Result: " + n + " is not a perfect square.");
                } else {
                    res.setText("Result: " + n + " is a perfect square with " + sqrt + " as its square root.");
                }

            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\per_sq_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to find whether the number is\n"
                            + " is a perfect square or not.\n"
                            + "Steps to calculate:\n"
                            + "1.Enter your number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Show Test Result <b color='black'>|</b></font> .</html>\n"
                            + " And your result will be displayed.\n"
                            + "*You can clear the content of textbox with its result\n"
                            + "<html>using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> .</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        jp.repaint();
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.repaint();
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your Number: " + num1 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            find_test();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    find_test();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Perfect Square Number Test");
        sh.addItem("Multiplication Table Of A Number");
        sh.addItem("Factorial Of A Number");
        sh.addItem("Prime Number Test");
        sh.addItem("Even Odd Number Test");
        sh.addItem("Square and Square Root");
        sh.addItem("Cube and Cube Root");
        sh.addItem("Roots of Quadratic Equation");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Multiplication Table Of A Number")) {

                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                multiplication_table();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        multiplication_table();
                    }
                }
                if (op.equals("Factorial Of A Number")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                Fact();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        Fact();
                    }
                }
                if (op.equals("Prime Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                prime();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        prime();
                    }
                }
                if (op.equals("Even Odd Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                evenodd();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        evenodd();
                    }
                }
                if (op.equals("Square and Square Root")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                square_Sroot();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        square_Sroot();
                    }
                }
                if (op.equals("Cube and Cube Root")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                cube_croot();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        cube_croot();
                    }
                }
                if (op.equals("Roots of Quadratic Equation")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                quadratic_eq();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        quadratic_eq();
                    }
                }

            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void square_Sroot() {

        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Square and Square Root", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter A Number:");
        n1.setBounds(40, 70, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        JLabel res1 = new JLabel();
        res1.setBounds(50, 200, 900, 100);
        res1.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res1);

        jp.repaint();
        JLabel res2 = new JLabel();
        res2.setBounds(60, 235, 900, 100);
        res2.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res2);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets everything");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                res1.setText("");
                res2.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Square");
        fact.setBounds(100, 158, 100, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Shows square of the number");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double n = 0;
                try {
                    n = Integer.parseInt(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number.");
                }
                res1.setText("Result: Square of " + n + " = " + (n * n));
                res2.setText("");
                res1.repaint();
                res2.repaint();
            }
        });

        jp.repaint();
        MyColoredButton sqr = new MyColoredButton("Square Root");
        sqr.setBounds(230, 158, 150, 30);
        sqr.setFont(new Font("Arial", Font.BOLD, 15));
        sqr.setToolTipText("Shows square root of the number");
        jp.add(sqr);
        sqr.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double n = 0;
                try {
                    n = Integer.parseInt(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number.");
                }
                res1.setText("Result: Square Root of " + n + " = " + (Math.sqrt(n)));
                res2.setText("");
                res1.repaint();
                res2.repaint();
            }
        });

        jp.repaint();
        MyColoredButton ssqr = new MyColoredButton("Square & Square Root");
        ssqr.setBounds(410, 158, 200, 30);
        ssqr.setFont(new Font("Arial", Font.BOLD, 15));
        ssqr.setToolTipText("Shows square & square root of the number");
        jp.add(ssqr);
        ssqr.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double n = 0;
                try {
                    n = Integer.parseInt(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number.");
                }
                res1.setText("Result: Square of " + n + " = " + (n * n));
                res2.setText("          and its Square Root = " + (Math.sqrt(n)));
                res1.repaint();
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\sq_sqr_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to find the square and square \n"
                            + "root of a number.\n"
                            + "Steps to calculate:\n"
                            + "1.Enter your number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Square <b color='black'>|</b></font> to display only the</html>\n"
                            + "    square of the number.\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Square Root <b color='black'>|</b></font> to display only the</html>\n"
                            + "    square root of the number.\n"
                            + "<html>4.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Square & Square Root <b color='black'>|</b></font></html>\n"
                            + "    to display both square and\n"
                            + "     square root of the number.\n"
                            + "And your result will be displayed according to button \n"
                            + "you have clicked.\n"
                            + "\n"
                            + "*You can clear the content of textbox with its \n"
                            + "<html>   result using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> .</html>\n",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = res1.getText();
                String num3 = res2.getText();
                if (!(num1.equals("")) && !(num2.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your Number: " + num1 + "\n" + num2 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res1.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            find_test();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    find_test();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res1.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Square and Square Root");
        sh.addItem("Multiplication Table Of A Number");
        sh.addItem("Factorial Of A Number");
        sh.addItem("Prime Number Test");
        sh.addItem("Even Odd Number Test");
        sh.addItem("Perfect Square Number Test");
        sh.addItem("Cube and Cube Root");
        sh.addItem("Roots of Quadratic Equation");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Multiplication Table Of A Number")) {
                    String s1 = n1tb.getText();
                    String s2 = res1.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                multiplication_table();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        multiplication_table();
                    }
                }
                if (op.equals("Factorial Of A Number")) {
                    String s1 = n1tb.getText();
                    String s2 = res1.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                Fact();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        Fact();
                    }
                }
                if (op.equals("Prime Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = res1.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                prime();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        prime();
                    }
                }
                if (op.equals("Even Odd Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = res1.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                evenodd();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        evenodd();
                    }
                }
                if (op.equals("Perfect Square Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = res1.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfct_sq();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfct_sq();
                    }
                }
                if (op.equals("Cube and Cube Root")) {
                    String s1 = n1tb.getText();
                    String s2 = res1.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                cube_croot();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        cube_croot();
                    }
                }
                if (op.equals("Roots of Quadratic Equation")) {
                    String s1 = n1tb.getText();
                    String s2 = res1.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                quadratic_eq();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        quadratic_eq();
                    }
                }

            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void cube_croot() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Cube and Cube Root", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter A Number:");
        n1.setBounds(40, 70, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        JLabel res1 = new JLabel();
        res1.setBounds(50, 200, 900, 100);
        res1.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res1);

        jp.repaint();
        JLabel res2 = new JLabel();
        res2.setBounds(60, 235, 900, 100);
        res2.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res2);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets Everything");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                res1.setText("");
                res2.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Cube");
        fact.setBounds(100, 158, 100, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Shows cube of the number");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double n = 0;
                try {
                    n = Integer.parseInt(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number.");
                }
                res1.setText("Result: Cube of " + n + " = " + (n * n * n));
                res2.setText("");
                res1.repaint();
                res2.repaint();
            }
        });

        jp.repaint();
        MyColoredButton sqr = new MyColoredButton("Cube Root");
        sqr.setBounds(230, 158, 150, 30);
        sqr.setFont(new Font("Arial", Font.BOLD, 15));
        sqr.setToolTipText("Shows cube root of the number");
        jp.add(sqr);
        sqr.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double n = 0;
                try {
                    n = Integer.parseInt(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number.");
                }
                res1.setText("Result: Cube Root of " + n + " = " + (Math.cbrt(n)));
                res2.setText("");
                res1.repaint();
                res2.repaint();
            }
        });

        jp.repaint();
        MyColoredButton ssqr = new MyColoredButton("Cube & Cube Root");
        ssqr.setBounds(410, 158, 200, 30);
        ssqr.setFont(new Font("Arial", Font.BOLD, 15));
        ssqr.setToolTipText("shows cube and cube root of the number");
        jp.add(ssqr);
        ssqr.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double n = 0;
                try {
                    n = Integer.parseInt(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number.");
                }
                res1.setText("Result: Cube of " + n + " = " + (n * n * n));
                res2.setText("          and its Cube Root = " + (Math.cbrt(n)));
                res1.repaint();
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\cb_cbr_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to find the cube and cube root \n"
                            + "of a number.\n"
                            + "Steps to calculate:\n"
                            + "1.Enter your number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Cube <b color='black'>|</b></font> to display only the</html>\n"
                            + "    cube of the number.\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Cube Root <b color='black'>|</b></font> to display only the</html>\n"
                            + "    cube root of the number.\n"
                            + "<html>4.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Cube & Cube Root <b color='black'>|</b></font></html>\n"
                            + "    to display both cube and\n"
                            + "     cube root of the number.\n"
                            + "And your result will be displayed according to button \n"
                            + "you have clicked.\n"
                            + "\n"
                            + "*You can clear the content of textbox with its \n"
                            + "<html>   result using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> .</html>\n",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = res1.getText();
                String num3 = res2.getText();
                if (!(num1.equals("")) && !(num2.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your Number: " + num1 + "\n" + num2 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res1.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            find_test();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    find_test();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res1.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Cube and Cube Root");
        sh.addItem("Multiplication Table Of A Number");
        sh.addItem("Factorial Of A Number");
        sh.addItem("Prime Number Test");
        sh.addItem("Even Odd Number Test");
        sh.addItem("Perfect Square Number Test");
        sh.addItem("Square and Square Root");
        sh.addItem("Roots of Quadratic Equation");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Multiplication Table Of A Number")) {
                    String s1 = n1tb.getText();
                    String s2 = res1.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                multiplication_table();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        multiplication_table();
                    }
                }
                if (op.equals("Factorial Of A Number")) {
                    String s1 = n1tb.getText();
                    String s2 = res1.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                Fact();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        Fact();
                    }
                }
                if (op.equals("Prime Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = res1.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                prime();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        prime();
                    }
                }
                if (op.equals("Even Odd Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = res1.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                evenodd();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        evenodd();
                    }
                }
                if (op.equals("Perfect Square Number Test")) {
                    String s1 = n1tb.getText();
                    String s2 = res1.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfct_sq();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfct_sq();
                    }
                }
                if (op.equals("Square and Square Root")) {
                    String s1 = n1tb.getText();
                    String s2 = res1.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                square_Sroot();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        square_Sroot();
                    }
                }
                if (op.equals("Roots of Quadratic Equation")) {
                    String s1 = n1tb.getText();
                    String s2 = res1.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                quadratic_eq();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        quadratic_eq();
                    }
                }

            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void quadratic_eq() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Roots of Quadratic Equation", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));
        jp.repaint();

        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter the values of a, b, c, in given format (ax²+bx+c=0):");
        n1.setBounds(40, 70, 700, 100);
        n1.setFont(new Font("Bookman Old Style", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField x2t = new JTextField();
        x2t.setBounds(30, 158, 70, 30);
        x2t.setFont(new Font("Serif", Font.BOLD, 15));
        jp.add(x2t);
        x2t.setToolTipText("Enter value of 'a'");
        x2t.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '-') || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        JLabel x2 = new JLabel("x² + ");
        x2.setBounds(105, 120, 900, 100);
        x2.setFont(new Font("Century Gothic", Font.BOLD, 30));
        jp.add(x2);

        jp.repaint();
        JTextField xt = new JTextField();
        xt.setBounds(170, 158, 70, 30);
        xt.setFont(new Font("Serif", Font.BOLD, 15));
        xt.setToolTipText("Enter value of 'b'");
        jp.add(xt);
        xt.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '-') || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        JLabel x = new JLabel("x + ");
        x.setBounds(245, 120, 900, 100);
        x.setFont(new Font("Century Gothic", Font.BOLD, 30));
        jp.add(x);

        jp.repaint();
        JTextField ct = new JTextField();
        ct.setBounds(300, 158, 70, 30);
        ct.setToolTipText("Enter value of 'c'");
        ct.setFont(new Font("Serif", Font.BOLD, 15));
        jp.add(ct);
        ct.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '-') || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        JLabel cl = new JLabel("= 0");
        cl.setBounds(375, 120, 900, 100);
        cl.setFont(new Font("Century Gothic", Font.BOLD, 30));
        jp.add(cl);

        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(50, 200, 900, 100);
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        JLabel res1 = new JLabel();
        res1.setBounds(150, 235, 900, 100);
        res1.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res1);

        jp.repaint();
        JLabel res2 = new JLabel();
        res2.setBounds(150, 270, 900, 100);
        res2.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res2);

        jp.repaint();
        JLabel l = new JLabel("(a)             (b)           (c)");
        l.setBounds(53, 145, 900, 100);
        l.setFont(new Font("Courier New", Font.BOLD, 15));
        jp.add(l);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(450, 158, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(rtn1);
        rtn1.setToolTipText("Resets everything");
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                x2t.setText("");
                xt.setText("");
                ct.setText("");
                res.setText("");
                res1.setText("");
                res2.setText("");
            }
        });

        jp.repaint();
        MyColoredButton sol = new MyColoredButton("Calculate");
        sol.setBounds(560, 158, 150, 30);
        sol.setFont(new Font("Arial", Font.BOLD, 15));
        sol.setToolTipText("Shows the roots of quadratic equation");
        jp.add(sol);
        sol.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double a = 0, b = 0, c = 0, root, x1, x2;
                try {
                    a = Double.parseDouble(x2t.getText());
                    b = Double.parseDouble(xt.getText());
                    c = Double.parseDouble(ct.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Number.");
                }

                root = (Math.sqrt(b * b - 4 * a * c));
                x1 = (-b + root) / (2 * a);
                x2 = (-b - root) / (2 * a);
                int ai, bi, ci;
                ai = (int) a;
                bi = (int) b;
                ci = (int) c;
                if (b < 0 && c < 0) {
                    res.setText("Result: The roots of the quadratic equation " + ai + "x² " + bi + "x " + ci + " =0");
                }
                if (b > 0 && c < 0) {
                    res.setText("Result: The roots of the quadratic equation " + ai + "x² +" + bi + "x " + ci + " =0");
                }
                if (b < 0 && c > 0) {
                    res.setText("Result: The roots of the quadratic equation " + ai + "x² " + bi + "x +" + ci + " =0");
                }
                if (b > 0 && c > 0) {
                    res.setText("Result: The roots of the quadratic equation " + ai + "x² +" + bi + "x +" + ci + " =0");
                }
                res1.setText("x1= " + x1);
                res2.setText("x2= " + x2);
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\qua_eq_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to solve and get the roots of the\n"
                            + "quadratic equation.\n"
                            + "\n"
                            + "Steps to calculate:\n"
                            + "1.Enter the values of 'a', 'b' and 'c' in their respective\n"
                            + "    textbox according to general form ax² + bx + c=0.\n"
                            + "<html>2. Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate <b color='black'>|</b></font> to display the roots</html>\n"
                            + "     of your quadratic equation.\n"
                            + "And the roots will be displayed.\n"
                            + "\n"
                            + "*You can clear the content of textbox with its \n"
                            + "<html>  result using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> .</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String copy_a = x2t.getText();
                String copy_b = xt.getText();
                String copy_c = ct.getText();
                String num1 = res.getText();
                String num2 = res1.getText();
                String num3 = res2.getText();
                if (!(copy_a.equals("")) && !(copy_b.equals("")) && !(copy_c.equals("")) && !(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("You entered value of 'a' as: " + copy_a);
                    b.append("\nYou entered value of 'b' as: " + copy_b);
                    b.append("\nYou entered value of 'c' as: " + copy_c);
                    b.append("\n" + num1 + "\n" + num2 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = x2t.getText();
                String s2 = xt.getText();
                String s3 = ct.getText();
                String s4 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            find_test();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    find_test();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = x2t.getText();
                String s2 = xt.getText();
                String s3 = ct.getText();
                String s4 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Roots of Quadratic Equation");
        sh.addItem("Multiplication Table Of A Number");
        sh.addItem("Factorial Of A Number");
        sh.addItem("Prime Number Test");
        sh.addItem("Even Odd Number Test");
        sh.addItem("Perfect Square Number Test");
        sh.addItem("Square and Square Root");
        sh.addItem("Cube and Cube Root");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Multiplication Table Of A Number")) {
                    String s1 = x2t.getText();
                    String s2 = xt.getText();
                    String s3 = ct.getText();
                    String s4 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                multiplication_table();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }

                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        multiplication_table();
                    }
                }
                if (op.equals("Factorial Of A Number")) {
                    String s1 = x2t.getText();
                    String s2 = xt.getText();
                    String s3 = ct.getText();
                    String s4 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                Fact();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }

                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        Fact();
                    }
                }
                if (op.equals("Even Odd Number Test")) {
                    String s1 = x2t.getText();
                    String s2 = xt.getText();
                    String s3 = ct.getText();
                    String s4 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                evenodd();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }

                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        evenodd();
                    }
                }
                if (op.equals("Perfect Square Number Test")) {
                    String s1 = x2t.getText();
                    String s2 = xt.getText();
                    String s3 = ct.getText();
                    String s4 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfct_sq();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }

                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfct_sq();
                    }
                }
                if (op.equals("Square and Square Root")) {
                    String s1 = x2t.getText();
                    String s2 = xt.getText();
                    String s3 = ct.getText();
                    String s4 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                square_Sroot();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }

                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        square_Sroot();
                    }
                }
                if (op.equals("Cube and Cube Root")) {
                    String s1 = x2t.getText();
                    String s2 = xt.getText();
                    String s3 = ct.getText();
                    String s4 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                cube_croot();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }

                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        cube_croot();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();
    }

    public void area_calculator() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        jp.repaint();
        JLabel ml = new JLabel("Area Calculator", SwingConstants.CENTER);
        ml.setBounds(115, 20, 500, 50);
        ml.setBorder(BorderFactory.createLineBorder(Color.black, 3));
        ml.setFont(new Font("Garamond", Font.BOLD, 35));
        jp.add(ml, new Integer(-6));

        jp.repaint();
        MyColoredButton mt = new MyColoredButton("Area of Square");
        mt.setBounds(85, 100, 270, 40);
        mt.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(mt);
        mt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                area_square();
            }
        });

        jp.repaint();
        MyColoredButton fn = new MyColoredButton("Area of Circle");
        fn.setBounds(390, 100, 270, 40);
        fn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(fn);
        fn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                area_circle();
            }
        });

        jp.repaint();
        MyColoredButton pn = new MyColoredButton("Area of Rectangle");
        pn.setBounds(85, 170, 270, 40);
        pn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(pn);
        pn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                area_rectangle();
            }
        });

        jp.repaint();
        MyColoredButton eo = new MyColoredButton("Area of Triangle");
        eo.setBounds(390, 170, 270, 40);
        eo.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(eo);
        eo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                area_triangle();
            }
        });

        jp.repaint();
        MyColoredButton sn = new MyColoredButton("Area of Parallelogram");
        sn.setBounds(85, 240, 270, 40);
        sn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(sn);
        sn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                area_parallelogram();
            }
        });

        jp.repaint();
        MyColoredButton sr = new MyColoredButton("Area of Rhombus");
        sr.setBounds(390, 240, 270, 40);
        sr.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(sr);
        sr.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                area_rhombus();
            }
        });

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(140, 380, 200, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                mainmenu();
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(400, 380, 200, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        jp.repaint();
        
        jp.repaint();
    }

    public void area_square() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Area of Square", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter side of a Square:");
        n1.setBounds(40, 70, 250, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(250, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter the side of square here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(135, 230, 500, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets everything");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                res.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate Area");
        fact.setBounds(200, 158, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Shows area of square");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                double n = 0;
                try {
                    n = Double.parseDouble(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Side of Square");
                }
                res.setText("Result: Area of Square: " + (n * n) + " unit ²");
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\a_sq_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to calculate the area of square.\n"
                            + "\n"
                            + "Steps To Calculate Area of Square:\n"
                            + "1.Enter the side of square.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate Area <b color='black'>|</b></font> .</html>\n"
                            + "    And the area of square will be displayed.\n"
                            + "\n"
                            + "*You can clear the content of textbox with its\n"
                            + "<html>   result using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> .</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("You entered side of square as: " + num1 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            area_calculator();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    area_calculator();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Area of Square");
        sh.addItem("Area of Circle");
        sh.addItem("Area of Rectangle");
        sh.addItem("Area of Triangle");
        sh.addItem("Area of Parallelogram");
        sh.addItem("Area of Rhombus");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Area of Circle")) {

                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_circle();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_circle();
                    }
                }
                if (op.equals("Area of Rectangle")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_rectangle();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_rectangle();
                    }
                }
                if (op.equals("Area of Triangle")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_triangle();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_triangle();
                    }
                }
                if (op.equals("Area of Parallelogram")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_parallelogram();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_parallelogram();
                    }
                }
                if (op.equals("Area of Rhombus")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_rhombus();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_rhombus();
                    }
                }

            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void area_circle() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Area of Circle", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter radius of a Circle:");
        n1.setBounds(40, 70, 250, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(257, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter radius of circle here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 800, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets everything");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                res.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate Area");
        fact.setBounds(200, 158, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Shows Area of circle");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double r = 0;
                try {
                    r = Double.parseDouble(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter the raduis of circle");
                }
                res.setText("Result: Area of circle: " + (Math.PI * r * r) + " unit ²");
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\a_cir_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to calculate the area of circle.\n"
                            + "\n"
                            + "Steps To Calculate Area of Circle:\n"
                            + "1.Enter the radius of circle.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate Area <b color='black'>|</b></font> .</html>\n"
                            + "    And the area of circle will be displayed.\n"
                            + "\n"
                            + "*You can clear the content of textbox with its\n"
                            + "<html>   result using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> .</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("You entered raduis of circle as: " + num1 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            area_calculator();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    area_calculator();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Area of Circle");
        sh.addItem("Area of Square");
        sh.addItem("Area of Rectangle");
        sh.addItem("Area of Triangle");
        sh.addItem("Area of Parallelogram");
        sh.addItem("Area of Rhombus");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Area of Square")) {

                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_square();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_square();
                    }
                }
                if (op.equals("Area of Rectangle")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_rectangle();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_rectangle();
                    }
                }
                if (op.equals("Area of Triangle")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_triangle();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_triangle();
                    }
                }
                if (op.equals("Area of Parallelogram")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_parallelogram();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_parallelogram();
                    }
                }
                if (op.equals("Area of Rhombus")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_rhombus();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_rhombus();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();
    }

    public void area_rectangle() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Area of Rectangle", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter Width of a Rectangle:");
        n1.setBounds(40, 70, 250, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(295, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter width of a rectangle");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 800, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets width");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter Height of a Rectangle:");
        n2.setBounds(35, 120, 260, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(295, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter height of a rectangle");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(500, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets height");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate Area");
        fact.setBounds(200, 205, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(fact);
        fact.setToolTipText("Shows area of rectangle");
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double width = 0, height = 0;
                try {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                    } catch (Exception e) {
                    }
                    width = Double.parseDouble(n1tb.getText());
                    height = Double.parseDouble(n2tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter both height and with of rectangle");
                }
                res.setText("Result: Area of Rectangle: " + (width * height) + " unit ²");
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                res.setText("");
            }
        });
        jp.repaint();

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\a_rect_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to calculate the area of rectangle.\n"
                            + "\n"
                            + "Steps To Calculate Area of Rectangle:\n"
                            + "1.Enter the width of rectangle.\n"
                            + "2.Enter the height of rectangle.\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate Area <b color='black'>|</b></font> .</html>\n"
                            + "    And the area of rectangle will be displayed.\n"
                            + "\n"
                            + "*You can clear the content of any textbox \n"
                            + "<html>   using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it,</html>\n"
                            + "<html>   also you can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset </html>\n"
                            + "   all textbox and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("You have entered width of rectangle as: " + num1 + "\n");
                    b.append("You have entered height of rectangle as: " + num2 + "\n");
                    b.append(num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            area_calculator();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    area_calculator();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Area of Rectangle");
        sh.addItem("Area of Square");
        sh.addItem("Area of Circle");
        sh.addItem("Area of Triangle");
        sh.addItem("Area of Parallelogram");
        sh.addItem("Area of Rhombus");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Area of Square")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_square();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }
                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_square();
                    }
                }
                if (op.equals("Area of Circle")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_circle();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_circle();
                    }
                }
                if (op.equals("Area of Triangle")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_triangle();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_triangle();
                    }
                }
                if (op.equals("Area of Parallelogram")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_parallelogram();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_parallelogram();
                    }
                }
                if (op.equals("Area of Rhombus")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_rhombus();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_rhombus();
                    }
                }

            }
        });

        jp.repaint();

        jp.repaint();
        
        jp.repaint();
    }

    public void area_triangle() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Area of Triangle", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter Base of a Triangle:");
        n1.setBounds(50, 70, 250, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(280, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter base of a triangle");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 800, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets base");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter Height of a Triangle:");
        n2.setBounds(35, 120, 260, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(280, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter height of a triangle");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(500, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets height");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate Area");
        fact.setBounds(200, 205, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Shows the area of a triangle");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double base = 0, height = 0;
                try {
                    base = Double.parseDouble(n1tb.getText());
                    height = Double.parseDouble(n2tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter both base and height of triangle");
                }
                res.setText("Result: Area of Triangle: " + (0.5 * base * height) + " unit ²");
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                res.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\a_tri_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to calculate the area of triangle.\n"
                            + "\n"
                            + "Steps To Calculate Area of Triangle:\n"
                            + "1.Enter the base of triangle.\n"
                            + "2.Enter the height of triangle.\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate Area <b color='black'>|</b></font> .</html>\n"
                            + "    And the area of triangle will be displayed.\n"
                            + "\n"
                            + "*You can clear the content of any textbox \n"
                            + "<html>   using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it,</html>\n"
                            + "<html>   also you can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset </html>\n"
                            + "   all textbox and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("You have entered base of triangle as: " + num1 + "\n");
                    b.append("You have entered height of triangle as: " + num2 + "\n");
                    b.append(num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            area_calculator();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    area_calculator();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Area of Triangle");
        sh.addItem("Area of Square");
        sh.addItem("Area of Circle");
        sh.addItem("Area of Rectangle");
        sh.addItem("Area of Parallelogram");
        sh.addItem("Area of Rhombus");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Area of Square")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_square();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }
                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_square();
                    }
                }
                if (op.equals("Area of Circle")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_circle();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_circle();
                    }
                }
                if (op.equals("Area of Rectangle")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_rectangle();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_rectangle();
                    }
                }
                if (op.equals("Area of Parallelogram")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_parallelogram();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_parallelogram();
                    }
                }
                if (op.equals("Area of Rhombus")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_rhombus();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_rhombus();
                    }
                }

            }
        });

        jp.repaint();

        jp.repaint();
        
        jp.repaint();
    }

    public void area_parallelogram() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Area of Parallelogram", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter Base of a Parallelogram:");
        n1.setBounds(50, 70, 350, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(335, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter base of a parallelogram");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 800, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(600, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets base");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter Height of a Parallelogram:");
        n2.setBounds(35, 120, 350, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(335, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter height of a parallelogram");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(600, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets height");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate Area");
        fact.setBounds(200, 205, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Shows area of a parallelogram");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                double base = 0, height = 0;
                try {
                    base = Double.parseDouble(n1tb.getText());
                    height = Double.parseDouble(n2tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter both base and height of parallelogram");
                }
                res.setText("Result: Area of Parallelogram: " + (base * height) + " unit ²");
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setToolTipText("Resets everything");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                res.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\a_par_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to calculate the area of parallelogram.\n"
                            + "\n"
                            + "Steps To Calculate Area of Parallelogram:\n"
                            + "1.Enter the base of parallelogram.\n"
                            + "2.Enter the height of parallelogram.\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate Area <b color='black'>|</b></font> .</html>\n"
                            + "    And the area of parallelogram will be displayed.\n"
                            + "\n"
                            + "*You can clear the content of any textbox \n"
                            + "<html>   using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it,</html>\n"
                            + "<html>   also you can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset </html>\n"
                            + "   all textbox and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("You have entered base of parallelogram as: " + num1 + "\n");
                    b.append("You have entered height of parallelogram as: " + num2 + "\n");
                    b.append(num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            area_calculator();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    area_calculator();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Area of Parallelogram");
        sh.addItem("Area of Square");
        sh.addItem("Area of Circle");
        sh.addItem("Area of Rectangle");
        sh.addItem("Area of Triangle");
        sh.addItem("Area of Rhombus");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Area of Square")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_square();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }
                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_square();
                    }
                }
                if (op.equals("Area of Circle")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_circle();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_circle();
                    }
                }
                if (op.equals("Area of Rectangle")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_rectangle();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_rectangle();
                    }
                }
                if (op.equals("Area of Triangle")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_triangle();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_triangle();
                    }
                }
                if (op.equals("Area of Rhombus")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_rhombus();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_rhombus();
                    }
                }

            }
        });

        jp.repaint();

        jp.repaint();
        
        jp.repaint();
    }

    public void area_rhombus() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Area of Rhombus", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter length of first diagonal:");
        n1.setBounds(60, 70, 350, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(335, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter length of first diagonal here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 800, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(600, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets first diagonal");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter length of second diagonal:");
        n2.setBounds(35, 120, 350, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(335, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter length of second diagonal here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(600, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets second diagonal");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate Area");
        fact.setBounds(200, 205, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Shows area of rhombus");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double d1 = 0, d2 = 0;
                try {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                    } catch (Exception e) {
                    }
                    d1 = Double.parseDouble(n1tb.getText());
                    d2 = Double.parseDouble(n2tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter both diagnols of rhombus");
                }
                res.setText("Result: Area of Rhombus: " + (0.5 * (d1 * d2)) + " unit ²");
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                res.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\a_rho_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to calculate the area of rhombus.\n"
                            + "\n"
                            + "Steps To Calculate Area of Rhombus:\n"
                            + "1.Enter the length of first diagonal of a rhombus.\n"
                            + "2.Enter the length of second diagonal of a rhombus.\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate Area <b color='black'>|</b></font> .</html>\n"
                            + "    And the area of rhombus will be displayed.\n"
                            + "\n"
                            + "*You can clear the content of any textbox \n"
                            + "<html>   using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it,</html>\n"
                            + "<html>   also you can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset </html>\n"
                            + "   all textbox and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("You have entered the length of first diagonal of a rhombus as: " + num1 + "\n");
                    b.append("You have entered the length of second diagonal of a rhombus as: " + num2 + "\n");
                    b.append(num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            area_calculator();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    area_calculator();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Area of Rhombus");
        sh.addItem("Area of Square");
        sh.addItem("Area of Circle");
        sh.addItem("Area of Rectangle");
        sh.addItem("Area of Triangle");
        sh.addItem("Area of Parallelogram");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Area of Square")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_square();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }
                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_square();
                    }
                }
                if (op.equals("Area of Circle")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_circle();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_circle();
                    }
                }
                if (op.equals("Area of Rectangle")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_rectangle();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_rectangle();
                    }
                }
                if (op.equals("Area of Triangle")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_triangle();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_triangle();
                    }
                }
                if (op.equals("Area of Parallelogram")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                area_parallelogram();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        area_parallelogram();
                    }
                }

            }
        });

        jp.repaint();

        jp.repaint();
        
        jp.repaint();
    }

    public void volume_calculator() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        jp.repaint();
        JLabel ml = new JLabel("Volume Calculator", SwingConstants.CENTER);
        ml.setBounds(115, 20, 500, 50);
        ml.setBorder(BorderFactory.createLineBorder(Color.black, 3));
        ml.setFont(new Font("Garamond", Font.BOLD, 35));
        jp.add(ml, new Integer(-6));

        jp.repaint();
        MyColoredButton mt = new MyColoredButton("Volume of Cube");
        mt.setBounds(85, 100, 270, 40);
        mt.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(mt);
        mt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                volume_cube();
            }
        });

        jp.repaint();
        MyColoredButton fn = new MyColoredButton("Volume of Cylinder");
        fn.setBounds(390, 100, 270, 40);
        fn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(fn);
        fn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                volume_cylinder();
            }
        });

        jp.repaint();
        MyColoredButton pn = new MyColoredButton("Volume of Cone");
        pn.setBounds(85, 170, 270, 40);
        pn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(pn);
        pn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                volume_cone();
            }
        });

        jp.repaint();
        MyColoredButton eo = new MyColoredButton("Volume of Cuboid");
        eo.setBounds(390, 170, 270, 40);
        eo.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(eo);
        eo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                volume_cuboid();
            }
        });

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(140, 380, 200, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                mainmenu();
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(400, 380, 200, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        jp.repaint();
        
        jp.repaint();
    }

    public void volume_cube() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Volume of Cube", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter side of a Cube:");
        n1.setBounds(40, 70, 250, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(233, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter side of a Cube here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(70, 230, 1000, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets everything");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                res.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate Volume");
        fact.setBounds(200, 158, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Shows Volume of cube");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double n = 0;
                try {
                    n = Double.parseDouble(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter The Side of Cube.");
                }
                res.setText("Result: Volume of Cube: " + (n * n * n) + " unit ³");
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\v_cube_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to calculate the volume of cube.\n"
                            + "\n"
                            + "Steps To Calculate Volume of Cube:\n"
                            + "1.Enter the side of cube.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate Volume <b color='black'>|</b></font> .</html>\n"
                            + "    And the volume of cube will be displayed.\n"
                            + "\n"
                            + "*You can clear the content of textbox with its\n"
                            + "<html>  result using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> .</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("You entered side of cube as: " + num1 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            volume_calculator();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    volume_calculator();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Volume of Cube");
        sh.addItem("Volume of Cylinder");
        sh.addItem("Volume of Cone");
        sh.addItem("Volume of Cuboid");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Volume of Cylinder")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                volume_cylinder();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        volume_cylinder();
                    }
                }
                if (op.equals("Volume of Cone")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                volume_cone();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        volume_cone();
                    }
                }
                if (op.equals("Volume of Cuboid")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                volume_cuboid();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        volume_cuboid();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void volume_cylinder() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Volume of Cylinder", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter radius of a cylinder:");
        n1.setBounds(40, 70, 250, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(275, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter radius of a cylinder here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 800, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets radius");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter height of a cylinder:");
        n2.setBounds(37, 120, 260, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(275, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter height of a cylinder here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(500, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets height");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate Volume");
        fact.setBounds(200, 205, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Shows Volume of Cylinder");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                double r = 0, height = 0;
                try {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                    } catch (Exception e) {
                    }
                    r = Double.parseDouble(n1tb.getText());
                    height = Double.parseDouble(n2tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter both raduis and height of cylinder.");
                }
                res.setText("Result: Volume of Cylinder: " + (Math.PI * (r * r) * height) + " unit ³");
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                res.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\v_cy_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to calculate the volume of cylinder.\n"
                            + "\n"
                            + "Steps To Calculate Volume of Cylinder:\n"
                            + "1.Enter the radius of cylinder.\n"
                            + "2.Enter the height of cylinder\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate Volume <b color='black'>|</b></font> .</html>\n"
                            + "    And the volume of cylinder will be displayed.\n"
                            + "\n"
                            + "*You can clear the content of any textbox \n"
                            + "<html>   using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it,</html>\n"
                            + "<html>   also you can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset </html>\n"
                            + "   all textbox and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("You have entered raduis of cylinder as: " + num1 + "\n");
                    b.append("You have entered height of cylinder as: " + num2 + "\n");
                    b.append(num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            volume_calculator();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    volume_calculator();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Volume of Cylinder");
        sh.addItem("Volume of Cube");
        sh.addItem("Volume of Cone");
        sh.addItem("Volume of Cuboid");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Volume of Cube")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                volume_cube();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        volume_cube();
                    }
                }
                if (op.equals("Volume of Cone")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                volume_cone();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        volume_cone();
                    }
                }
                if (op.equals("Volume of Cuboid")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                volume_cuboid();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        volume_cuboid();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void volume_cone() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Volume of Cone", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter radius of a Cone:");
        n1.setBounds(40, 70, 250, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(250, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter radius of a Cone here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 800, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets radius");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter height of a Cone:");
        n2.setBounds(37, 120, 260, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(250, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter height of a Cone here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(500, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets height");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate Volume");
        fact.setBounds(200, 205, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Shows volume of cone");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double r = 0, height = 0;
                try {
                    r = Double.parseDouble(n1tb.getText());
                    height = Double.parseDouble(n2tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter both raduis and height of Cone.");
                }
                res.setText("Result: Volume of Cone: " + ((Math.PI * r * r * height) / 3) + " unit ³");
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                res.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\v_co_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to calculate the volume of cone.\n"
                            + "\n"
                            + "Steps To Calculate Volume of Cone:\n"
                            + "1.Enter the radius of cone.\n"
                            + "2.Enter the height of cone\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate Volume <b color='black'>|</b></font> .</html>\n"
                            + "    And the volume of cone will be displayed.\n"
                            + "\n"
                            + "*You can clear the content of any textbox \n"
                            + "<html>   using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it,</html>\n"
                            + "<html>   also you can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset </html>\n"
                            + "   all textbox and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("You have entered raduis of cone as: " + num1 + "\n");
                    b.append("You have entered height of cone as: " + num2 + "\n");
                    b.append(num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            volume_calculator();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    volume_calculator();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Volume of Cone");
        sh.addItem("Volume of Cube");
        sh.addItem("Volume of Cylinder");
        sh.addItem("Volume of Cuboid");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Volume of Cube")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                volume_cube();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        volume_cube();
                    }
                }
                if (op.equals("Volume of Cylinder")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                volume_cylinder();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        volume_cylinder();
                    }
                }
                if (op.equals("Volume of Cuboid")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                volume_cuboid();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        volume_cuboid();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void volume_cuboid() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Volume of Cuboid", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter length of a cuboid:");
        n1.setBounds(40, 70, 250, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(265, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter length of a cuboid here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 800, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets length");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter width of cuboid:");
        n2.setBounds(60, 120, 260, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(265, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter width of cuboid here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(500, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets width");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        JLabel n3 = new JLabel("Enter height of cuboid:");
        n3.setBounds(55, 170, 260, 100);
        n3.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n3);
        jp.repaint();

        JTextField n3tb = new JTextField();
        n3tb.setBounds(265, 208, 200, 30);
        n3tb.setFont(new Font("Serif", Font.BOLD, 15));
        n3tb.setToolTipText("Enter height of cuboid here");
        jp.add(n3tb);
        n3tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn3 = new MyColoredButton("Reset");
        rtn3.setBounds(500, 208, 100, 30);
        rtn3.setFont(new Font("Arial", Font.BOLD, 15));
        rtn3.setToolTipText("Resets height");
        jp.add(rtn3);
        rtn3.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n3tb.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate Volume");
        fact.setBounds(200, 330, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Shows volume of cuboid");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double w = 0, h = 0, l = 0;
                try {
                    l = Double.parseDouble(n1tb.getText());
                    w = Double.parseDouble(n2tb.getText());
                    h = Double.parseDouble(n3tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter all length,width and height of Cuboid.");
                }

                res.setText("Result: Volume of Cuboid: " + (l * w * h) + " unit ³");
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                n3tb.setText("");
                res.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\v_cu_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to calculate the volume of cuboid.\n"
                            + "\n"
                            + "Steps To Calculate Volume of Cuboid:\n"
                            + "1.Enter the length of cuboid.\n"
                            + "2.Enter the width of cuboid.\n"
                            + "3.Enter the height of cuboid.\n"
                            + "<html>4.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate Volume <b color='black'>|</b></font> .</html>\n"
                            + "    And the volume of cuboid will be displayed.\n"
                            + "\n"
                            + "*You can clear the content of any textbox \n"
                            + "<html>   using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it,</html>\n"
                            + "<html>   also you can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset </html>\n"
                            + "   all textbox and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = n3tb.getText();
                String num4 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals("")) && !(num4.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("You have entered length of cuboid as: " + num1 + "\n");
                    b.append("You have entered width of cuboid as: " + num2 + "\n");
                    b.append("You have entered height of cuboid as: " + num3 + "\n");
                    b.append(num4);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = n3tb.getText();
                String s4 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("") || !(s4.equals("")))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            volume_calculator();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    volume_calculator();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = n3tb.getText();
                String s4 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("") || !(s4.equals("")))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Volume of Cuboid");
        sh.addItem("Volume of Cube");
        sh.addItem("Volume of Cylinder");
        sh.addItem("Volume of Cone");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Volume of Cube")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = n3tb.getText();
                    String s4 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("") || !(s4.equals("")))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                volume_cube();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        volume_cube();
                    }
                }
                if (op.equals("Volume of Cylinder")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = n3tb.getText();
                    String s4 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("") || !(s4.equals("")))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                volume_cylinder();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        volume_cylinder();
                    }
                }
                if (op.equals("Volume of Cone")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = n3tb.getText();
                    String s4 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("") || !(s4.equals("")))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                volume_cone();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        volume_cone();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void binary() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        jp.repaint();
        JLabel ml = new JLabel("Decimal-Binary Operations", SwingConstants.CENTER);
        ml.setBounds(115, 20, 500, 50);
        ml.setBorder(BorderFactory.createLineBorder(Color.black, 3));
        ml.setFont(new Font("Garamond", Font.BOLD, 35));
        jp.add(ml, new Integer(-6));

        jp.repaint();
        MyColoredButton mt = new MyColoredButton("Decimal->Binary conversion");
        mt.setBounds(20, 100, 340, 40);
        mt.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(mt);
        mt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                dec_bin();
            }
        });

        jp.repaint();
        MyColoredButton fn = new MyColoredButton("Binary->Decimal conversion");
        fn.setBounds(380, 100, 340, 40);
        fn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(fn);
        fn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                bin_dec();
            }
        });

        jp.repaint();
        MyColoredButton pn = new MyColoredButton("Addition of two binary numbers");
        pn.setBounds(20, 170, 340, 40);
        pn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(pn);
        pn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                add_bin();
            }
        });

        jp.repaint();
        MyColoredButton eo = new MyColoredButton("Subtraction of two binary numbers");
        eo.setBounds(380, 170, 340, 40);
        eo.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(eo);
        eo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                sub_bin();
            }
        });

        jp.repaint();
        MyColoredButton pn1 = new MyColoredButton("Multiplication of two binary numbers");
        pn1.setBounds(20, 240, 340, 40);
        pn1.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(pn1);
        pn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                mul_bin();
            }
        });

        jp.repaint();
        MyColoredButton eo1 = new MyColoredButton("Division of two binary numbers");
        eo1.setBounds(380, 240, 340, 40);
        eo1.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(eo1);
        eo1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                div_bin();
            }
        });

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(140, 380, 200, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                mainmenu();
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(400, 380, 200, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        jp.repaint();
        
        jp.repaint();

    }

    public void dec_bin() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Decimal->Binary conversion", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter a number:");
        n1.setBounds(60, 70, 250, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(210, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        jp.add(n1tb);
        n1tb.setToolTipText("Enter your decimal number here");
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(70, 230, 1000, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets everything.");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                res.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Convert-To-Binary");
        fact.setBounds(200, 158, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Converts decimal number to a binary number");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double n = 0;
                try {
                    n = Double.parseDouble(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter a number.");
                }
                int num = (int) n;
                double check = n - num;
                if (check == 0) {
                    int temp = num;
                    int i;
                    int rese[] = new int[1000];
                    for (i = 0; num > 0; i++) {
                        rese[i] = num % 2;
                        num = num / 2;
                    }
                    StringBuilder b = new StringBuilder();
                    for (int j = i; j >= 0; j--) {
                        b.append(rese[j]);
                    }
                    res.setText("Result: Binary number of " + temp + " is " + b);
                } else {
                    int i, i1;
                    int temp1 = num;
                    int rese[] = new int[1000];
                    int resef[] = new int[1000];
                    for (i = 0; num > 0; i++) {
                        rese[i] = num % 2;
                        num = num / 2;
                    }
                    StringBuilder b = new StringBuilder();
                    for (int j = i; j >= 0; j--) {
                        b.append(rese[j]);
                    }

                    for (i1 = 0; i1 <= 4; i1++) {
                        double temp = check * 2;
                        int f = (int) temp;
                        temp = temp - f;
                        resef[i1] = f;
                        check = temp;
                    }
                    StringBuilder b1 = new StringBuilder();
                    for (int j = 0; j <= 4; j++) {
                        b1.append(resef[j]);
                    }
                    res.setText("Result: Binary number of " + temp1 + " is " + b + "." + b1);
                }
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\dec_bin_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to convert  decimal number\n"
                            + "to a binary number.\n"
                            + "\n"
                            + "Steps To Convert:\n"
                            + "1.Enter the decimal number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Convert-To-Binary <b color='black'>|</b></font> .</html>\n"
                            + "    And then it  will convert your decimal number\n"
                            + "    to a binary number and display it.\n"
                            + "\n"
                            + "*You can clear the content of textbox with its result\n"
                            + "<html>   result using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> .</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your decimal number: " + num1 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            binary();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    binary();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Decimal->Binary conversion");
        sh.addItem("Binary->Decimal conversion");
        sh.addItem("Addition of two binary numbers");
        sh.addItem("Subtraction of two binary numbers");
        sh.addItem("Multiplication of two binary numbers");
        sh.addItem("Division of two binary numbers");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Binary->Decimal conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                bin_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        bin_dec();
                    }
                }
                if (op.equals("Addition of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                add_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        add_bin();
                    }
                }
                if (op.equals("Subtraction of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                sub_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        sub_bin();
                    }
                }
                if (op.equals("Multiplication of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                mul_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        mul_bin();
                    }
                }

                if (op.equals("Division of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_bin();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void bin_dec() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Binary->Decimal conversion", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter a binary number:");
        n1.setBounds(40, 70, 250, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(260, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your binary number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((c == '1') || (c == '0') || (c == '.') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(70, 230, 1000, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets everything");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                res.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Convert-To-Decimal");
        fact.setBounds(200, 158, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Converts binary number to decimal number");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                BigDecimal n = new BigDecimal(0);

                int num, z = 0, con;
                double pow = 0, rese = 0, pe = 0, bit, leng;
                BigDecimal check, temp;
                try {
                    n = new BigDecimal(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter a binary number.");
                }
                BigDecimal n2 = n;
                n2.toBigInteger();
                num = n2.intValue();
                temp = n;
                BigDecimal num1 = new BigDecimal(num);
                check = n.subtract(num1);
                n2 = check;

                String text = n2.toString();
                int integerPlaces = text.indexOf('.');
                int decimalPlaces = text.length() - integerPlaces - 1;
                for (int i = 0; i < decimalPlaces; i++) {
                    BigDecimal m = new BigDecimal(10);
                    check = check.multiply(m);
                }
                n2 = check;
                n2.toBigInteger();
                con = n2.intValue();

                if (con == 0) {

                    while (num > 0) {
                        bit = num % 10;
                        num = num / 10;
                        if (bit == 0) {
                            pow++;
                        }
                        if (bit == 1) {
                            pe = Math.pow(2, pow);
                            rese = rese + pe;
                            pow++;
                        }
                    }

                    res.setText("Result: Decimal number of " + temp + " is " + (Math.round(rese)));
                } else {
                    double pow1 = -1, rese1 = 0, pe1, temp1, bit1;
                    while (num > 0) {
                        bit = num % 10;
                        num = num / 10;
                        if (bit == 0) {
                            pow++;
                        }
                        if (bit == 1) {
                            pe = Math.pow(2, pow);
                            rese = rese + pe;
                            pow++;
                        }
                    }
                    String tem = Integer.toString(con);
                    int[] fn = new int[tem.length()];
                    for (int i = 0; i < tem.length(); i++) {
                        fn[i] = tem.charAt(i) - '0';
                    }
                    for (int i = 0; i < tem.length(); i++) {
                        bit1 = fn[i];

                        if (bit1 == 0) {
                            pow1--;
                        }
                        if (bit1 == 1) {
                            pe1 = Math.pow(2, pow1);
                            rese1 = rese1 + pe1;
                            pow1--;
                        }
                    }
                    res.setText("Result: Decimal number of " + temp + " is " + (rese + rese1));
                }
            }
        });
        jp.repaint();

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\bin_dec_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to convert binary number\n"
                            + "to a decimal number.\n"
                            + "\n"
                            + "Steps To Convert:\n"
                            + "1.Enter the binary number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Convert-To-Decimal <b color='black'>|</b></font> .</html>\n"
                            + "    And then it  will convert your binary number\n"
                            + "    to a decimal number and display it.\n"
                            + "\n"
                            + "*You can clear the content of textbox with its result\n"
                            + "<html>   using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> .</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your binary number: " + num1 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            binary();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    binary();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Binary->Decimal conversion");
        sh.addItem("Decimal->Binary conversion");
        sh.addItem("Addition of two binary numbers");
        sh.addItem("Subtraction of two binary numbers");
        sh.addItem("Multiplication of two binary numbers");
        sh.addItem("Division of two binary numbers");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Decimal->Binary conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_bin();
                    }
                }
                if (op.equals("Addition of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                add_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        add_bin();
                    }
                }
                if (op.equals("Subtraction of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                sub_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        sub_bin();
                    }
                }
                if (op.equals("Multiplication of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                mul_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        mul_bin();
                    }
                }

                if (op.equals("Division of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_bin();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void add_bin() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Addition of two binary numbers", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter first binary number:");
        n1.setBounds(55, 70, 250, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(290, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your first binary number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((c == '1') || (c == '0') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 800, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets first binary number");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter second binary number:");
        n2.setBounds(30, 120, 260, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(290, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter your second binary number here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((c == '1') || (c == '0') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(500, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets second binary number");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate");
        fact.setBounds(200, 205, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Adds two binary numbers");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double result1, result2, final_res;
                BigDecimal number1, number2;
                if (true) {
                    BigDecimal n = new BigDecimal(0);

                    int num, z = 0, con;
                    double pow = 0, rese = 0, pe = 0, bit, leng;
                    BigDecimal check, temp;
                    try {
                        n = new BigDecimal(n1tb.getText());
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(jf, "Please,Enter a first binary number.");
                    }
                    BigDecimal n2 = n;
                    number1 = n;
                    n2.toBigInteger();
                    num = n2.intValue();
                    temp = n;
                    BigDecimal num1 = new BigDecimal(num);
                    check = n.subtract(num1);
                    n2 = check;

                    String text = n2.toString();
                    int integerPlaces = text.indexOf('.');
                    int decimalPlaces = text.length() - integerPlaces - 1;
                    for (int i = 0; i < decimalPlaces; i++) {
                        BigDecimal m = new BigDecimal(10);
                        check = check.multiply(m);
                    }
                    n2 = check;
                    n2.toBigInteger();
                    con = n2.intValue();

                    if (con == 0) {

                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }

                        result1 = rese;
                    } else {
                        double pow1 = -1, rese1 = 0, pe1, temp1, bit1;
                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }
                        String tem = Integer.toString(con);
                        int[] fn = new int[tem.length()];
                        for (int i = 0; i < tem.length(); i++) {
                            fn[i] = tem.charAt(i) - '0';
                        }
                        for (int i = 0; i < tem.length(); i++) {
                            bit1 = fn[i];

                            if (bit1 == 0) {
                                pow1--;
                            }
                            if (bit1 == 1) {
                                pe1 = Math.pow(2, pow1);
                                rese1 = rese1 + pe1;
                                pow1--;
                            }
                        }
                        result1 = rese + rese1;
                    }
                }
                if (true) {
                    BigDecimal n = new BigDecimal(0);

                    int num, z = 0, con;
                    double pow = 0, rese = 0, pe = 0, bit, leng;
                    BigDecimal check, temp;
                    try {
                        n = new BigDecimal(n2tb.getText());
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(jf, "Please,Enter second binary number.");
                    }
                    BigDecimal n2 = n;
                    number2 = n;
                    n2.toBigInteger();
                    num = n2.intValue();
                    temp = n;
                    BigDecimal num1 = new BigDecimal(num);
                    check = n.subtract(num1);
                    n2 = check;

                    String text = n2.toString();
                    int integerPlaces = text.indexOf('.');
                    int decimalPlaces = text.length() - integerPlaces - 1;
                    for (int i = 0; i < decimalPlaces; i++) {
                        BigDecimal m = new BigDecimal(10);
                        check = check.multiply(m);
                    }
                    n2 = check;
                    n2.toBigInteger();
                    con = n2.intValue();

                    if (con == 0) {

                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }

                        result2 = rese;
                    } else {
                        double pow1 = -1, rese1 = 0, pe1, temp1, bit1;
                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }
                        String tem = Integer.toString(con);
                        int[] fn = new int[tem.length()];
                        for (int i = 0; i < tem.length(); i++) {
                            fn[i] = tem.charAt(i) - '0';
                        }
                        for (int i = 0; i < tem.length(); i++) {
                            bit1 = fn[i];

                            if (bit1 == 0) {
                                pow1--;
                            }
                            if (bit1 == 1) {
                                pe1 = Math.pow(2, pow1);
                                rese1 = rese1 + pe1;
                                pow1--;
                            }
                        }
                        result2 = rese + rese1;
                    }
                }

                final_res = result1 + result2;
                if (true) {
                    double n = 0;
                    n = final_res;
                    int num = (int) n;
                    double check = n - num;
                    if (check == 0) {
                        int temp = num;
                        int i;
                        int rese[] = new int[1000];
                        for (i = 0; num > 0; i++) {
                            rese[i] = num % 2;
                            num = num / 2;
                        }
                        StringBuilder b = new StringBuilder();
                        for (int j = i; j >= 0; j--) {
                            b.append(rese[j]);
                        }
                        res.setText("Result: " + number1 + " + " + number2 + " = " + b);
                    } else {
                        int i, i1;
                        int temp1 = num;
                        int rese[] = new int[1000];
                        int resef[] = new int[1000];
                        for (i = 0; num > 0; i++) {
                            rese[i] = num % 2;
                            num = num / 2;
                        }
                        StringBuilder b = new StringBuilder();
                        for (int j = i; j >= 0; j--) {
                            b.append(rese[j]);
                        }

                        for (i1 = 0; i1 <= 4; i1++) {
                            double temp = check * 2;
                            int f = (int) temp;
                            temp = temp - f;
                            resef[i1] = f;
                            check = temp;
                        }
                        StringBuilder b1 = new StringBuilder();
                        for (int j = 0; j <= 4; j++) {
                            b1.append(resef[j]);
                        }
                        res.setText("Result: " + number1 + " + " + number2 + " = " + b + "." + b1);
                    }

                }

            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                res.setText("");
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\add_bin_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to add two binary numbers.\n"
                            + "\n"
                            + "Steps To Calculate:\n"
                            + "1.Enter the first binary number.\n"
                            + "2.Enter the second binary number\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will add both binary numbers and \n"
                            + "    display it.\n"
                            + "\n"
                            + "*You can clear the content of any textbox \n"
                            + "<html>   using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it,</html>\n"
                            + "<html>   also you can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset </html>\n"
                            + "   all textbox and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your first binary number: " + num1 + "\n");
                    b.append("Your second binary number: " + num2 + "\n");
                    b.append(num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            binary();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    binary();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Addition of two binary numbers");
        sh.addItem("Binary->Decimal conversion");
        sh.addItem("Decimal->Binary conversion");
        sh.addItem("Subtraction of two binary numbers");
        sh.addItem("Multiplication of two binary numbers");
        sh.addItem("Division of two binary numbers");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Decimal->Binary conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_bin();
                    }
                }
                if (op.equals("Binary->Decimal conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                bin_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        bin_dec();
                    }
                }
                if (op.equals("Subtraction of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                sub_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        sub_bin();
                    }
                }
                if (op.equals("Multiplication of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                mul_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        mul_bin();
                    }
                }

                if (op.equals("Division of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_bin();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void sub_bin() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Subtraction of two binary numbers", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter first binary number:");
        n1.setBounds(55, 70, 250, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(290, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your first binary number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((c == '1') || (c == '0') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 800, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets first binary number");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter second binary number:");
        n2.setBounds(30, 120, 260, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(290, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter your second binary number here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((c == '1') || (c == '0') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(500, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets second binary number");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate");
        fact.setBounds(200, 205, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Subtracts second binary number from first binary number");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double result1, result2, final_res;
                BigDecimal number1, number2;
                if (true) {
                    BigDecimal n = new BigDecimal(0);

                    int num, z = 0, con;
                    double pow = 0, rese = 0, pe = 0, bit, leng;
                    BigDecimal check, temp;
                    try {
                        n = new BigDecimal(n1tb.getText());
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(jf, "Please,Enter first binary number.");
                    }
                    BigDecimal n2 = n;
                    number1 = n;
                    n2.toBigInteger();
                    num = n2.intValue();
                    temp = n;
                    BigDecimal num1 = new BigDecimal(num);
                    check = n.subtract(num1);
                    n2 = check;

                    String text = n2.toString();
                    int integerPlaces = text.indexOf('.');
                    int decimalPlaces = text.length() - integerPlaces - 1;
                    for (int i = 0; i < decimalPlaces; i++) {
                        BigDecimal m = new BigDecimal(10);
                        check = check.multiply(m);
                    }
                    n2 = check;
                    n2.toBigInteger();
                    con = n2.intValue();

                    if (con == 0) {

                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }

                        result1 = rese;
                    } else {
                        double pow1 = -1, rese1 = 0, pe1, temp1, bit1;
                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }
                        String tem = Integer.toString(con);
                        int[] fn = new int[tem.length()];
                        for (int i = 0; i < tem.length(); i++) {
                            fn[i] = tem.charAt(i) - '0';
                        }
                        for (int i = 0; i < tem.length(); i++) {
                            bit1 = fn[i];

                            if (bit1 == 0) {
                                pow1--;
                            }
                            if (bit1 == 1) {
                                pe1 = Math.pow(2, pow1);
                                rese1 = rese1 + pe1;
                                pow1--;
                            }
                        }
                        result1 = rese + rese1;
                    }
                }

                if (true) {
                    BigDecimal n = new BigDecimal(0);

                    int num, z = 0, con;
                    double pow = 0, rese = 0, pe = 0, bit;
                    BigDecimal check;
                    try {
                        n = new BigDecimal(n2tb.getText());
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(jf, "Please,Enter second binary number.");
                    }
                    BigDecimal n2 = n;
                    number2 = n;
                    n2.toBigInteger();
                    num = n2.intValue();
                    BigDecimal num1 = new BigDecimal(num);
                    check = n.subtract(num1);
                    n2 = check;

                    String text = n2.toString();
                    int integerPlaces = text.indexOf('.');
                    int decimalPlaces = text.length() - integerPlaces - 1;
                    for (int i = 0; i < decimalPlaces; i++) {
                        BigDecimal m = new BigDecimal(10);
                        check = check.multiply(m);
                    }
                    n2 = check;
                    n2.toBigInteger();
                    con = n2.intValue();

                    if (con == 0) {

                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }

                        result2 = rese;
                    } else {
                        double pow1 = -1, rese1 = 0, pe1, bit1;
                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }
                        String tem = Integer.toString(con);
                        int[] fn = new int[tem.length()];
                        for (int i = 0; i < tem.length(); i++) {
                            fn[i] = tem.charAt(i) - '0';
                        }
                        for (int i = 0; i < tem.length(); i++) {
                            bit1 = fn[i];

                            if (bit1 == 0) {
                                pow1--;
                            }
                            if (bit1 == 1) {
                                pe1 = Math.pow(2, pow1);
                                rese1 = rese1 + pe1;
                                pow1--;
                            }
                        }
                        result2 = rese + rese1;
                    }
                }

                final_res = result1 - result2;
                if (final_res >= 0) {
                    if (true) {
                        double n = 0;
                        n = final_res;
                        int num = (int) n;
                        double check = n - num;
                        if (check == 0) {
                            int temp = num;
                            int i;
                            int rese[] = new int[1000];
                            for (i = 0; num > 0; i++) {
                                rese[i] = num % 2;
                                num = num / 2;
                            }
                            StringBuilder b = new StringBuilder();
                            for (int j = i; j >= 0; j--) {
                                b.append(rese[j]);
                            }
                            res.setText("Result: " + number1 + " - " + number2 + " = " + b);
                        } else {
                            int i, i1;
                            int temp1 = num;
                            int rese[] = new int[1000];
                            int resef[] = new int[1000];
                            for (i = 0; num > 0; i++) {
                                rese[i] = num % 2;
                                num = num / 2;
                            }
                            StringBuilder b = new StringBuilder();
                            for (int j = i; j >= 0; j--) {
                                b.append(rese[j]);
                            }

                            for (i1 = 0; i1 <= 4; i1++) {
                                double temp = check * 2;
                                int f = (int) temp;
                                temp = temp - f;
                                resef[i1] = f;
                                check = temp;
                            }
                            StringBuilder b1 = new StringBuilder();
                            for (int j = 0; j <= 4; j++) {
                                b1.append(resef[j]);
                            }
                            res.setText("Result: " + number1 + " - " + number2 + " = " + b + "." + b1);
                        }

                    }

                } else {
                    if (true) {
                        double n = 0;
                        n = -final_res;
                        int num = (int) n;
                        double check = n - num;
                        if (check == 0) {
                            int temp = num;
                            int i;
                            int rese[] = new int[1000];
                            for (i = 0; num > 0; i++) {
                                rese[i] = num % 2;
                                num = num / 2;
                            }
                            StringBuilder b = new StringBuilder();
                            for (int j = i; j >= 0; j--) {
                                b.append(rese[j]);
                            }
                            res.setText("Result: " + number1 + " - " + number2 + " = -" + b);
                        } else {
                            int i, i1;
                            int temp1 = num;
                            int rese[] = new int[1000];
                            int resef[] = new int[1000];
                            for (i = 0; num > 0; i++) {
                                rese[i] = num % 2;
                                num = num / 2;
                            }
                            StringBuilder b = new StringBuilder();
                            for (int j = i; j >= 0; j--) {
                                b.append(rese[j]);
                            }

                            for (i1 = 0; i1 <= 4; i1++) {
                                double temp = check * 2;
                                int f = (int) temp;
                                temp = temp - f;
                                resef[i1] = f;
                                check = temp;
                            }
                            StringBuilder b1 = new StringBuilder();
                            for (int j = 0; j <= 4; j++) {
                                b1.append(resef[j]);
                            }
                            res.setText("Result: " + number1 + " - " + number2 + " = -" + b + "." + b1);
                        }

                    }
                }

            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                res.setText("");
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\sub_bin_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to subtracts two binary numbers.\n"
                            + "\n"
                            + "Steps To Calculate:\n"
                            + "1.Enter the first binary number.\n"
                            + "2.Enter the second binary number\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will subtract second binary number from\n"
                            + "     first binary number and display it.\n"
                            + "\n"
                            + "*You can clear the content of any textbox \n"
                            + "<html>   using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it,</html>\n"
                            + "<html>   also you can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset </html>\n"
                            + "   all textbox and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your first binary number: " + num1 + "\n");
                    b.append("Your second binary number: " + num2 + "\n");
                    b.append(num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            binary();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    binary();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Subtraction of two binary numbers");
        sh.addItem("Binary->Decimal conversion");
        sh.addItem("Decimal->Binary conversion");
        sh.addItem("Addition of two binary numbers");
        sh.addItem("Multiplication of two binary numbers");
        sh.addItem("Division of two binary numbers");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Decimal->Binary conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_bin();
                    }
                }
                if (op.equals("Binary->Decimal conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                bin_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        bin_dec();
                    }
                }
                if (op.equals("Addition of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                add_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        add_bin();
                    }
                }
                if (op.equals("Multiplication of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                mul_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        mul_bin();
                    }
                }

                if (op.equals("Division of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_bin();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void mul_bin() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Multiplication of two binary numbers", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter first binary number:");
        n1.setBounds(55, 70, 250, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(290, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your first binary number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((c == '1') || (c == '0') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 800, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets first binary number");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter second binary number:");
        n2.setBounds(30, 120, 260, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(290, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter your second binary number here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((c == '1') || (c == '0') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(500, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets second binary number");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate");
        fact.setBounds(200, 205, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Multiplies both binary number");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double result1, result2, final_res;
                BigDecimal number1, number2;
                if (true) {
                    BigDecimal n = new BigDecimal(0);

                    int num, z = 0, con;
                    double pow = 0, rese = 0, pe = 0, bit, leng;
                    BigDecimal check, temp;
                    try {
                        n = new BigDecimal(n1tb.getText());
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(jf, "Please,Enter first binary number.");
                    }
                    BigDecimal n2 = n;
                    number1 = n;
                    n2.toBigInteger();
                    num = n2.intValue();
                    temp = n;
                    BigDecimal num1 = new BigDecimal(num);
                    check = n.subtract(num1);
                    n2 = check;

                    String text = n2.toString();
                    int integerPlaces = text.indexOf('.');
                    int decimalPlaces = text.length() - integerPlaces - 1;
                    for (int i = 0; i < decimalPlaces; i++) {
                        BigDecimal m = new BigDecimal(10);
                        check = check.multiply(m);
                    }
                    n2 = check;
                    n2.toBigInteger();
                    con = n2.intValue();

                    if (con == 0) {

                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }

                        result1 = rese;
                    } else {
                        double pow1 = -1, rese1 = 0, pe1, temp1, bit1;
                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }
                        String tem = Integer.toString(con);
                        int[] fn = new int[tem.length()];
                        for (int i = 0; i < tem.length(); i++) {
                            fn[i] = tem.charAt(i) - '0';
                        }
                        for (int i = 0; i < tem.length(); i++) {
                            bit1 = fn[i];

                            if (bit1 == 0) {
                                pow1--;
                            }
                            if (bit1 == 1) {
                                pe1 = Math.pow(2, pow1);
                                rese1 = rese1 + pe1;
                                pow1--;
                            }
                        }
                        result1 = rese + rese1;
                    }
                }
                if (true) {
                    BigDecimal n = new BigDecimal(0);

                    int num, z = 0, con;
                    double pow = 0, rese = 0, pe = 0, bit, leng;
                    BigDecimal check, temp;
                    try {
                        n = new BigDecimal(n2tb.getText());
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(jf, "Please,Enter second binary number.");
                    }
                    BigDecimal n2 = n;
                    number2 = n;
                    n2.toBigInteger();
                    num = n2.intValue();
                    temp = n;
                    BigDecimal num1 = new BigDecimal(num);
                    check = n.subtract(num1);
                    n2 = check;

                    String text = n2.toString();
                    int integerPlaces = text.indexOf('.');
                    int decimalPlaces = text.length() - integerPlaces - 1;
                    for (int i = 0; i < decimalPlaces; i++) {
                        BigDecimal m = new BigDecimal(10);
                        check = check.multiply(m);
                    }
                    n2 = check;
                    n2.toBigInteger();
                    con = n2.intValue();

                    if (con == 0) {

                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }

                        result2 = rese;
                    } else {
                        double pow1 = -1, rese1 = 0, pe1, temp1, bit1;
                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }
                        String tem = Integer.toString(con);
                        int[] fn = new int[tem.length()];
                        for (int i = 0; i < tem.length(); i++) {
                            fn[i] = tem.charAt(i) - '0';
                        }
                        for (int i = 0; i < tem.length(); i++) {
                            bit1 = fn[i];

                            if (bit1 == 0) {
                                pow1--;
                            }
                            if (bit1 == 1) {
                                pe1 = Math.pow(2, pow1);
                                rese1 = rese1 + pe1;
                                pow1--;
                            }
                        }
                        result2 = rese + rese1;
                    }
                }

                final_res = result1 * result2;
                if (true) {
                    double n = 0;
                    n = final_res;
                    int num = (int) n;
                    double check = n - num;
                    if (check == 0) {
                        int temp = num;
                        int i;
                        int rese[] = new int[1000];
                        for (i = 0; num > 0; i++) {
                            rese[i] = num % 2;
                            num = num / 2;
                        }
                        StringBuilder b = new StringBuilder();
                        for (int j = i; j >= 0; j--) {
                            b.append(rese[j]);
                        }
                        res.setText("Result: " + number1 + " x " + number2 + " = " + b);
                    } else {
                        int i, i1;
                        int temp1 = num;
                        int rese[] = new int[1000];
                        int resef[] = new int[1000];
                        for (i = 0; num > 0; i++) {
                            rese[i] = num % 2;
                            num = num / 2;
                        }
                        StringBuilder b = new StringBuilder();
                        for (int j = i; j >= 0; j--) {
                            b.append(rese[j]);
                        }

                        for (i1 = 0; i1 <= 4; i1++) {
                            double temp = check * 2;
                            int f = (int) temp;
                            temp = temp - f;
                            resef[i1] = f;
                            check = temp;
                        }
                        StringBuilder b1 = new StringBuilder();
                        for (int j = 0; j <= 4; j++) {
                            b1.append(resef[j]);
                        }
                        res.setText("Result: " + number1 + " x " + number2 + " = " + b + "." + b1);
                    }

                }

            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                res.setText("");
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\mul_bin_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to multiply two binary numbers.\n"
                            + "\n"
                            + "Steps To Calculate:\n"
                            + "1.Enter the first binary number.\n"
                            + "2.Enter the second binary number\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will multiply two binary numbers and \n"
                            + "    display it.\n"
                            + "\n"
                            + "*You can clear the content of any textbox \n"
                            + "<html>   using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it,</html>\n"
                            + "<html>   also you can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset </html>\n"
                            + "   all textbox and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your first binary number: " + num1 + "\n");
                    b.append("Your second binary number: " + num2 + "\n");
                    b.append(num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            binary();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    binary();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Multiplication of two binary numbers");
        sh.addItem("Binary->Decimal conversion");
        sh.addItem("Decimal->Binary conversion");
        sh.addItem("Addition of two binary numbers");
        sh.addItem("Subtraction of two binary numbers");
        sh.addItem("Division of two binary numbers");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Decimal->Binary conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_bin();
                    }
                }
                if (op.equals("Binary->Decimal conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                bin_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        bin_dec();
                    }
                }
                if (op.equals("Addition of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                add_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        add_bin();
                    }
                }
                if (op.equals("Subtraction of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                sub_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        sub_bin();
                    }
                }

                if (op.equals("Division of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_bin();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void div_bin() {

        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Divsion of two binary numbers", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter dividend binary number:");
        n1.setBounds(65, 70, 300, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(340, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your dividend binary number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((c == '1') || (c == '0') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 10000, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(550, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets dividend binary number");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter divisor binary number:");
        n2.setBounds(80, 120, 260, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(340, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter your divisor binary number here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((c == '1') || (c == '0') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(550, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets divisor binary number");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate");
        fact.setBounds(200, 205, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Divides first binary number by second binary number");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double result1, result2, final_res;
                BigDecimal number1, number2;
                if (true) {
                    BigDecimal n = new BigDecimal(0);

                    int num, z = 0, con;
                    double pow = 0, rese = 0, pe = 0, bit, leng;
                    BigDecimal check, temp;
                    try {
                        n = new BigDecimal(n1tb.getText());
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(jf, "Please,Enter dividend binary number.");
                    }
                    BigDecimal n2 = n;
                    number1 = n;
                    n2.toBigInteger();
                    num = n2.intValue();
                    temp = n;
                    BigDecimal num1 = new BigDecimal(num);
                    check = n.subtract(num1);
                    n2 = check;

                    String text = n2.toString();
                    int integerPlaces = text.indexOf('.');
                    int decimalPlaces = text.length() - integerPlaces - 1;
                    for (int i = 0; i < decimalPlaces; i++) {
                        BigDecimal m = new BigDecimal(10);
                        check = check.multiply(m);
                    }
                    n2 = check;
                    n2.toBigInteger();
                    con = n2.intValue();

                    if (con == 0) {

                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }

                        result1 = rese;
                    } else {
                        double pow1 = -1, rese1 = 0, pe1, temp1, bit1;
                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }
                        String tem = Integer.toString(con);
                        int[] fn = new int[tem.length()];
                        for (int i = 0; i < tem.length(); i++) {
                            fn[i] = tem.charAt(i) - '0';
                        }
                        for (int i = 0; i < tem.length(); i++) {
                            bit1 = fn[i];

                            if (bit1 == 0) {
                                pow1--;
                            }
                            if (bit1 == 1) {
                                pe1 = Math.pow(2, pow1);
                                rese1 = rese1 + pe1;
                                pow1--;
                            }
                        }
                        result1 = rese + rese1;
                    }
                }
                if (true) {
                    BigDecimal n = new BigDecimal(0);

                    int num, z = 0, con;
                    double pow = 0, rese = 0, pe = 0, bit, leng;
                    BigDecimal check, temp;
                    try {
                        n = new BigDecimal(n2tb.getText());
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(jf, "Please,Enter divisor binary number.");
                    }
                    BigDecimal n2 = n;
                    number2 = n;
                    n2.toBigInteger();
                    num = n2.intValue();
                    temp = n;
                    BigDecimal num1 = new BigDecimal(num);
                    check = n.subtract(num1);
                    n2 = check;

                    String text = n2.toString();
                    int integerPlaces = text.indexOf('.');
                    int decimalPlaces = text.length() - integerPlaces - 1;
                    for (int i = 0; i < decimalPlaces; i++) {
                        BigDecimal m = new BigDecimal(10);
                        check = check.multiply(m);
                    }
                    n2 = check;
                    n2.toBigInteger();
                    con = n2.intValue();

                    if (con == 0) {

                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }

                        result2 = rese;
                    } else {
                        double pow1 = -1, rese1 = 0, pe1, temp1, bit1;
                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                pe = Math.pow(2, pow);
                                rese = rese + pe;
                                pow++;
                            }
                        }
                        String tem = Integer.toString(con);
                        int[] fn = new int[tem.length()];
                        for (int i = 0; i < tem.length(); i++) {
                            fn[i] = tem.charAt(i) - '0';
                        }
                        for (int i = 0; i < tem.length(); i++) {
                            bit1 = fn[i];

                            if (bit1 == 0) {
                                pow1--;
                            }
                            if (bit1 == 1) {
                                pe1 = Math.pow(2, pow1);
                                rese1 = rese1 + pe1;
                                pow1--;
                            }
                        }
                        result2 = rese + rese1;
                    }
                }

                final_res = result1 / result2;
                if (result2 > 0) {
                    if (true) {
                        double n = 0;
                        n = final_res;
                        int num = (int) n;
                        double check = n - num;
                        if (check == 0) {
                            int temp = num;
                            int i;
                            int rese[] = new int[1000];
                            for (i = 0; num > 0; i++) {
                                rese[i] = num % 2;
                                num = num / 2;
                            }
                            StringBuilder b = new StringBuilder();
                            for (int j = i; j >= 0; j--) {
                                b.append(rese[j]);
                            }
                            res.setText("Result: " + number1 + " / " + number2 + " = " + b);
                        } else {
                            int i, i1;
                            int temp1 = num;
                            int rese[] = new int[1000];
                            int resef[] = new int[1000];
                            for (i = 0; num > 0; i++) {
                                rese[i] = num % 2;
                                num = num / 2;
                            }
                            StringBuilder b = new StringBuilder();
                            for (int j = i; j >= 0; j--) {
                                b.append(rese[j]);
                            }

                            for (i1 = 0; i1 <= 4; i1++) {
                                double temp = check * 2;
                                int f = (int) temp;
                                temp = temp - f;
                                resef[i1] = f;
                                check = temp;
                            }
                            StringBuilder b1 = new StringBuilder();
                            for (int j = 0; j <= 4; j++) {
                                b1.append(resef[j]);
                            }
                            res.setText("Result: " + number1 + " / " + number2 + " = " + b + "." + b1);
                        }

                    }

                } else {
                    n2tb.setText("");
                    JOptionPane.showMessageDialog(jf, "Please, Enter divisor binary number \ngreater than zero(binary number>0).");
                }
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                res.setText("");
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\div_bin_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to divide two binary numbers.\n"
                            + "\n"
                            + "Steps To Calculate:\n"
                            + "1.Enter the dividend binary number.\n"
                            + "2.Enter the divisor binary number\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will divide dividend binary number by \n"
                            + "    divisor binary number and display it.\n"
                            + "\n"
                            + "*You can clear the content of any textbox \n"
                            + "<html>   using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it,</html>\n"
                            + "<html>   also you can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset </html>\n"
                            + "   all textbox and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your dividend binary number: " + num1 + "\n");
                    b.append("Your divisor binary number: " + num2 + "\n");
                    b.append(num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            binary();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    binary();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = res.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Division of two binary numbers");
        sh.addItem("Binary->Decimal conversion");
        sh.addItem("Decimal->Binary conversion");
        sh.addItem("Addition of two binary numbers");
        sh.addItem("Subtraction of two binary numbers");
        sh.addItem("Multiplication of two binary numbers");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Decimal->Binary conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_bin();
                    }
                }
                if (op.equals("Binary->Decimal conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                bin_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        bin_dec();
                    }
                }
                if (op.equals("Addition of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                add_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        add_bin();
                    }
                }
                if (op.equals("Subtraction of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                sub_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        sub_bin();
                    }
                }

                if (op.equals("Multiplication of two binary numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                mul_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        mul_bin();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void hexadecimal() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        jp.repaint();
        JLabel ml = new JLabel("Decimal-Hexadecimal", SwingConstants.CENTER);
        ml.setBounds(115, 20, 500, 50);
        ml.setBorder(BorderFactory.createLineBorder(Color.black, 3));
        ml.setFont(new Font("Garamond", Font.BOLD, 35));
        jp.add(ml, new Integer(-6));

        jp.repaint();
        MyColoredButton mt = new MyColoredButton("Decimal->Hexadecimal conversion");
        mt.setBounds(20, 100, 340, 40);
        mt.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(mt);
        mt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                dec_hex();
            }
        });

        jp.repaint();
        MyColoredButton fn = new MyColoredButton("Hexadecimal->Decimal conversion");
        fn.setBounds(380, 100, 340, 40);
        fn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(fn);
        fn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                hex_dec();
            }
        });

        jp.repaint();
        MyColoredButton pn = new MyColoredButton("Addition of two hexadecimal numbers");
        pn.setBounds(20, 170, 340, 40);
        pn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(pn);
        pn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                add_hex();
            }
        });

        jp.repaint();
        MyColoredButton eo = new MyColoredButton("Subtraction of two hexadecimal numbers");
        eo.setBounds(380, 170, 340, 40);
        eo.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(eo);
        eo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                sub_hex();
            }
        });

        jp.repaint();
        MyColoredButton pn1 = new MyColoredButton("Multiplication of two hexadecimal numbers");
        pn1.setBounds(20, 240, 340, 40);
        pn1.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(pn1);
        pn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                mul_hex();
            }
        });

        jp.repaint();
        MyColoredButton eo1 = new MyColoredButton("Division of two hexadecimal numbers");
        eo1.setBounds(380, 240, 340, 40);
        eo1.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(eo1);
        eo1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                div_hex();
            }
        });

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(140, 380, 200, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                mainmenu();
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(400, 380, 200, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        jp.repaint();
        
        jp.repaint();

    }

    public void hex_dec() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Hexadecimal->Decimal conversion", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter a hexadecimal number:");
        n1.setBounds(40, 70, 350, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(310, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your hexadecimal number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == 'A') || (c == 'B') || (c == 'C') || (c == 'D') || (c == 'E') || (c == 'F'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel resu = new JLabel();
        resu.setBounds(70, 230, 1000, 100);;
        resu.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(resu);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(530, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets everything");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                resu.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Convert-To-Decimal");
        fact.setBounds(200, 158, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Converts hexadecimal number to decimal number");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num = n1tb.getText();
                if (!num.equals("")) {
                    char bit1;
                    double po = 0, pe, temp, res = 0;

                    char[] arr = new char[num.length()];
                    for (int i = 0; i < num.length(); i++) {
                        arr[i] = num.charAt(i);
                    }
                    for (int i = num.length() - 1; i >= 0; i--) {
                        bit1 = arr[i];

                        if (bit1 == '1') {
                            pe = Math.pow(16, po);
                            temp = 1 * pe;
                            res = res + temp;
                        }
                        if (bit1 == '2') {
                            pe = Math.pow(16, po);
                            temp = 2 * pe;
                            res = res + temp;
                        }
                        if (bit1 == '3') {
                            pe = Math.pow(16, po);
                            temp = 3 * pe;
                            res = res + temp;
                        }
                        if (bit1 == '4') {
                            pe = Math.pow(16, po);
                            temp = 4 * pe;
                            res = res + temp;
                        }
                        if (bit1 == '5') {
                            pe = Math.pow(16, po);
                            temp = 5 * pe;
                            res = res + temp;
                        }
                        if (bit1 == '6') {
                            pe = Math.pow(16, po);
                            temp = 6 * pe;
                            res = res + temp;
                        }
                        if (bit1 == '7') {
                            pe = Math.pow(16, po);
                            temp = 7 * pe;
                            res = res + temp;
                        }
                        if (bit1 == '8') {
                            pe = Math.pow(16, po);
                            temp = 8 * pe;
                            res = res + temp;
                        }
                        if (bit1 == '9') {
                            pe = Math.pow(16, po);
                            temp = 9 * pe;
                            res = res + temp;
                        }
                        if (bit1 == 'A') {
                            pe = Math.pow(16, po);
                            temp = 10 * pe;
                            res = res + temp;
                        }
                        if (bit1 == 'B') {
                            pe = Math.pow(16, po);
                            temp = 11 * pe;
                            res = res + temp;
                        }
                        if (bit1 == 'C') {
                            pe = Math.pow(16, po);
                            temp = 12 * pe;
                            res = res + temp;
                        }
                        if (bit1 == 'D') {
                            pe = Math.pow(16, po);
                            temp = 13 * pe;
                            res = res + temp;
                        }
                        if (bit1 == 'E') {
                            pe = Math.pow(16, po);
                            temp = 14 * pe;
                            res = res + temp;
                        }
                        if (bit1 == 'F') {
                            pe = Math.pow(16, po);
                            temp = 15 * pe;
                            res = res + temp;
                        }
                        po++;
                    }
                    resu.setText("Result: Decimal number of " + num + " = " + Math.round(res));
                } else {
                    JOptionPane.showMessageDialog(jf, "Please,Enter a number");
                }
            }
        });
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\hex_dec_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to convert hexadecimal number\n"
                            + "to a decimal number.\n"
                            + "\n"
                            + "Steps To Convert:\n"
                            + "1.Enter the hexadecimal number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Convert-To-Decimal <b color='black'>|</b></font> .</html>\n"
                            + "    And then it  will convert your hexadecimal number\n"
                            + "    to a decimal number and display it.\n"
                            + "\n"
                            + "*You can clear the content of textbox with its result\n"
                            + "<html>   using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> .</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num3 = resu.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your hexadecimal number: " + num1 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = resu.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            hexadecimal();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    hexadecimal();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = resu.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Hexadecimal->Decimal conversion");
        sh.addItem("Decimal->Hexadecimal conversion");
        sh.addItem("Addition of two hexadecimal numbers");
        sh.addItem("Subtraction of two hexadecimal numbers");
        sh.addItem("Multiplication of two hexadecimal numbers");
        sh.addItem("Division of two hexadecimal numbers");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Decimal->Hexadecimal conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = resu.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_hex();
                    }
                }
                if (op.equals("Addition of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = resu.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                add_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        add_hex();
                    }
                }
                if (op.equals("Subtraction of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = resu.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                sub_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        sub_hex();
                    }
                }
                if (op.equals("Multiplication of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = resu.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                mul_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        mul_hex();
                    }
                }

                if (op.equals("Division of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = resu.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_hex();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();
    }

    public void dec_hex() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Decimal->Hexadecimal conversion", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter a number:");
        n1.setBounds(60, 70, 250, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(210, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter a number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(70, 230, 1000, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setToolTipText("Resets everything");
        rtn1.setBounds(500, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                res.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Convert-To-Hexadecimal");
        fact.setBounds(200, 158, 230, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Converts decimal number to hexadecimal number");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                double n = 0;
                try {
                    n = Double.parseDouble(n1tb.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(jf, "Please,Enter a number.");
                }
                if (n > 0) {
                    int i;
                    int nu = (int) n;
                    int extra = 0;
                    String re[] = new String[1000];
                    for (i = 0; nu > 0; i++) {
                        extra = 0;
                        extra = nu % 16;
                        if (extra == 10 || extra == 11 || extra == 12 || extra == 13 || extra == 14 || extra == 15) {
                            if (extra == 10) {
                                re[i] = "A";
                            }
                            if (extra == 11) {
                                re[i] = "B";
                            }
                            if (extra == 12) {
                                re[i] = "C";
                            }
                            if (extra == 13) {
                                re[i] = "D";
                            }
                            if (extra == 14) {
                                re[i] = "E";
                            }
                            if (extra == 15) {
                                re[i] = "F";
                            }

                        } else {
                            re[i] = Integer.toString(extra);
                        }
                        nu = nu / 16;
                    }
                    StringBuilder b = new StringBuilder();
                    for (int j = i - 1; j >= 0; j--) {
                        b.append(re[j]);
                    }

                    res.setText("Result: Hexadecimal number of " + (Math.round(n)) + " is " + b);
                } else {
                    JOptionPane.showMessageDialog(jf, "Please,Enter a number greater than zero");
                    n1tb.setText("");
                }
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\dec_hex_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to convert decimal number\n"
                            + "to a hexadecimal number.\n"
                            + "\n"
                            + "Steps To Convert:\n"
                            + "1.Enter the decimal number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Convert-To-Hexadecimal <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will convert your decimal number\n"
                            + "    to a hexadecimal number and display it.\n"
                            + "\n"
                            + "*You can clear the content of textbox with its result\n"
                            + "<html>   using <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> .</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your decimal number: " + num1 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            hexadecimal();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    hexadecimal();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Decimal->Hexadecimal conversion");
        sh.addItem("Hexadecimal->Decimal conversion");
        sh.addItem("Addition of two hexadecimal numbers");
        sh.addItem("Subtraction of two hexadecimal numbers");
        sh.addItem("Multiplication of two hexadecimal numbers");
        sh.addItem("Division of two hexadecimal numbers");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Hexadecimal->Decimal conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                hex_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        hex_dec();
                    }
                }
                if (op.equals("Addition of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                add_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        add_hex();
                    }
                }
                if (op.equals("Subtraction of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                sub_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        sub_hex();
                    }
                }
                if (op.equals("Multiplication of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                mul_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        mul_hex();
                    }
                }

                if (op.equals("Division of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    if (!(s1.equals("")) || !(s2.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_hex();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();
    }

    public void add_hex() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Addition of two hexadecimal numbers", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter first hexadecimal number:");
        n1.setBounds(55, 70, 550, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(350, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your first hexadecimal number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == 'A') || (c == 'B') || (c == 'C') || (c == 'D') || (c == 'E') || (c == 'F'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 800, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(570, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets first hexadecimal number");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter second hexadecimal number:");
        n2.setBounds(30, 120, 560, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(350, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter your second hexadecimal number here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == 'A') || (c == 'B') || (c == 'C') || (c == 'D') || (c == 'E') || (c == 'F'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(570, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets second hexadecimal number");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate");
        fact.setBounds(200, 205, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Adds two hexadecimal number");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                double number1, number2, final_res, t1 = 1, t2 = 1;
                String numb1 = n1tb.getText(),
                        numb2 = n2tb.getText();
                try {
                    t1 = Double.parseDouble(numb1);
                    t2 = Double.parseDouble(numb2);
                } catch (Exception aeree) {
                }
                if (numb1.equals("") || numb2.equals("") || t1 == 0 || t2 == 0) {
                    JOptionPane.showMessageDialog(jf, "Please Enter both number greater then zero");
                } else {
                    if (true) {
                        char bit1;
                        double po = 0, pe, temp, result = 0;
                        String num = n1tb.getText();
                        char[] arr = new char[num.length()];
                        for (int i = 0; i < num.length(); i++) {
                            arr[i] = num.charAt(i);
                        }
                        for (int i = num.length() - 1; i >= 0; i--) {
                            bit1 = arr[i];

                            if (bit1 == '1') {
                                pe = Math.pow(16, po);
                                temp = 1 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '2') {
                                pe = Math.pow(16, po);
                                temp = 2 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '3') {
                                pe = Math.pow(16, po);
                                temp = 3 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '4') {
                                pe = Math.pow(16, po);
                                temp = 4 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '5') {
                                pe = Math.pow(16, po);
                                temp = 5 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '6') {
                                pe = Math.pow(16, po);
                                temp = 6 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '7') {
                                pe = Math.pow(16, po);
                                temp = 7 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '8') {
                                pe = Math.pow(16, po);
                                temp = 8 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '9') {
                                pe = Math.pow(16, po);
                                temp = 9 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'A') {
                                pe = Math.pow(16, po);
                                temp = 10 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'B') {
                                pe = Math.pow(16, po);
                                temp = 11 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'C') {
                                pe = Math.pow(16, po);
                                temp = 12 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'D') {
                                pe = Math.pow(16, po);
                                temp = 13 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'E') {
                                pe = Math.pow(16, po);
                                temp = 14 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'F') {
                                pe = Math.pow(16, po);
                                temp = 15 * pe;
                                result = result + temp;
                            }
                            po++;
                        }
                        number1 = result;
                    }

                    if (true) {
                        char bit1;
                        double po = 0, pe, temp, result = 0;
                        String num = n2tb.getText();
                        char[] arr = new char[num.length()];
                        for (int i = 0; i < num.length(); i++) {
                            arr[i] = num.charAt(i);
                        }
                        for (int i = num.length() - 1; i >= 0; i--) {
                            bit1 = arr[i];

                            if (bit1 == '1') {
                                pe = Math.pow(16, po);
                                temp = 1 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '2') {
                                pe = Math.pow(16, po);
                                temp = 2 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '3') {
                                pe = Math.pow(16, po);
                                temp = 3 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '4') {
                                pe = Math.pow(16, po);
                                temp = 4 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '5') {
                                pe = Math.pow(16, po);
                                temp = 5 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '6') {
                                pe = Math.pow(16, po);
                                temp = 6 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '7') {
                                pe = Math.pow(16, po);
                                temp = 7 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '8') {
                                pe = Math.pow(16, po);
                                temp = 8 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '9') {
                                pe = Math.pow(16, po);
                                temp = 9 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'A') {
                                pe = Math.pow(16, po);
                                temp = 10 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'B') {
                                pe = Math.pow(16, po);
                                temp = 11 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'C') {
                                pe = Math.pow(16, po);
                                temp = 12 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'D') {
                                pe = Math.pow(16, po);
                                temp = 13 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'E') {
                                pe = Math.pow(16, po);
                                temp = 14 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'F') {
                                pe = Math.pow(16, po);
                                temp = 15 * pe;
                                result = result + temp;
                            }
                            po++;
                        }
                        number2 = result;
                    }
                    final_res = number1 + number2;
                    int i;
                    int nu = (int) final_res;
                    int extra = 0;
                    String re[] = new String[1000];
                    for (i = 0; nu > 0; i++) {
                        extra = 0;
                        extra = nu % 16;
                        if (extra == 10 || extra == 11 || extra == 12 || extra == 13 || extra == 14 || extra == 15) {
                            if (extra == 10) {
                                re[i] = "A";
                            }
                            if (extra == 11) {
                                re[i] = "B";
                            }
                            if (extra == 12) {
                                re[i] = "C";
                            }
                            if (extra == 13) {
                                re[i] = "D";
                            }
                            if (extra == 14) {
                                re[i] = "E";
                            }
                            if (extra == 15) {
                                re[i] = "F";
                            }

                        } else {
                            re[i] = Integer.toString(extra);
                        }
                        nu = nu / 16;
                    }
                    StringBuilder b = new StringBuilder();
                    for (int j = i - 1; j >= 0; j--) {
                        b.append(re[j]);
                    }
                    res.setText("Result: " + numb1 + " + " + numb2 + " = " + b);
                }
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                res.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\add_hex_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to add two hexadecimal numbers.\n"
                            + "\n"
                            + "Steps To Calculate:\n"
                            + "1.Enter the first hexadecimal number.\n"
                            + "2.Enter the second hexadecimal number\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will add both hexadecimal numbers and \n"
                            + "    display it.\n"
                            + "\n"
                            + "*You can clear the content of any textbox using \n"
                            + "<html>  <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it, also you can </html>\n"
                            + "<html>   use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset all textbox and </html>\n"
                            + "   result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your first hexadecimal number: " + num1 + "\n");
                    b.append("Your second hexadecimal number: " + num2 + "\n");
                    b.append(num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                String s3 = n2tb.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            hexadecimal();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    hexadecimal();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                String s3 = n2tb.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Addition of two hexadecimal numbers");
        sh.addItem("Decimal->Hexadecimal conversion");
        sh.addItem("Hexadecimal->Decimal conversion");
        sh.addItem("Subtraction of two hexadecimal numbers");
        sh.addItem("Multiplication of two hexadecimal numbers");
        sh.addItem("Division of two hexadecimal numbers");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Hexadecimal->Decimal conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                hex_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        hex_dec();
                    }
                }
                if (op.equals("Decimal->Hexadecimal conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_hex();
                    }
                }
                if (op.equals("Subtraction of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                sub_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {

                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        sub_hex();
                    }
                }
                if (op.equals("Multiplication of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                mul_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        mul_hex();
                    }
                }

                if (op.equals("Division of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_hex();
                    }
                }
            }
        });

        jp.repaint();
        
        jp.repaint();

    }

    public void sub_hex() {

        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Subtraction of hexadecimal numbers", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter first hexadecimal number:");
        n1.setBounds(55, 70, 550, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(350, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your first hexadecimal number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == 'A') || (c == 'B') || (c == 'C') || (c == 'D') || (c == 'E') || (c == 'F'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 800, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(570, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets first hexadecimal number");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter second hexadecimal number:");
        n2.setBounds(30, 120, 560, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(350, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter your second hexadecimal number here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == 'A') || (c == 'B') || (c == 'C') || (c == 'D') || (c == 'E') || (c == 'F'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(570, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets second hexadecimal number");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate");
        fact.setBounds(200, 205, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Subtract second hexadecimal number from first hexadecimal number");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double number1, number2, final_res, t1 = 1, t2 = 1;
                String numb1 = n1tb.getText(),
                        numb2 = n2tb.getText();
                try {
                    t1 = Double.parseDouble(numb1);
                    t2 = Double.parseDouble(numb2);
                } catch (Exception aeree) {
                }
                if (numb1.equals("") || numb2.equals("") || t1 == 0 || t2 == 0) {
                    JOptionPane.showMessageDialog(jf, "Please Enter both number greater then zero");
                } else {
                    if (true) {
                        char bit1;
                        double po = 0, pe, temp, result = 0;
                        String num = n1tb.getText();
                        char[] arr = new char[num.length()];
                        for (int i = 0; i < num.length(); i++) {
                            arr[i] = num.charAt(i);
                        }
                        for (int i = num.length() - 1; i >= 0; i--) {
                            bit1 = arr[i];

                            if (bit1 == '1') {
                                pe = Math.pow(16, po);
                                temp = 1 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '2') {
                                pe = Math.pow(16, po);
                                temp = 2 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '3') {
                                pe = Math.pow(16, po);
                                temp = 3 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '4') {
                                pe = Math.pow(16, po);
                                temp = 4 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '5') {
                                pe = Math.pow(16, po);
                                temp = 5 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '6') {
                                pe = Math.pow(16, po);
                                temp = 6 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '7') {
                                pe = Math.pow(16, po);
                                temp = 7 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '8') {
                                pe = Math.pow(16, po);
                                temp = 8 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '9') {
                                pe = Math.pow(16, po);
                                temp = 9 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'A') {
                                pe = Math.pow(16, po);
                                temp = 10 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'B') {
                                pe = Math.pow(16, po);
                                temp = 11 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'C') {
                                pe = Math.pow(16, po);
                                temp = 12 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'D') {
                                pe = Math.pow(16, po);
                                temp = 13 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'E') {
                                pe = Math.pow(16, po);
                                temp = 14 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'F') {
                                pe = Math.pow(16, po);
                                temp = 15 * pe;
                                result = result + temp;
                            }
                            po++;
                        }
                        number1 = result;
                    }

                    if (true) {
                        char bit1;
                        double po = 0, pe, temp, result = 0;
                        String num = n2tb.getText();
                        char[] arr = new char[num.length()];
                        for (int i = 0; i < num.length(); i++) {
                            arr[i] = num.charAt(i);
                        }
                        for (int i = num.length() - 1; i >= 0; i--) {
                            bit1 = arr[i];

                            if (bit1 == '1') {
                                pe = Math.pow(16, po);
                                temp = 1 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '2') {
                                pe = Math.pow(16, po);
                                temp = 2 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '3') {
                                pe = Math.pow(16, po);
                                temp = 3 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '4') {
                                pe = Math.pow(16, po);
                                temp = 4 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '5') {
                                pe = Math.pow(16, po);
                                temp = 5 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '6') {
                                pe = Math.pow(16, po);
                                temp = 6 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '7') {
                                pe = Math.pow(16, po);
                                temp = 7 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '8') {
                                pe = Math.pow(16, po);
                                temp = 8 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '9') {
                                pe = Math.pow(16, po);
                                temp = 9 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'A') {
                                pe = Math.pow(16, po);
                                temp = 10 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'B') {
                                pe = Math.pow(16, po);
                                temp = 11 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'C') {
                                pe = Math.pow(16, po);
                                temp = 12 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'D') {
                                pe = Math.pow(16, po);
                                temp = 13 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'E') {
                                pe = Math.pow(16, po);
                                temp = 14 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'F') {
                                pe = Math.pow(16, po);
                                temp = 15 * pe;
                                result = result + temp;
                            }
                            po++;
                        }
                        number2 = result;
                    }
                    final_res = number1 - number2;
                    if (final_res > 0) {
                        int i;
                        int nu = (int) final_res;
                        int extra = 0;
                        String re[] = new String[1000];
                        for (i = 0; nu > 0; i++) {
                            extra = 0;
                            extra = nu % 16;
                            if (extra == 10 || extra == 11 || extra == 12 || extra == 13 || extra == 14 || extra == 15) {
                                if (extra == 10) {
                                    re[i] = "A";
                                }
                                if (extra == 11) {
                                    re[i] = "B";
                                }
                                if (extra == 12) {
                                    re[i] = "C";
                                }
                                if (extra == 13) {
                                    re[i] = "D";
                                }
                                if (extra == 14) {
                                    re[i] = "E";
                                }
                                if (extra == 15) {
                                    re[i] = "F";
                                }

                            } else {
                                re[i] = Integer.toString(extra);
                            }
                            nu = nu / 16;
                        }
                        StringBuilder b = new StringBuilder();
                        for (int j = i - 1; j >= 0; j--) {
                            b.append(re[j]);
                        }
                        res.setText("Result: " + numb1 + " - " + numb2 + " = " + b);

                    } else if (final_res == 0) {
                        res.setText("Result: " + numb1 + " - " + numb2 + " = 0");
                    } else {
                        final_res = -final_res;
                        int i;
                        int nu = (int) final_res;
                        int extra = 0;
                        String re[] = new String[1000];
                        for (i = 0; nu > 0; i++) {
                            extra = 0;
                            extra = nu % 16;
                            if (extra == 10 || extra == 11 || extra == 12 || extra == 13 || extra == 14 || extra == 15) {
                                if (extra == 10) {
                                    re[i] = "A";
                                }
                                if (extra == 11) {
                                    re[i] = "B";
                                }
                                if (extra == 12) {
                                    re[i] = "C";
                                }
                                if (extra == 13) {
                                    re[i] = "D";
                                }
                                if (extra == 14) {
                                    re[i] = "E";
                                }
                                if (extra == 15) {
                                    re[i] = "F";
                                }

                            } else {
                                re[i] = Integer.toString(extra);
                            }
                            nu = nu / 16;
                        }
                        StringBuilder b = new StringBuilder();
                        for (int j = i - 1; j >= 0; j--) {
                            b.append(re[j]);
                        }
                        res.setText("Result: " + numb1 + " - " + numb2 + " = -" + b);

                    }
                }

            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                res.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\sub_hex_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to subtracts two hexadecimal numbers\n"
                            + "\n"
                            + "Steps To Calculate:\n"
                            + "1.Enter the first hexadecimal number.\n"
                            + "2.Enter the second hexadecimal number\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will subtract second hexadecimal number from\n"
                            + "     first hexadecimal number and display it.\n"
                            + "\n"
                            + "*You can clear the content of any textbox using \n"
                            + "<html>  <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it, also you can </html>\n"
                            + "<html>   use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset all textbox and </html>\n"
                            + "   result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your first hexadecimal number: " + num1 + "\n");
                    b.append("Your second hexadecimal number: " + num2 + "\n");
                    b.append(num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                String s3 = n2tb.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            hexadecimal();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    hexadecimal();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                String s3 = n2tb.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Subtraction of two hexadecimal numbers");
        sh.addItem("Decimal->Hexadecimal conversion");
        sh.addItem("Hexadecimal->Decimal conversion");
        sh.addItem("Addition of two hexadecimal numbers");
        sh.addItem("Multiplication of two hexadecimal numbers");
        sh.addItem("Division of two hexadecimal numbers");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Hexadecimal->Decimal conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                hex_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        hex_dec();
                    }
                }
                if (op.equals("Decimal->Hexadecimal conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_hex();
                    }
                }
                if (op.equals("Addition of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                add_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {

                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        add_hex();
                    }
                }
                if (op.equals("Multiplication of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                mul_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        mul_hex();
                    }
                }

                if (op.equals("Division of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_hex();
                    }
                }
            }
        });

        jp.repaint();
        
        jp.repaint();

    }

    public void mul_hex() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Multiplication of hexadecimal numbers", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter first hexadecimal number:");
        n1.setBounds(55, 70, 550, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(350, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your first hexadecimal number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == 'A') || (c == 'B') || (c == 'C') || (c == 'D') || (c == 'E') || (c == 'F'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 800, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(570, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets first hexadecimal number");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter second hexadecimal number:");
        n2.setBounds(30, 120, 560, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(350, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter your second hexadecimal number here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == 'A') || (c == 'B') || (c == 'C') || (c == 'D') || (c == 'E') || (c == 'F'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(570, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets second hexadecimal number");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate");
        fact.setBounds(200, 205, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Multiplies two hexadecimal numbers");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double number1, number2, final_res, t1 = 1, t2 = 1;
                String numb1 = n1tb.getText(),
                        numb2 = n2tb.getText();
                try {
                    t1 = Double.parseDouble(numb1);
                    t2 = Double.parseDouble(numb2);
                } catch (Exception aeree) {
                }
                if (numb1.equals("") || numb2.equals("") || t1 == 0 || t2 == 0) {
                    JOptionPane.showMessageDialog(jf, "Please Enter both number greater then zero");
                } else {
                    if (true) {
                        char bit1;
                        double po = 0, pe, temp, result = 0;
                        String num = n1tb.getText();
                        char[] arr = new char[num.length()];
                        for (int i = 0; i < num.length(); i++) {
                            arr[i] = num.charAt(i);
                        }
                        for (int i = num.length() - 1; i >= 0; i--) {
                            bit1 = arr[i];

                            if (bit1 == '1') {
                                pe = Math.pow(16, po);
                                temp = 1 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '2') {
                                pe = Math.pow(16, po);
                                temp = 2 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '3') {
                                pe = Math.pow(16, po);
                                temp = 3 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '4') {
                                pe = Math.pow(16, po);
                                temp = 4 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '5') {
                                pe = Math.pow(16, po);
                                temp = 5 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '6') {
                                pe = Math.pow(16, po);
                                temp = 6 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '7') {
                                pe = Math.pow(16, po);
                                temp = 7 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '8') {
                                pe = Math.pow(16, po);
                                temp = 8 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '9') {
                                pe = Math.pow(16, po);
                                temp = 9 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'A') {
                                pe = Math.pow(16, po);
                                temp = 10 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'B') {
                                pe = Math.pow(16, po);
                                temp = 11 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'C') {
                                pe = Math.pow(16, po);
                                temp = 12 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'D') {
                                pe = Math.pow(16, po);
                                temp = 13 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'E') {
                                pe = Math.pow(16, po);
                                temp = 14 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'F') {
                                pe = Math.pow(16, po);
                                temp = 15 * pe;
                                result = result + temp;
                            }
                            po++;
                        }
                        number1 = result;
                    }

                    if (true) {
                        char bit1;
                        double po = 0, pe, temp, result = 0;
                        String num = n2tb.getText();
                        char[] arr = new char[num.length()];
                        for (int i = 0; i < num.length(); i++) {
                            arr[i] = num.charAt(i);
                        }
                        for (int i = num.length() - 1; i >= 0; i--) {
                            bit1 = arr[i];

                            if (bit1 == '1') {
                                pe = Math.pow(16, po);
                                temp = 1 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '2') {
                                pe = Math.pow(16, po);
                                temp = 2 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '3') {
                                pe = Math.pow(16, po);
                                temp = 3 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '4') {
                                pe = Math.pow(16, po);
                                temp = 4 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '5') {
                                pe = Math.pow(16, po);
                                temp = 5 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '6') {
                                pe = Math.pow(16, po);
                                temp = 6 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '7') {
                                pe = Math.pow(16, po);
                                temp = 7 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '8') {
                                pe = Math.pow(16, po);
                                temp = 8 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '9') {
                                pe = Math.pow(16, po);
                                temp = 9 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'A') {
                                pe = Math.pow(16, po);
                                temp = 10 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'B') {
                                pe = Math.pow(16, po);
                                temp = 11 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'C') {
                                pe = Math.pow(16, po);
                                temp = 12 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'D') {
                                pe = Math.pow(16, po);
                                temp = 13 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'E') {
                                pe = Math.pow(16, po);
                                temp = 14 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'F') {
                                pe = Math.pow(16, po);
                                temp = 15 * pe;
                                result = result + temp;
                            }
                            po++;
                        }
                        number2 = result;
                    }
                    final_res = number1 * number2;
                    int i;
                    int nu = (int) final_res;
                    int extra = 0;
                    String re[] = new String[1000];
                    for (i = 0; nu > 0; i++) {
                        extra = 0;
                        extra = nu % 16;
                        if (extra == 10 || extra == 11 || extra == 12 || extra == 13 || extra == 14 || extra == 15) {
                            if (extra == 10) {
                                re[i] = "A";
                            }
                            if (extra == 11) {
                                re[i] = "B";
                            }
                            if (extra == 12) {
                                re[i] = "C";
                            }
                            if (extra == 13) {
                                re[i] = "D";
                            }
                            if (extra == 14) {
                                re[i] = "E";
                            }
                            if (extra == 15) {
                                re[i] = "F";
                            }

                        } else {
                            re[i] = Integer.toString(extra);
                        }
                        nu = nu / 16;
                    }
                    StringBuilder b = new StringBuilder();
                    for (int j = i - 1; j >= 0; j--) {
                        b.append(re[j]);
                    }
                    res.setText("Result: " + numb1 + " x " + numb2 + " = " + b);

                }
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                res.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\mul_hex_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to multiply two hexadecimal numbers.\n"
                            + "\n"
                            + "Steps To Calculate:\n"
                            + "1.Enter the first hexadecimal number.\n"
                            + "2.Enter the second hexadecimal number\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will multiply two hexadecimal numbers and \n"
                            + "    display it.\n"
                            + "\n"
                            + "*You can clear the content of any textbox using \n"
                            + "<html>  <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it, also you can </html>\n"
                            + "<html>   use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset all textbox and </html>\n"
                            + "   result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your first hexadecimal number: " + num1 + "\n");
                    b.append("Your second hexadecimal number: " + num2 + "\n");
                    b.append(num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                String s3 = n2tb.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            hexadecimal();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    hexadecimal();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                String s3 = n2tb.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Multiplication of two hexadecimal numbers");
        sh.addItem("Decimal->Hexadecimal conversion");
        sh.addItem("Hexadecimal->Decimal conversion");
        sh.addItem("Addition of two hexadecimal numbers");
        sh.addItem("Subtraction of two hexadecimal numbers");
        sh.addItem("Division of two hexadecimal numbers");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Hexadecimal->Decimal conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                hex_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        hex_dec();
                    }
                }
                if (op.equals("Decimal->Hexadecimal conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_hex();
                    }
                }
                if (op.equals("Addition of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                add_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {

                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        add_hex();
                    }
                }
                if (op.equals("Subtraction of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                sub_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        sub_hex();
                    }
                }

                if (op.equals("Division of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_hex();
                    }
                }
            }
        });

        jp.repaint();
        
        jp.repaint();

    }

    public void div_hex() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Division of two hexadecimal numbers", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter first hexadecimal number:");
        n1.setBounds(55, 70, 550, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(350, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your first hexadecimal number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == 'A') || (c == 'B') || (c == 'C') || (c == 'D') || (c == 'E') || (c == 'F'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel();
        res.setBounds(100, 230, 800, 100);;
        res.setFont(new Font("Century Gothic", Font.BOLD, 21));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(570, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets first hexadecimal number");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Enter second hexadecimal number:");
        n2.setBounds(30, 120, 560, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(350, 158, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter your second hexadecimal number here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == 'A') || (c == 'B') || (c == 'C') || (c == 'D') || (c == 'E') || (c == 'F'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(570, 158, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets second hexadecimal number");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Calculate");
        fact.setBounds(200, 205, 180, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Divides first hexadecimal number by second hexadecimal number");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                double number1, number2, final_res, t1 = 1, t2 = 1;
                String numb1 = n1tb.getText(),
                        numb2 = n2tb.getText();
                try {
                    t1 = Double.parseDouble(numb1);
                    t2 = Double.parseDouble(numb2);
                } catch (Exception aeree) {
                }
                if (numb1.equals("") || numb2.equals("") || t1 == 0 || t2 == 0) {
                    JOptionPane.showMessageDialog(jf, "Please Enter both number greater then zero");
                } else {
                    if (true) {
                        char bit1;
                        double po = 0, pe, temp, result = 0;
                        String num = n1tb.getText();
                        char[] arr = new char[num.length()];
                        for (int i = 0; i < num.length(); i++) {
                            arr[i] = num.charAt(i);
                        }
                        for (int i = num.length() - 1; i >= 0; i--) {
                            bit1 = arr[i];

                            if (bit1 == '1') {
                                pe = Math.pow(16, po);
                                temp = 1 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '2') {
                                pe = Math.pow(16, po);
                                temp = 2 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '3') {
                                pe = Math.pow(16, po);
                                temp = 3 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '4') {
                                pe = Math.pow(16, po);
                                temp = 4 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '5') {
                                pe = Math.pow(16, po);
                                temp = 5 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '6') {
                                pe = Math.pow(16, po);
                                temp = 6 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '7') {
                                pe = Math.pow(16, po);
                                temp = 7 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '8') {
                                pe = Math.pow(16, po);
                                temp = 8 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '9') {
                                pe = Math.pow(16, po);
                                temp = 9 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'A') {
                                pe = Math.pow(16, po);
                                temp = 10 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'B') {
                                pe = Math.pow(16, po);
                                temp = 11 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'C') {
                                pe = Math.pow(16, po);
                                temp = 12 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'D') {
                                pe = Math.pow(16, po);
                                temp = 13 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'E') {
                                pe = Math.pow(16, po);
                                temp = 14 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'F') {
                                pe = Math.pow(16, po);
                                temp = 15 * pe;
                                result = result + temp;
                            }
                            po++;
                        }
                        number1 = result;
                    }

                    if (true) {
                        char bit1;
                        double po = 0, pe, temp, result = 0;
                        String num = n2tb.getText();
                        char[] arr = new char[num.length()];
                        for (int i = 0; i < num.length(); i++) {
                            arr[i] = num.charAt(i);
                        }
                        for (int i = num.length() - 1; i >= 0; i--) {
                            bit1 = arr[i];

                            if (bit1 == '1') {
                                pe = Math.pow(16, po);
                                temp = 1 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '2') {
                                pe = Math.pow(16, po);
                                temp = 2 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '3') {
                                pe = Math.pow(16, po);
                                temp = 3 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '4') {
                                pe = Math.pow(16, po);
                                temp = 4 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '5') {
                                pe = Math.pow(16, po);
                                temp = 5 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '6') {
                                pe = Math.pow(16, po);
                                temp = 6 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '7') {
                                pe = Math.pow(16, po);
                                temp = 7 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '8') {
                                pe = Math.pow(16, po);
                                temp = 8 * pe;
                                result = result + temp;
                            }
                            if (bit1 == '9') {
                                pe = Math.pow(16, po);
                                temp = 9 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'A') {
                                pe = Math.pow(16, po);
                                temp = 10 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'B') {
                                pe = Math.pow(16, po);
                                temp = 11 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'C') {
                                pe = Math.pow(16, po);
                                temp = 12 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'D') {
                                pe = Math.pow(16, po);
                                temp = 13 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'E') {
                                pe = Math.pow(16, po);
                                temp = 14 * pe;
                                result = result + temp;
                            }
                            if (bit1 == 'F') {
                                pe = Math.pow(16, po);
                                temp = 15 * pe;
                                result = result + temp;
                            }
                            po++;
                        }
                        number2 = result;
                    }
                    final_res = number1 / number2;
                    int i;
                    int nu = (int) final_res;
                    int extra = 0;
                    String re[] = new String[1000];
                    for (i = 0; nu > 0; i++) {
                        extra = 0;
                        extra = nu % 16;
                        if (extra == 10 || extra == 11 || extra == 12 || extra == 13 || extra == 14 || extra == 15) {
                            if (extra == 10) {
                                re[i] = "A";
                            }
                            if (extra == 11) {
                                re[i] = "B";
                            }
                            if (extra == 12) {
                                re[i] = "C";
                            }
                            if (extra == 13) {
                                re[i] = "D";
                            }
                            if (extra == 14) {
                                re[i] = "E";
                            }
                            if (extra == 15) {
                                re[i] = "F";
                            }

                        } else {
                            re[i] = Integer.toString(extra);
                        }
                        nu = nu / 16;
                    }
                    StringBuilder b = new StringBuilder();
                    for (int j = i - 1; j >= 0; j--) {
                        b.append(re[j]);
                    }
                    res.setText("Result: " + numb1 + " / " + numb2 + " = " + b);

                }
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                res.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\div_hex_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to divide two hexadecimal numbers.\n"
                            + "\n"
                            + "Steps To Calculate:\n"
                            + "1.Enter the first hexadecimal number.\n"
                            + "2.Enter the second hexadecimal number\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Calculate <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will divide first hexadecimal number by \n"
                            + "    second hexadecimal number and display it.\n"
                            + "\n"
                            + "*You can clear the content of any textbox using \n"
                            + "<html>  <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it, also you can </html>\n"
                            + "<html>   use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset all textbox and </html>\n"
                            + "   result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = res.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your first hexadecimal number: " + num1 + "\n");
                    b.append("Your second hexadecimal number: " + num2 + "\n");
                    b.append(num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                String s3 = n2tb.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            hexadecimal();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    hexadecimal();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = res.getText();
                String s3 = n2tb.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Division of two hexadecimal numbers");
        sh.addItem("Decimal->Hexadecimal conversion");
        sh.addItem("Hexadecimal->Decimal conversion");
        sh.addItem("Addition of two hexadecimal numbers");
        sh.addItem("Subtraction of two hexadecimal numbers");
        sh.addItem("Multiplication of two hexadecimal numbers");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Hexadecimal->Decimal conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                hex_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        hex_dec();
                    }
                }
                if (op.equals("Decimal->Hexadecimal conversion")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_hex();
                    }
                }
                if (op.equals("Addition of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                add_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {

                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        add_hex();
                    }
                }
                if (op.equals("Subtraction of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                sub_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        sub_hex();
                    }
                }

                if (op.equals("Multiplication of two hexadecimal numbers")) {
                    String s1 = n1tb.getText();
                    String s2 = res.getText();
                    String s3 = n2tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                mul_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        mul_hex();
                    }
                }
            }
        });

        jp.repaint();
        
        jp.repaint();
    }

    public void Find_In_Range() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        jp.repaint();
        JLabel ml = new JLabel("Find In Range", SwingConstants.CENTER);
        ml.setBounds(115, 20, 500, 50);
        ml.setBorder(BorderFactory.createLineBorder(Color.black, 3));
        ml.setFont(new Font("Garamond", Font.BOLD, 35));
        jp.add(ml, new Integer(-6));

        jp.repaint();
        MyColoredButton mt = new MyColoredButton("Range of divisors of a number");
        mt.setBounds(20, 100, 340, 40);
        mt.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(mt);
        mt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                divisors_r();
            }
        });

        jp.repaint();
        MyColoredButton fn = new MyColoredButton("Prime Numbers in given range");
        fn.setBounds(380, 100, 340, 40);
        fn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(fn);
        fn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                prime_r();
            }
        });

        jp.repaint();
        MyColoredButton pn = new MyColoredButton("Even Numbers in given range");
        pn.setBounds(20, 170, 340, 40);
        pn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(pn);
        pn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                even_r();
            }
        });

        jp.repaint();
        MyColoredButton eo = new MyColoredButton("Odd Numbers in given range");
        eo.setBounds(380, 170, 340, 40);
        eo.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(eo);
        eo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                odd_r();
            }
        });

        jp.repaint();
        MyColoredButton pn1 = new MyColoredButton("Perfect square numbers in given range");
        pn1.setBounds(20, 240, 340, 40);
        pn1.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(pn1);
        pn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                perfect_sq_r();
            }
        });

        jp.repaint();
        MyColoredButton eo1 = new MyColoredButton("Perfect cube numbers in given range");
        eo1.setBounds(380, 240, 340, 40);
        eo1.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(eo1);
        eo1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                perfect_cb_r();
            }
        });

        jp.repaint();
        MyColoredButton bs = new MyColoredButton("Largest & Smallest in given range");
        bs.setBounds(20, 310, 340, 40);
        bs.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(bs);
        bs.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                dec_ls_r();
            }
        });

        jp.repaint();
        MyColoredButton pdr = new MyColoredButton("Perfect dividends in given range");
        pdr.setBounds(380, 310, 340, 40);
        pdr.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(pdr);
        pdr.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                div_by_num_r();
            }
        });

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(140, 380, 200, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                mainmenu();
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(400, 380, 200, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                if (choice == JOptionPane.YES_OPTION) {
                    System.exit(0);
                }
            }
        });

        jp.repaint();
        
        jp.repaint();

    }

    public void prime_r() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Prime Numbers in given range", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(60, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your lower limit here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();

        JLabel res = new JLabel("→");
        res.setBounds(270, 105, 200, 30);
        res.setFont(new Font("Arial Black", Font.BOLD, 30));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(160, 150, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets lower limit");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Lower Limit                                          Upper Limit");
        n2.setBounds(70, 115, 560, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 16));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(310, 108, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter your upper limit here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(410, 150, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets upper limit");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        JTextArea jta = new JTextArea(100, 5);
        jta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane sp = new JScrollPane(jta);
        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        sp.setBounds(100, 215, 560, 100);
        jp.add(sp);

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Get Prime Numbers");
        fact.setBounds(550, 108, 175, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Displays all prime numbers in given range");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jta.setText("");
                double t1 = 1, t2 = 1;
                String ts1 = n1tb.getText(), ts2 = n2tb.getText();
                try {
                    t1 = Double.parseDouble(n1tb.getText());
                    t2 = Double.parseDouble(n2tb.getText());
                } catch (Exception zxzxe) {
                }

                if (ts1.equals("") || ts2.equals("")) {

                    JOptionPane.showMessageDialog(jf, "Please ,Enter both the limits.");
                } else if (t2 <= t1) {
                    JOptionPane.showMessageDialog(jf, "Upper Limit should be greater than Lower Limit");
                } else {
                    double f, l, flag = 0;
                    f = Double.parseDouble(n1tb.getText());
                    l = Double.parseDouble(n2tb.getText());
                    for (double j = f; j <= l; j++) {
                        flag = 0;
                        for (double i = 2; i < j; i++) {

                            if (j % i == 0) {
                                flag = 1;
                                break;
                            }

                        }
                        if (j != 0 && j != 1) {
                            if (flag == 0) {
                                jta.append(" ");
                                jta.append(String.valueOf(Math.round(j)));
                                jta.append(" ,");
                            }
                        }
                    }
                    String text = jta.getText();
                    jta.setText(text.substring(0, text.length() - 2));
                    jta.append(" .");

                }

            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                jta.setText("");
            }
        });

        jp.repaint();

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\prime_range_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to print all prime numbers \n"
                            + "in your given range.\n"
                            + "\n"
                            + "Steps To Get Prime Numbers:\n"
                            + "1.Enter the lower limit of range.\n"
                            + "2.Enter the upper limit of range.\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Get Prime Numbers <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will print all prime numbers \n"
                            + "    in your given range. \n"
                            + "\n"
                            + "*You can clear the content of any textbox using \n"
                            + "<html>  <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it, also you can </html>\n"
                            + "<html>   use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset all textbox and result.</html> ",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = jta.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your lower limit: " + num1 + "\n");
                    b.append("Your upper limit: " + num2 + "\n");
                    b.append("All prime numbers from " + num1 + " to " + num2 + " :" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            Find_In_Range();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    Find_In_Range();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Prime Numbers in given range");
        sh.addItem("Range of divisors of a number");
        sh.addItem("Even Numbers in given range");
        sh.addItem("Odd Numbers in given range");
        sh.addItem("Perfect square numbers in given range");
        sh.addItem("Perfect cube numbers in given range");
        sh.addItem("Largest & Smallest Number in range");
        sh.addItem("Perfect dividends in given range");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Range of divisors of a number")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                divisors_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        divisors_r();
                    }
                }
                if (op.equals("Even Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                even_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        even_r();
                    }
                }
                if (op.equals("Odd Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                odd_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        odd_r();
                    }
                }
                if (op.equals("Perfect square numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_sq_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_sq_r();
                    }
                }

                if (op.equals("Perfect cube numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_cb_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_cb_r();
                    }
                }
                if (op.equals("Largest & Smallest Number in range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_ls_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_ls_r();
                    }
                }
                if (op.equals("Perfect dividends in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_by_num_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_by_num_r();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void even_r() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Even Numbers in given range", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(60, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your lower limit here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel("→");
        res.setBounds(270, 105, 200, 30);
        res.setFont(new Font("Arial Black", Font.BOLD, 30));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(160, 150, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets lower limit");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Lower Limit                                          Upper Limit");
        n2.setBounds(70, 115, 560, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 16));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(310, 108, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter your upper limit here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(410, 150, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets upper limit");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        JTextArea jta = new JTextArea(100, 5);
        jta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane sp = new JScrollPane(jta);
        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        sp.setBounds(100, 215, 560, 100);
        jp.add(sp);

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Get Even Numbers");
        fact.setBounds(550, 108, 175, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Prints all even numbers in given range");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jta.setText("");
                double t1 = 1, t2 = 1;
                String ts1 = n1tb.getText(), ts2 = n2tb.getText();
                try {
                    t1 = Double.parseDouble(n1tb.getText());
                    t2 = Double.parseDouble(n2tb.getText());
                } catch (Exception zxzxe) {
                }

                if (ts1.equals("") || ts2.equals("")) {

                    JOptionPane.showMessageDialog(jf, "Please ,Enter both the limits.");
                } else if (t2 <= t1) {
                    JOptionPane.showMessageDialog(jf, "Upper Limit should be greater than Lower Limit");
                } else {
                    double f, l;
                    f = Double.parseDouble(n1tb.getText());
                    l = Double.parseDouble(n2tb.getText());
                    for (double j = f; j <= l; j++) {
                        if (j % 2 == 0) {
                            if (j != 0) {
                                jta.append(" ");
                                jta.append(String.valueOf(Math.round(j)));
                                jta.append(" ,");
                            }
                        }

                    }
                    String text = jta.getText();
                    jta.setText(text.substring(0, text.length() - 2));
                    jta.append(" .");

                }

            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                jta.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\even_range_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to print all even numbers \n"
                            + "in your given range.\n"
                            + "\n"
                            + "Steps To Get Even Numbers:\n"
                            + "1.Enter the lower limit of range.\n"
                            + "2.Enter the upper limit of range.\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Get Even Numbers <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will print all even numbers \n"
                            + "    in your given range. \n"
                            + "\n"
                            + "*You can clear the content of any textbox using \n"
                            + "<html>  <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it, also you can </html>\n"
                            + "<html>   use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset all textbox and result.</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = jta.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your lower limit: " + num1 + "\n");
                    b.append("Your upper limit: " + num2 + "\n");
                    b.append("All even numbers from " + num1 + " to " + num2 + " :" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            Find_In_Range();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    Find_In_Range();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Even Numbers in given range");
        sh.addItem("Range of divisors of a number");
        sh.addItem("Prime Numbers in given range");
        sh.addItem("Odd Numbers in given range");
        sh.addItem("Perfect square numbers in given range");
        sh.addItem("Perfect cube numbers in given range");
        sh.addItem("Largest & Smallest Number in range");
        sh.addItem("Perfect dividends in given range");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Range of divisors of a number")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                divisors_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        divisors_r();
                    }
                }
                if (op.equals("Prime Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                prime_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        prime_r();
                    }
                }
                if (op.equals("Odd Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                odd_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        odd_r();
                    }
                }
                if (op.equals("Perfect square numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_sq_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_sq_r();
                    }
                }

                if (op.equals("Perfect cube numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_cb_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_cb_r();
                    }
                }
                if (op.equals("Largest & Smallest Number in range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_ls_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_ls_r();
                    }
                }
                if (op.equals("Perfect dividends in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_by_num_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_by_num_r();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void odd_r() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);;
        jp.repaint();

        JLabel scl = new JLabel("Odd Numbers in given range", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(60, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your lower limit here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel("→");
        res.setBounds(270, 105, 200, 30);
        res.setFont(new Font("Arial Black", Font.BOLD, 30));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(160, 150, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets lower limit");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Lower Limit                                          Upper Limit");
        n2.setBounds(70, 115, 560, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 16));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(310, 108, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter your upper limit here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(410, 150, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets upper limit");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        JTextArea jta = new JTextArea(100, 5);
        jta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane sp = new JScrollPane(jta);
        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        sp.setBounds(100, 215, 560, 100);
        jp.add(sp);

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Get Odd Numbers");
        fact.setBounds(550, 108, 175, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Prints all odd numbers in given range");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jta.setText("");
                double t1 = 1, t2 = 1;
                String ts1 = n1tb.getText(), ts2 = n2tb.getText();
                try {
                    t1 = Double.parseDouble(n1tb.getText());
                    t2 = Double.parseDouble(n2tb.getText());
                } catch (Exception zxzxe) {
                }

                if (ts1.equals("") || ts2.equals("")) {

                    JOptionPane.showMessageDialog(jf, "Please ,Enter both the limits.");
                } else if (t2 <= t1) {
                    JOptionPane.showMessageDialog(jf, "Upper Limit should be greater than Lower Limit");
                } else {
                    double f, l;
                    f = Double.parseDouble(n1tb.getText());
                    l = Double.parseDouble(n2tb.getText());
                    for (double j = f; j <= l; j++) {
                        if (j % 2 != 0) {
                            jta.append(" ");
                            jta.append(String.valueOf(Math.round(j)));
                            jta.append(" ,");

                        }

                    }
                    String text = jta.getText();
                    jta.setText(text.substring(0, text.length() - 2));
                    jta.append(" .");

                }

            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                jta.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\odd_range_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to print all odd numbers \n"
                            + "in your given range.\n"
                            + "\n"
                            + "Steps To Get Odd Numbers:\n"
                            + "1.Enter the lower limit of range.\n"
                            + "2.Enter the upper limit of range.\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Get Odd Numbers <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will print all odd numbers \n"
                            + "    in your given range. \n"
                            + "\n"
                            + "*You can clear the content of any textbox using \n"
                            + "<html>  <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it, also you can </html>\n"
                            + "<html>   use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset all textbox and result.</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = jta.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your lower limit: " + num1 + "\n");
                    b.append("Your upper limit: " + num2 + "\n");
                    b.append("All odd numbers from " + num1 + " to " + num2 + " :" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            Find_In_Range();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    Find_In_Range();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Odd Numbers in given range");
        sh.addItem("Range of divisors of a number");
        sh.addItem("Prime Numbers in given range");
        sh.addItem("Even Numbers in given range");
        sh.addItem("Perfect square numbers in given range");
        sh.addItem("Perfect cube numbers in given range");
        sh.addItem("Largest & Smallest Number in range");
        sh.addItem("Perfect dividends in given range");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Range of divisors of a number")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                divisors_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        divisors_r();
                    }
                }
                if (op.equals("Prime Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                prime_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        prime_r();
                    }
                }
                if (op.equals("Even Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                even_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        even_r();
                    }
                }
                if (op.equals("Perfect square numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_sq_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_sq_r();
                    }
                }

                if (op.equals("Perfect cube numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_cb_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_cb_r();
                    }
                }
                if (op.equals("Largest & Smallest Number in range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_ls_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_ls_r();
                    }
                }
                if (op.equals("Perfect dividends in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_by_num_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_by_num_r();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void perfect_sq_r() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);;
        jp.repaint();

        JLabel scl = new JLabel("Perfect square numbers in given range", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(60, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your lower limit here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel("→");
        res.setBounds(270, 105, 200, 30);
        res.setFont(new Font("Arial Black", Font.BOLD, 30));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(160, 150, 100, 30);
        rtn1.setToolTipText("Resets lower limit");
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Lower Limit                                          Upper Limit");
        n2.setBounds(70, 115, 560, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 16));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(310, 108, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter your upper limit here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(410, 150, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets upper limit");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        JTextArea jta = new JTextArea(100, 5);
        jta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane sp = new JScrollPane(jta);
        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        sp.setBounds(100, 215, 560, 100);
        jp.add(sp);

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Get Perfect Squares");
        fact.setBounds(550, 108, 185, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Print all perfect square numbers in a given range");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jta.setText("");
                double t1 = 1, t2 = 1;
                String ts1 = n1tb.getText(), ts2 = n2tb.getText();
                try {
                    t1 = Double.parseDouble(n1tb.getText());
                    t2 = Double.parseDouble(n2tb.getText());
                } catch (Exception zxzxe) {
                }

                if (ts1.equals("") || ts2.equals("")) {

                    JOptionPane.showMessageDialog(jf, "Please ,Enter both the limits.");
                } else if (t2 <= t1) {
                    JOptionPane.showMessageDialog(jf, "Upper Limit should be greater than Lower Limit");
                } else {
                    double f, l, flag = 0;
                    f = Double.parseDouble(n1tb.getText());
                    l = Double.parseDouble(n2tb.getText());
                    for (double j = f; j <= l; j++) {
                        flag = 0;
                        for (double i = 1; i <= j; i++) {
                            if (j / i == i) {
                                flag = 1;
                                break;
                            }
                        }
                        if (flag == 1) {
                            jta.append(" ");
                            jta.append(String.valueOf(Math.round(j)));
                            jta.append(" ,");
                        }
                    }

                }
                String text = jta.getText();
                jta.setText(text.substring(0, text.length() - 2));
                jta.append(" .");

            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                jta.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\pr_sq_range_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to print all perfect square numbers \n"
                            + "in your given range.\n"
                            + "\n"
                            + "Steps To Get Perfect Square Numbers:\n"
                            + "1.Enter the lower limit of range.\n"
                            + "2.Enter the upper limit of range.\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Get Perfect Squares <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will print all perfect square numbers \n"
                            + "    in your given range. \n"
                            + "\n"
                            + "*You can clear the content of any textbox using \n"
                            + "<html>  <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it, also you can </html>\n"
                            + "<html>   use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset all textbox and result.</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = jta.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your lower limit: " + num1 + "\n");
                    b.append("Your upper limit: " + num2 + "\n");
                    b.append("All perfect square numbers from " + num1 + " to " + num2 + " :" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            Find_In_Range();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    Find_In_Range();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Perfect square numbers in given range");
        sh.addItem("Range of divisors of a number");
        sh.addItem("Prime Numbers in given range");
        sh.addItem("Even Numbers in given range");
        sh.addItem("Odd Numbers in given range");
        sh.addItem("Perfect cube numbers in given range");
        sh.addItem("Largest & Smallest Number in range");
        sh.addItem("Perfect dividends in given range");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Range of divisors of a number")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                divisors_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        divisors_r();
                    }
                }
                if (op.equals("Prime Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                prime_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        prime_r();
                    }
                }
                if (op.equals("Even Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                even_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        even_r();
                    }
                }
                if (op.equals("Odd Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                odd_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        odd_r();
                    }
                }

                if (op.equals("Perfect cube numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_cb_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_cb_r();
                    }
                }
                if (op.equals("Largest & Smallest Number in range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_ls_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_ls_r();
                    }
                }
                if (op.equals("Perfect dividends in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_by_num_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_by_num_r();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void perfect_cb_r() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);;
        jp.repaint();

        JLabel scl = new JLabel("Perfect cube numbers in given range", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(60, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your lower limit here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        JLabel res = new JLabel("→");
        res.setBounds(270, 105, 200, 30);
        res.setFont(new Font("Arial Black", Font.BOLD, 30));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(160, 150, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets lower limit");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Lower Limit                                          Upper Limit");
        n2.setBounds(70, 115, 560, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 16));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(310, 108, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter your upper limit here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(410, 150, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets upper limit");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        JTextArea jta = new JTextArea(100, 5);
        jta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane sp = new JScrollPane(jta);
        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        sp.setBounds(100, 215, 560, 100);
        jp.add(sp);

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Get Perfect Cubes");
        fact.setBounds(550, 108, 175, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Print all perfect cubes in given range");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jta.setText("");
                double t1 = 1, t2 = 1;
                String ts1 = n1tb.getText(), ts2 = n2tb.getText();
                try {
                    t1 = Double.parseDouble(n1tb.getText());
                    t2 = Double.parseDouble(n2tb.getText());
                } catch (Exception zxzxe) {
                }

                if (ts1.equals("") || ts2.equals("")) {

                    JOptionPane.showMessageDialog(jf, "Please ,Enter both the limits.");
                } else if (t2 <= t1) {
                    JOptionPane.showMessageDialog(jf, "Upper Limit should be greater than Lower Limit");
                } else {
                    double f, l, flag = 0;
                    f = Double.parseDouble(n1tb.getText());
                    l = Double.parseDouble(n2tb.getText());
                    for (double j = f; j <= l; j++) {
                        flag = 0;
                        for (double i = 1; i <= j; i++) {
                            if (j / i / i == i) {
                                flag = 1;
                                break;
                            }
                        }
                        if (flag == 1) {
                            jta.append(" ");
                            jta.append(String.valueOf(Math.round(j)));
                            jta.append(" ,");
                        }
                    }

                }
                String text = jta.getText();
                jta.setText(text.substring(0, text.length() - 2));
                jta.append(" .");

            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                jta.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\pr_cb_range_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to print all perfect cube numbers \n"
                            + "in your given range.\n"
                            + "\n"
                            + "Steps To Get Perfect Cube Numbers:\n"
                            + "1.Enter the lower limit of range.\n"
                            + "2.Enter the upper limit of range.\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Get Perfect Cubes <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will print all perfect cube numbers \n"
                            + "    in your given range. \n"
                            + "\n"
                            + "*You can clear the content of any textbox using \n"
                            + "<html>  <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it, also you can </html>\n"
                            + "<html>   use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset all textbox and result.</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String num3 = jta.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your lower limit: " + num1 + "\n");
                    b.append("Your upper limit: " + num2 + "\n");
                    b.append("All perfect cube numbers from " + num1 + " to " + num2 + " :" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            Find_In_Range();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    Find_In_Range();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Perfect cube numbers in given range");
        sh.addItem("Range of divisors of a number");
        sh.addItem("Prime Numbers in given range");
        sh.addItem("Even Numbers in given range");
        sh.addItem("Odd Numbers in given range");
        sh.addItem("Perfect square numbers in given range");
        sh.addItem("Largest & Smallest Number in range");
        sh.addItem("Perfect dividends in given range");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Range of divisors of a number")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                divisors_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        divisors_r();
                    }
                }
                if (op.equals("Prime Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                prime_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        prime_r();
                    }
                }
                if (op.equals("Even Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                even_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        even_r();
                    }
                }
                if (op.equals("Odd Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                odd_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        odd_r();
                    }
                }

                if (op.equals("Perfect square numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_sq_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_sq_r();
                    }
                }
                if (op.equals("Largest & Smallest Number in range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_ls_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_ls_r();
                    }
                }
                if (op.equals("Perfect dividends in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_by_num_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_by_num_r();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void divisors_r() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Range of divisors of a number", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter A Number:");
        n1.setBounds(40, 70, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        JTextArea jta = new JTextArea(100, 5);
        jta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane sp = new JScrollPane(jta);
        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        sp.setBounds(100, 215, 560, 100);
        jp.add(sp);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(425, 108, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets your number");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                jta.setText("");
            }
        });

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Get Perfect Divisors");
        fact.setBounds(550, 108, 185, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Prints all perfect divisors of your number");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jta.setText("");
                double t1 = 1;
                String ts1 = n1tb.getText();
                try {
                    t1 = Double.parseDouble(n1tb.getText());
                } catch (Exception zxzxe) {
                }

                if (ts1.equals("")) {

                    JOptionPane.showMessageDialog(jf, "Please ,Enter the number.");
                } else if (t1 == 0) {
                    JOptionPane.showMessageDialog(jf, "Please Enter number greater then zero");
                } else {

                    double f;
                    f = Double.parseDouble(n1tb.getText());
                    jta.append("Perfect Divisors of " + Math.round(f) + " are: \n");
                    for (double i = 1; i <= f; i++) {
                        if (f % i == 0) {
                            jta.append(" ");
                            jta.append(String.valueOf(Math.round(i)));
                            jta.append(" ,");
                        }
                    }
                    String text = jta.getText();
                    jta.setText(text.substring(0, text.length() - 2));
                    jta.append(" .");

                }
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                jta.setText("");
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\divs_range_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to print all perfect divisors \n"
                            + "of your given number.\n"
                            + "\n"
                            + "Steps To Get Divisors:\n"
                            + "1.Enter the number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Get Perfect Divisors <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will print all perfect divisors \n"
                            + "    of your given number.\n"
                            + "\n"
                            + "For Example: Number is 18 then it will print all\n"
                            + "numbers(perfect divisors) of 18 i.e 18 is divisible by\n"
                            + "1 , 2 , 3 , 6 , 9 , 18 .\n"
                            + "\n"
                            + "*You can clear the content of any textbox using \n"
                            + "<html>  <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it, also you can </html>\n"
                            + "<html>   use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset all textbox and result.</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num3 = jta.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your Number: " + num1 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            Find_In_Range();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    Find_In_Range();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Range of divisors of a number");
        sh.addItem("Prime Numbers in given range");
        sh.addItem("Even Numbers in given range");
        sh.addItem("Odd Numbers in given range");
        sh.addItem("Perfect square numbers in given range");
        sh.addItem("Perfect cube numbers in given range");
        sh.addItem("Largest & Smallest Number in range");
        sh.addItem("Perfect dividends in given range");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Perfect cube numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_cb_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_cb_r();
                    }
                }
                if (op.equals("Prime Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                prime_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        prime_r();
                    }
                }
                if (op.equals("Even Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                even_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        even_r();
                    }
                }
                if (op.equals("Odd Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                odd_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        odd_r();
                    }
                }

                if (op.equals("Perfect square numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_sq_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_sq_r();
                    }
                }
                if (op.equals("Largest & Smallest Number in range")) {
                    String s1 = n1tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_ls_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_ls_r();
                    }
                }
                if (op.equals("Perfect dividends in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = jta.getText();
                    if (!(s1.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_by_num_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_by_num_r();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void dec_ls_r() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);;
        jp.repaint();

        JLabel scl = new JLabel("Largest & Smallest Number In Range", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel syn = new JLabel("Select number system:");
        syn.setBounds(40, 90, 200, 30);
        syn.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(syn);

        jp.repaint();
        JLabel n1 = new JLabel("Enter Numbers:");
        n1.setBounds(40, 100, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 138, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your decimal number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();

        JLabel ourorder = new JLabel("Your numbers:");
        ourorder.setBounds(16, 163, 181, 100);
        ourorder.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(ourorder);

        jp.repaint();
        JTextArea ta = new JTextArea(100, 5);
        ta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane spp = new JScrollPane(ta);
        spp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        spp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        spp.setBounds(150, 190, 560, 50);
        ta.setEnabled(false);
        jp.add(spp);
        jp.repaint();

        double arr[] = new double[10000];

        jp.repaint();
        MyColoredButton addnums = new MyColoredButton("Add");
        addnums.setBounds(425, 138, 80, 30);
        addnums.setFont(new Font("Arial", Font.BOLD, 15));
        addnums.setToolTipText("Adds a number into your order of decimal numbers");
        jp.add(addnums);
        addnums.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                int c = co1;
                String sss;
                sss = n1tb.getText();
                if (sss.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Please, Enter a number.");
                } else {
                    arr[c] = Double.parseDouble(sss);
                    ta.append(" ");
                    ta.append(String.valueOf(arr[c]) + " ,");
                    c++;
                    co1 = c;
                    n1tb.setText("");
                }
            }
        });

        jp.repaint();
        MyColoredButton del = new MyColoredButton("Delete");
        del.setBounds(520, 138, 90, 30);
        del.setFont(new Font("Arial", Font.BOLD, 15));
        del.setToolTipText("Deletes a number from your order of decimal numbers");
        jp.add(del);
        del.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String check = ta.getText();
                if (check.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Nothing to delete in your number order.");
                } else {
                    String lens;
                    int c1 = co1;
                    c1--;
                    co1 = c1;
                    lens = String.valueOf(arr[c1]);
                    len_s1 = lens.length();
                    String text = ta.getText();
                    ta.setText(text.substring(0, text.length() - (len_s1 + 3)));
                }
            }
        });

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(630, 138, 90, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets your order of decimal numbers");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
            }
        });

        jp.repaint();
        MyColoredButton fix = new MyColoredButton("Confirm");
        fix.setBounds(125, 330, 100, 30);
        fix.setFont(new Font("Arial", Font.BOLD, 15));
        fix.setToolTipText("Finalize your order of decimal numbers.");
        jp.add(fix);
        fix.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String text = ta.getText();
                if (text.length() != 0) {
                    ta.setText(text.substring(0, text.length() - 1));
                    ta.append(".");
                    addnums.setEnabled(false);
                    del.setEnabled(false);
                    press_con = 1;
                }
            }
        });

        jp.repaint();
        JLabel resultt = new JLabel();
        resultt.setBounds(140, 236, 900, 100);
        resultt.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(resultt);

        jp.repaint();
        MyColoredButton arrange = new MyColoredButton("Largest And Smallest Number");
        arrange.setBounds(255, 330, 250, 30);
        arrange.setFont(new Font("Arial", Font.BOLD, 15));
        arrange.setToolTipText("Prints largest and smallest decimal number from your order of decimal numbers");
        jp.add(arrange);
        arrange.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                if (press_con == 1) {
                    double biggest = 0;
                    fix.setEnabled(false);
                    rtn1.setEnabled(false);
                    for (int i = 0; i < co1; i++) {
                        if (biggest < arr[i]) {
                            biggest = arr[i];
                        }
                    }
                    double smallest = biggest;
                    for (int i = 0; i < co1; i++) {
                        if (smallest > arr[i]) {
                            smallest = arr[i];
                        }
                    }
                    resultt.setText("Largest Number: " + biggest + " And Smallest Number: " + smallest);

                }
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
                fix.setEnabled(true);
                rtn1.setEnabled(true);
                arrange.setEnabled(true);
                resultt.setText("");
            }
        });

        jp.repaint();
        MyColoredButton decimalop = new MyColoredButton("Decimal");
        decimalop.setBounds(250, 93, 100, 30);
        decimalop.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(decimalop);
        decimalop.setEnabled(false);

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\dec_ls_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to get largest and smallest decimal number\n"
                            + "from your given order of decimal numbers.\n"
                            + "\n"
                            + "Steps To Get Largest And Smallest Decimal Number :\n"
                            + "1.Enter your decimal number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Add <b color='black'>|</b></font> to add the decimal number in your order.</html>\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Delete <b color='black'>|</b></font> to remove last decimal number from your order.</html>\n"
                            + "<html>4.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> to finalize your order.</html>\n"
                            + "<html>5.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Largest And Smallest Number <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will print largest and smallest decimal number from \n"
                            + "    your order.\n"
                            + "\n"
                            + "<html>*Once you have clicked on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> you cannot add or </html>\n"
                            + "  delete decimal numbers from your order. After which if you wish to \n"
                            + "  change the order then you need to re-enter your order decimal numbers \n"
                            + "<html>  for which you need to click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> which will reset</html>\n"
                            + "  your order of decimal numbers.\n"
                            + "\n"
                            + "<html>*You can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset your order of decimal numbers</html>\n"
                            + "  and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = ta.getText();
                String num3 = resultt.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your order of decimal numbers: " + num1 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButton binop = new MyColoredButton("Binary");
        binop.setBounds(360, 93, 100, 30);
        binop.setFont(new Font("Arial", Font.BOLD, 15));
        binop.setToolTipText("Sets current number system as binary number system");
        jp.add(binop);
        binop.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = resultt.getText();

                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == JOptionPane.YES_OPTION) {
                            clip.stop();
                            try {
                                AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\num_s_c.wav").getAbsoluteFile());
                                Clip cli = AudioSystem.getClip();
                                cli.open(audioInput);
                                cli.start();
                            } catch (Exception e) {
                            }
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            bin_ls_r();
                        }
                        if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CLOSED_OPTION || choice == JOptionPane.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }

                } else {
                    try {
                        AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\num_s_c.wav").getAbsoluteFile());
                        Clip cli = AudioSystem.getClip();
                        cli.open(audioInput);
                        cli.start();
                    } catch (Exception e) {
                    }
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    bin_ls_r();
                }

            }
        });

        jp.repaint();
        MyColoredButton hexop = new MyColoredButton("Hexadecimal");
        hexop.setBounds(470, 93, 150, 30);
        hexop.setFont(new Font("Arial", Font.BOLD, 15));
        hexop.setToolTipText("Sets current number system as Hexadecimal number system");
        jp.add(hexop);
        hexop.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = resultt.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == JOptionPane.YES_OPTION) {
                            clip.stop();
                            try {
                                AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\num_s_c.wav").getAbsoluteFile());
                                Clip cli = AudioSystem.getClip();
                                cli.open(audioInput);
                                cli.start();
                            } catch (Exception e) {
                            }
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            hex_ls_r();
                        }
                        if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CLOSED_OPTION || choice == JOptionPane.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    try {
                        AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\num_s_c.wav").getAbsoluteFile());
                        Clip cli = AudioSystem.getClip();
                        cli.open(audioInput);
                        cli.start();
                    } catch (Exception e) {
                    }
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    hex_ls_r();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = resultt.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            Find_In_Range();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    Find_In_Range();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = resultt.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Largest & Smallest Number in range");
        sh.addItem("Range of divisors of a number");
        sh.addItem("Prime Numbers in given range");
        sh.addItem("Even Numbers in given range");
        sh.addItem("Odd Numbers in given range");
        sh.addItem("Perfect square numbers in given range");
        sh.addItem("Perfect cube numbers in given range");
        sh.addItem("Perfect dividends in given range");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Perfect cube numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_cb_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_cb_r();
                    }
                }
                if (op.equals("Prime Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                prime_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        prime_r();
                    }
                }
                if (op.equals("Even Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                even_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        even_r();
                    }
                }
                if (op.equals("Odd Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                odd_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        odd_r();
                    }
                }

                if (op.equals("Perfect square numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_sq_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_sq_r();
                    }
                }
                if (op.equals("Range of divisors of a number")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                divisors_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        divisors_r();
                    }
                }
                if (op.equals("Perfect dividends in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_by_num_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_by_num_r();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void bin_ls_r() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);;
        jp.repaint();

        JLabel scl = new JLabel("Largest & Smallest Number In Range", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel syn = new JLabel("Select number system:");
        syn.setBounds(40, 90, 200, 30);
        syn.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(syn);

        jp.repaint();
        JLabel n1 = new JLabel("Enter Numbers:");
        n1.setBounds(40, 100, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);
        n1.revalidate();

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 138, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your binary number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '1') || (c == '0'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        n1tb.revalidate();

        JLabel ourorder = new JLabel("Your numbers:");
        ourorder.setBounds(16, 163, 181, 100);
        ourorder.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(ourorder);

        jp.repaint();
        JTextArea ta = new JTextArea(100, 5);
        ta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane spp = new JScrollPane(ta);
        spp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        spp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        spp.setBounds(150, 190, 560, 50);
        ta.setEnabled(false);
        jp.add(spp);
        jp.repaint();

        double arr[] = new double[10000];

        jp.repaint();
        MyColoredButton addnums = new MyColoredButton("Add");
        addnums.setBounds(425, 138, 80, 30);
        addnums.setFont(new Font("Arial", Font.BOLD, 15));
        addnums.setToolTipText("Adds a binary number into your order of binary numbers");
        jp.add(addnums);
        addnums.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                int c = co1;
                String sss;
                sss = n1tb.getText();
                if (sss.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Please, Enter a number.");
                } else {
                    arr[c] = Double.parseDouble(sss);
                    ta.append(" ");
                    ta.append(String.valueOf(Math.round(arr[c])) + " ,");
                    c++;
                    co1 = c;
                    n1tb.setText("");
                }
            }
        });

        jp.repaint();
        MyColoredButton del = new MyColoredButton("Delete");
        del.setBounds(520, 138, 90, 30);
        del.setFont(new Font("Arial", Font.BOLD, 15));
        del.setToolTipText("Deletes a number from your order of binary numbers");
        jp.add(del);
        del.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String check = ta.getText();
                if (check.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Nothing to delete in your number order.");
                } else {
                    String lens;
                    int c1 = co1;
                    c1--;
                    lens = String.valueOf(Math.round(arr[c1]));
                    len_s1 = lens.length();
                    co1 = c1;

                    String text = ta.getText();
                    ta.setText(text.substring(0, text.length() - (len_s1 + 3)));
                }
            }
        });

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(630, 138, 90, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets your order of binary numbers");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String lens;
                int c1 = co1;
                lens = String.valueOf(Math.round(arr[c1]));
                len_s1 = lens.length();
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
            }
        });

        jp.repaint();
        MyColoredButton fix = new MyColoredButton("Confirm");
        fix.setBounds(125, 330, 100, 30);
        fix.setFont(new Font("Arial", Font.BOLD, 15));
        fix.setToolTipText("Finalize your order of binary numbers.");
        jp.add(fix);
        fix.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String text = ta.getText();
                if (text.length() != 0) {
                    ta.setText(text.substring(0, text.length() - 1));
                    ta.append(".");
                    addnums.setEnabled(false);
                    del.setEnabled(false);
                    press_con = 1;
                }
            }
        });

        jp.repaint();
        JLabel resultt = new JLabel();
        resultt.setBounds(140, 236, 900, 100);
        resultt.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(resultt);

        jp.repaint();
        MyColoredButton arrange = new MyColoredButton("Largest And Smallest Number");
        arrange.setBounds(255, 330, 250, 30);
        arrange.setFont(new Font("Arial", Font.BOLD, 15));
        arrange.setToolTipText("Prints largest and smallest binary number from your order of binary numbers");
        jp.add(arrange);
        arrange.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                if (press_con == 1) {
                    double dec_arr[] = new double[co1];
                    double temp;
                    fix.setEnabled(false);
                    rtn1.setEnabled(false);
                    for (int j = 0; j < co1; j++) {
                        int num = (int) Math.round(arr[j]);
                        double pow = 0, res = 0, e;
                        int bit;
                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                e = Math.pow(2, pow);
                                res = res + e;
                                pow++;
                            }
                        }
                        dec_arr[j] = res;

                    }
                    double biggest = 0;
                    for (int i = 0; i < co1; i++) {
                        if (biggest < dec_arr[i]) {
                            biggest = dec_arr[i];
                        }
                    }
                    double smallest = biggest;
                    for (int i = 0; i < co1; i++) {
                        if (smallest > dec_arr[i]) {
                            smallest = dec_arr[i];
                        }
                    }
                    String nums[] = new String[2];
                    double bs[] = new double[2];
                    bs[0] = biggest;
                    bs[1] = smallest;
                    for (int i = 0; i < 2; i++) {
                        int num = (int) bs[i];
                        int bin[] = new int[100000];
                        int f;
                        for (f = 0; num > 0; f++) {
                            bin[f] = num % 2;
                            num = num / 2;
                        }
                        StringBuilder b = new StringBuilder();
                        for (int h = f - 1; h >= 0; h--) {
                            b.append(bin[h]);
                        }
                        nums[i] = b.toString();
                    }

                    resultt.setText("Largest Number: " + nums[0] + " And Smallest Number: " + nums[1]);
                }
            }

        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
                fix.setEnabled(true);
                rtn1.setEnabled(true);
                arrange.setEnabled(true);
                resultt.setText("");
            }
        });

        jp.repaint();
        MyColoredButton decimalop = new MyColoredButton("Decimal");
        decimalop.setBounds(250, 93, 100, 30);
        decimalop.setFont(new Font("Arial", Font.BOLD, 15));
        decimalop.setToolTipText("Sets current number system as decimal number system");
        jp.add(decimalop);
        decimalop.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = resultt.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == JOptionPane.YES_OPTION) {
                            clip.stop();
                            try {
                                AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\num_s_c.wav").getAbsoluteFile());
                                Clip cli = AudioSystem.getClip();
                                cli.open(audioInput);
                                cli.start();
                            } catch (Exception e) {
                            }
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            dec_ls_r();
                        }
                        if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CLOSED_OPTION || choice == JOptionPane.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    try {
                        AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\num_s_c.wav").getAbsoluteFile());
                        Clip cli = AudioSystem.getClip();
                        cli.open(audioInput);
                        cli.start();
                    } catch (Exception e) {
                    }
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    dec_ls_r();
                }

            }
        });

        jp.repaint();
        MyColoredButton binop = new MyColoredButton("Binary");
        binop.setBounds(360, 93, 100, 30);
        binop.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(binop);
        binop.setEnabled(false);

        jp.repaint();
        MyColoredButton hexop = new MyColoredButton("Hexadecimal");
        hexop.setBounds(470, 93, 150, 30);
        hexop.setFont(new Font("Arial", Font.BOLD, 15));
        hexop.setToolTipText("Sets current number system as hexadecimal number system");
        jp.add(hexop);
        hexop.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = resultt.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == JOptionPane.YES_OPTION) {
                            clip.stop();
                            try {
                                AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\num_s_c.wav").getAbsoluteFile());
                                Clip cli = AudioSystem.getClip();
                                cli.open(audioInput);
                                cli.start();
                            } catch (Exception e) {
                            }
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            hex_ls_r();
                        }
                        if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CLOSED_OPTION || choice == JOptionPane.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    try {
                        AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\num_s_c.wav").getAbsoluteFile());
                        Clip cli = AudioSystem.getClip();
                        cli.open(audioInput);
                        cli.start();
                    } catch (Exception e) {
                    }
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    hex_ls_r();
                }
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\bin_ls_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to get largest and smallest binary number\n"
                            + "from your given order of binary numbers.\n"
                            + "\n"
                            + "Steps To Get Largest And Smallest Binary Number :\n"
                            + "1.Enter your binary number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Add <b color='black'>|</b></font> to add the binary number in your order.</html>\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Delete <b color='black'>|</b></font> to remove last binary number from your order.</html>\n"
                            + "<html>4.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> to finalize your order.</html>\n"
                            + "<html>5.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Largest And Smallest Number <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will print largest and smallest binary number from \n"
                            + "    your order.\n"
                            + "\n"
                            + "<html>*Once you have clicked on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> you cannot add or </html>\n"
                            + "  delete binary numbers from your order. After which if you wish to \n"
                            + "  change the order then you need to re-enter your order binary numbers \n"
                            + "<html>  for which you need to click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> which will reset</html>\n"
                            + "  your order of binary numbers.\n"
                            + "\n"
                            + "<html>*You can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset your order of binary numbers</html>\n"
                            + "  and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = ta.getText();
                String num3 = resultt.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your order of binary numbers: " + num1 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = resultt.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            Find_In_Range();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    Find_In_Range();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = resultt.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Largest & Smallest Number in range");
        sh.addItem("Range of divisors of a number");
        sh.addItem("Prime Numbers in given range");
        sh.addItem("Even Numbers in given range");
        sh.addItem("Odd Numbers in given range");
        sh.addItem("Perfect square numbers in given range");
        sh.addItem("Perfect cube numbers in given range");
        sh.addItem("Perfect dividends in given range");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Perfect cube numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_cb_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_cb_r();
                    }
                }
                if (op.equals("Prime Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                prime_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        prime_r();
                    }
                }
                if (op.equals("Even Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                even_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        even_r();
                    }
                }
                if (op.equals("Odd Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                odd_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        odd_r();
                    }
                }

                if (op.equals("Perfect square numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_sq_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_sq_r();
                    }
                }
                if (op.equals("Range of divisors of a number")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                divisors_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        divisors_r();
                    }
                }
                if (op.equals("Perfect dividends in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_by_num_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_by_num_r();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();
    }

    public void hex_ls_r() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);;
        jp.repaint();

        JLabel scl = new JLabel("Largest & Smallest Number In Range", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel syn = new JLabel("Select number system:");
        syn.setBounds(40, 90, 200, 30);
        syn.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(syn);

        jp.repaint();
        JLabel n1 = new JLabel("Enter Numbers:");
        n1.setBounds(40, 100, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);
        n1.revalidate();

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 138, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your hexadecimal number here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == 'A') || (c == 'B') || (c == 'C') || (c == 'D') || (c == 'E') || (c == 'F'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();
        n1tb.revalidate();

        JLabel ourorder = new JLabel("Your numbers:");
        ourorder.setBounds(16, 163, 181, 100);
        ourorder.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(ourorder);

        jp.repaint();
        JTextArea ta = new JTextArea(100, 5);
        ta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane spp = new JScrollPane(ta);
        spp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        spp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        spp.setBounds(150, 190, 560, 50);
        ta.setEnabled(false);
        jp.add(spp);
        jp.repaint();

        String arr[] = new String[10000];

        jp.repaint();
        MyColoredButton addnums = new MyColoredButton("Add");
        addnums.setBounds(425, 138, 80, 30);
        addnums.setFont(new Font("Arial", Font.BOLD, 15));
        addnums.setToolTipText("Adds a number into your order of hexadecimal numbers");
        jp.add(addnums);
        addnums.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                int c = co1;
                String sss;
                sss = n1tb.getText();
                if (sss.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Please, Enter a number.");
                } else {
                    arr[c] = n1tb.getText();
                    ta.append(" ");
                    ta.append(String.valueOf(arr[c]) + " ,");
                    c++;
                    co1 = c;
                    n1tb.setText("");
                }
            }
        });

        jp.repaint();
        MyColoredButton del = new MyColoredButton("Delete");
        del.setBounds(520, 138, 90, 30);
        del.setFont(new Font("Arial", Font.BOLD, 15));
        del.setToolTipText("Deletes a number from your order of hexadecimal numbers");
        jp.add(del);
        del.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String check = ta.getText();
                if (check.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Nothing to delete in your number order.");
                } else {
                    String lens;
                    int c1 = co1;
                    c1--;
                    lens = String.valueOf(arr[c1]);
                    len_s1 = lens.length();
                    co1 = c1;

                    String text = ta.getText();
                    ta.setText(text.substring(0, text.length() - (len_s1 + 3)));
                }
            }
        });

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(630, 138, 90, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets your order of hexadecimal numbers");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String lens;
                int c1 = co1;
                lens = String.valueOf(arr[c1]);
                len_s1 = lens.length();
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
            }
        });

        jp.repaint();
        MyColoredButton fix = new MyColoredButton("Confirm");
        fix.setBounds(125, 330, 100, 30);
        fix.setFont(new Font("Arial", Font.BOLD, 15));
        fix.setToolTipText("Finalize your order of hexadecimal number.");
        jp.add(fix);
        fix.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String text = ta.getText();
                if (text.length() != 0) {
                    ta.setText(text.substring(0, text.length() - 1));
                    ta.append(".");
                    addnums.setEnabled(false);
                    del.setEnabled(false);
                    press_con = 1;
                }
            }
        });

        jp.repaint();
        JLabel resultt = new JLabel();
        resultt.setBounds(140, 236, 900, 100);
        resultt.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(resultt);

        jp.repaint();
        MyColoredButton arrange = new MyColoredButton("Largest And Smallest Number");
        arrange.setBounds(255, 330, 250, 30);
        arrange.setFont(new Font("Arial", Font.BOLD, 15));
        arrange.setToolTipText("Prints largest and smallest hexadecimal number from your order of hexadecimal numbers");
        jp.add(arrange);
        arrange.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                if (press_con == 1) {
                    double dec_arr[] = new double[co1];
                    double tem;
                    fix.setEnabled(false);
                    rtn1.setEnabled(false);
                    for (int i = 0; i < co1; i++) {

                        String num = arr[i];

                        char bit1;
                        double po = 0, pe, temp, res = 0;

                        char[] arr = new char[num.length()];
                        for (int h = 0; h < num.length(); h++) {
                            arr[h] = num.charAt(h);
                        }
                        for (int j = num.length() - 1; j >= 0; j--) {
                            bit1 = arr[j];

                            if (bit1 == '1') {
                                pe = Math.pow(16, po);
                                temp = 1 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '2') {
                                pe = Math.pow(16, po);
                                temp = 2 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '3') {
                                pe = Math.pow(16, po);
                                temp = 3 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '4') {
                                pe = Math.pow(16, po);
                                temp = 4 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '5') {
                                pe = Math.pow(16, po);
                                temp = 5 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '6') {
                                pe = Math.pow(16, po);
                                temp = 6 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '7') {
                                pe = Math.pow(16, po);
                                temp = 7 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '8') {
                                pe = Math.pow(16, po);
                                temp = 8 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '9') {
                                pe = Math.pow(16, po);
                                temp = 9 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'A') {
                                pe = Math.pow(16, po);
                                temp = 10 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'B') {
                                pe = Math.pow(16, po);
                                temp = 11 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'C') {
                                pe = Math.pow(16, po);
                                temp = 12 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'D') {
                                pe = Math.pow(16, po);
                                temp = 13 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'E') {
                                pe = Math.pow(16, po);
                                temp = 14 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'F') {
                                pe = Math.pow(16, po);
                                temp = 15 * pe;
                                res = res + temp;
                            }
                            po++;
                        }
                        dec_arr[i] = res;
                    }
                    double biggest = 0;
                    for (int i = 0; i < co1; i++) {
                        if (biggest < dec_arr[i]) {
                            biggest = dec_arr[i];
                        }
                    }
                    double smallest = biggest;
                    for (int i = 0; i < co1; i++) {
                        if (smallest > dec_arr[i]) {
                            smallest = dec_arr[i];
                        }
                    }
                    double bs[] = new double[2];
                    bs[0] = biggest;
                    bs[1] = smallest;
                    String ar[] = new String[2];
                    for (int i = 0; i < 2; i++) {
                        StringBuilder b = new StringBuilder();
                        double n = bs[i];
                        if (n > 0) {
                            int p;
                            int nu = (int) n;
                            int extra = 0;
                            String re[] = new String[1000];
                            for (p = 0; nu > 0; p++) {
                                extra = 0;
                                extra = nu % 16;
                                if (extra == 10 || extra == 11 || extra == 12 || extra == 13 || extra == 14 || extra == 15) {
                                    if (extra == 10) {
                                        re[p] = "A";
                                    }
                                    if (extra == 11) {
                                        re[p] = "B";
                                    }
                                    if (extra == 12) {
                                        re[p] = "C";
                                    }
                                    if (extra == 13) {
                                        re[p] = "D";
                                    }
                                    if (extra == 14) {
                                        re[p] = "E";
                                    }
                                    if (extra == 15) {
                                        re[p] = "F";
                                    }

                                } else {
                                    re[p] = Integer.toString(extra);
                                }
                                nu = nu / 16;
                            }
                            for (int j = p - 1; j >= 0; j--) {
                                b.append(re[j]);
                            }
                        }
                        ar[i] = b.toString();
                    }

                    resultt.setText("Largest Number: " + ar[0] + " and Smallest Number: " + ar[1]);
                }
            }

        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
                fix.setEnabled(true);
                rtn1.setEnabled(true);
                arrange.setEnabled(true);
                resultt.setText("");
            }
        });

        jp.repaint();
        MyColoredButton decimalop = new MyColoredButton("Decimal");
        decimalop.setBounds(250, 93, 100, 30);
        decimalop.setFont(new Font("Arial", Font.BOLD, 15));
        decimalop.setToolTipText("Sets current number system as decimal number system");
        jp.add(decimalop);
        decimalop.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = resultt.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == JOptionPane.YES_OPTION) {
                            clip.stop();
                            try {
                                AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\num_s_c.wav").getAbsoluteFile());
                                Clip cli = AudioSystem.getClip();
                                cli.open(audioInput);
                                cli.start();
                            } catch (Exception e) {
                            }
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            dec_ls_r();
                        }
                        if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CLOSED_OPTION || choice == JOptionPane.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    try {
                        AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\num_s_c.wav").getAbsoluteFile());
                        Clip cli = AudioSystem.getClip();
                        cli.open(audioInput);
                        cli.start();
                    } catch (Exception e) {
                    }
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    dec_ls_r();
                }

            }
        });

        jp.repaint();
        MyColoredButton binop = new MyColoredButton("Binary");
        binop.setBounds(360, 93, 100, 30);
        binop.setFont(new Font("Arial", Font.BOLD, 15));
        binop.setToolTipText("Sets current number system as binary number system");
        jp.add(binop);
        binop.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = resultt.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == JOptionPane.YES_OPTION) {
                            clip.stop();
                            try {
                                AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\num_s_c.wav").getAbsoluteFile());
                                Clip cli = AudioSystem.getClip();
                                cli.open(audioInput);
                                cli.start();
                            } catch (Exception e) {
                            }
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            bin_ls_r();
                        }
                        if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CLOSED_OPTION || choice == JOptionPane.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    try {
                        AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\num_s_c.wav").getAbsoluteFile());
                        Clip cli = AudioSystem.getClip();
                        cli.open(audioInput);
                        cli.start();
                    } catch (Exception e) {
                    }
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    bin_ls_r();
                }

            }
        });

        jp.repaint();
        MyColoredButton hexop = new MyColoredButton("Hexadecimal");
        hexop.setBounds(470, 93, 150, 30);
        hexop.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(hexop);
        hexop.setEnabled(false);

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\hex_ls_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to get largest and smallest hexadecimal number\n"
                            + "from your given order of hexadecimal numbers.\n"
                            + "\n"
                            + "Steps To Get Largest And Smallest hexadecimal Number :\n"
                            + "1.Enter your hexadecimal number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Add <b color='black'>|</b></font> to add the hexadecimal number in your order.</html>\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Delete <b color='black'>|</b></font> to remove last hexadecimal number from your order.</html>\n"
                            + "<html>4.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> to finalize your order.</html>\n"
                            + "<html>5.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Largest And Smallest Number <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will print largest and smallest hexadecimal number from \n"
                            + "    your order.\n"
                            + "\n"
                            + "<html>*Once you have clicked on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> you cannot add or </html>\n"
                            + "  delete hexadecimal numbers from your order. After which if you wish to \n"
                            + "  change the order then you need to re-enter your order hexadecimal numbers \n"
                            + "<html>  for which you need to click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> which will reset</html>\n"
                            + "  your order of hexadecimal numbers.\n"
                            + "\n"
                            + "<html>*You can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset your order of hexadecimal numbers</html>\n"
                            + "  and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = ta.getText();
                String num3 = resultt.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your order of hexadecimal numbers: " + num1 + "\n" + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = resultt.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            Find_In_Range();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    Find_In_Range();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = resultt.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Largest & Smallest Number in range");
        sh.addItem("Range of divisors of a number");
        sh.addItem("Prime Numbers in given range");
        sh.addItem("Even Numbers in given range");
        sh.addItem("Odd Numbers in given range");
        sh.addItem("Perfect square numbers in given range");
        sh.addItem("Perfect cube numbers in given range");
        sh.addItem("Perfect dividends in given range");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Perfect cube numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_cb_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_cb_r();
                    }
                }
                if (op.equals("Prime Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                prime_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        prime_r();
                    }
                }
                if (op.equals("Even Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                even_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        even_r();
                    }
                }
                if (op.equals("Odd Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                odd_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        odd_r();
                    }
                }

                if (op.equals("Perfect square numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_sq_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_sq_r();
                    }
                }
                if (op.equals("Range of divisors of a number")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                divisors_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        divisors_r();
                    }
                }
                if (op.equals("Perfect dividends in given range")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = resultt.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                div_by_num_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        div_by_num_r();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void div_by_num_r() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);;
        jp.repaint();

        JLabel scl = new JLabel("Perfect dividends in given range", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(60, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your lower limit here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });
        jp.repaint();

        JLabel res = new JLabel("→");
        res.setBounds(270, 105, 200, 30);
        res.setFont(new Font("Arial Black", Font.BOLD, 30));
        jp.add(res);

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(160, 150, 100, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets lower limit");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
            }
        });

        jp.repaint();
        JLabel n2 = new JLabel("Lower Limit                                          Upper Limit                                     Divisor");
        n2.setBounds(70, 115, 560, 100);
        n2.setFont(new Font("Serif", Font.BOLD, 16));
        jp.add(n2);

        jp.repaint();
        JTextField n2tb = new JTextField();
        n2tb.setBounds(310, 108, 200, 30);
        n2tb.setFont(new Font("Serif", Font.BOLD, 15));
        n2tb.setToolTipText("Enter your upper limit here");
        jp.add(n2tb);
        n2tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn2 = new MyColoredButton("Reset");
        rtn2.setBounds(410, 150, 100, 30);
        rtn2.setFont(new Font("Arial", Font.BOLD, 15));
        rtn2.setToolTipText("Resets upper limit");
        jp.add(rtn2);
        rtn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n2tb.setText("");
            }
        });

        jp.repaint();
        JTextField n3tb = new JTextField();
        n3tb.setBounds(550, 108, 150, 30);
        n3tb.setFont(new Font("Serif", Font.BOLD, 15));
        n3tb.setToolTipText("Enter your divisor here");
        jp.add(n3tb);
        n3tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        jp.repaint();
        MyColoredButton rtn3 = new MyColoredButton("Reset");
        rtn3.setBounds(600, 150, 100, 30);
        rtn3.setFont(new Font("Arial", Font.BOLD, 15));
        rtn3.setToolTipText("Resets divisor");
        jp.add(rtn3);
        rtn3.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n3tb.setText("");
            }
        });

        JTextArea jta = new JTextArea(100, 5);
        jta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane sp = new JScrollPane(jta);
        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        sp.setBounds(100, 215, 560, 100);
        jp.add(sp);

        jp.repaint();
        MyColoredButton fact = new MyColoredButton("Get Perfect Dividends");
        fact.setBounds(240, 330, 200, 30);
        fact.setFont(new Font("Arial", Font.BOLD, 15));
        fact.setToolTipText("Prints all the dividends which are perfectly divided by you divisor in your given range");
        jp.add(fact);
        fact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jta.setText("");
                double t1 = 1, t2 = 1, t3 = 1;
                String ts1 = n1tb.getText(), ts2 = n2tb.getText(), ts3 = n3tb.getText();
                try {
                    t1 = Double.parseDouble(n1tb.getText());
                    t2 = Double.parseDouble(n2tb.getText());
                    t3 = Double.parseDouble(n3tb.getText());
                } catch (Exception zxzxe) {
                }
                if (ts1.equals("") || ts2.equals("") || ts3.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Please ,Enter both the limits and divisor");
                } else if (t2 <= t1) {
                    JOptionPane.showMessageDialog(jf, "Upper Limit should be greater than Lower Limit");
                } else {
                    double f, l, d;
                    f = Double.parseDouble(n1tb.getText());
                    l = Double.parseDouble(n2tb.getText());
                    d = Double.parseDouble(n3tb.getText());
                    jta.append("Perfect dividends of " + Math.round(2) + " from " + Math.round(f) + " - " + Math.round(l) + " are:\n");
                    for (double i = f; i <= l; i++) {
                        if (i % d == 0) {
                            jta.append(" ");
                            jta.append(String.valueOf(Math.round(i)));
                            jta.append(" ,");
                        }
                    }
                    String text = jta.getText();
                    jta.setText(text.substring(0, text.length() - 2));
                    jta.append(" .");
                }

            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                n2tb.setText("");
                n3tb.setText("");
                jta.setText("");
            }
        });

        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\div_by_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to print all dividends which are perfectly\n"
                            + "divisible by your divisor in your given range.\n"
                            + "\n"
                            + "Steps To Get Dividends:\n"
                            + "1.Enter the lower limit of range.\n"
                            + "2.Enter the upper limit of range.\n"
                            + "3.Enter the divisor.\n"
                            + "<html>4.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Get Perfect Dividends <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will print all dividends which are perfectly\n"
                            + "    divisible by your divisor in your given range. \n"
                            + "\n"
                            + "For Example: Range is from 1 to 17 and divisor is 4\n"
                            + "then it will print all numbers(dividends) which are \n"
                            + "perfectly divisible by 4 i.e  4 , 8 , 12 , 16 .\n"
                            + "\n"
                            + "*You can clear the content of any textbox using \n"
                            + "<html>  <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> associated to it, also you can </html>\n"
                            + "<html>   use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset all textbox and result.</html>",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = n1tb.getText();
                String num2 = n2tb.getText();
                String dis = n3tb.getText();
                String num3 = jta.getText();
                if (!(num1.equals("")) && !(num2.equals("")) && !(num3.equals("")) && !(dis.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your lower limit: " + num1 + "\n");
                    b.append("Your upper limit: " + num2 + "\n");
                    b.append("Your upper limit: " + dis + "\n");
                    b.append("All " + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = jta.getText();
                String s4 = n3tb.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            Find_In_Range();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    Find_In_Range();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s2 = n2tb.getText();
                String s3 = jta.getText();
                String s4 = n3tb.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Perfect dividends in given range");
        sh.addItem("Range of divisors of a number");
        sh.addItem("Prime Numbers in given range");
        sh.addItem("Even Numbers in given range");
        sh.addItem("Odd Numbers in given range");
        sh.addItem("Perfect square numbers in given range");
        sh.addItem("Perfect cube numbers in given range");
        sh.addItem("Largest & Smallest Number in range");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Range of divisors of a number")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    String s4 = n3tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                divisors_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        divisors_r();
                    }
                }
                if (op.equals("Even Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    String s4 = n3tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                even_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        even_r();
                    }
                }
                if (op.equals("Odd Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    String s4 = n3tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                odd_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        odd_r();
                    }
                }
                if (op.equals("Perfect square numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    String s4 = n3tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_sq_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_sq_r();
                    }
                }

                if (op.equals("Perfect cube numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    String s4 = n3tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                perfect_cb_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        perfect_cb_r();
                    }
                }
                if (op.equals("Largest & Smallest Number in range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    String s4 = n3tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                dec_ls_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        dec_ls_r();
                    }
                }
                if (op.equals("Prime Numbers in given range")) {
                    String s1 = n1tb.getText();
                    String s2 = n2tb.getText();
                    String s3 = jta.getText();
                    String s4 = n3tb.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals("")) || !(s4.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                prime_r();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        prime_r();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void ascend_descend() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);;
        jp.repaint();

        jp.repaint();
        JLabel ml = new JLabel("Ascending-Descending Orders", SwingConstants.CENTER);
        ml.setBounds(115, 20, 500, 50);
        ml.setBorder(BorderFactory.createLineBorder(Color.black, 3));
        ml.setFont(new Font("Garamond", Font.BOLD, 35));
        jp.add(ml, new Integer(-6));

        jp.repaint();
        MyColoredButton mt = new MyColoredButton("Arrange In Ascending Order (Decimal)");
        mt.setBounds(20, 100, 340, 40);
        mt.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(mt);
        mt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                ascend_dec();
            }
        });

        jp.repaint();
        MyColoredButton fn = new MyColoredButton("Arrange In Descending Order (Decimal)");
        fn.setBounds(380, 100, 340, 40);
        fn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(fn);
        fn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                descend_dec();
            }
        });

        jp.repaint();
        MyColoredButton pn = new MyColoredButton("Arrange In Ascending Order (Binary)");
        pn.setBounds(20, 170, 340, 40);
        pn.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(pn);
        pn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                ascend_bin();
            }
        });

        jp.repaint();
        MyColoredButton eo = new MyColoredButton("Arrange In Descending Order (Binary)");
        eo.setBounds(380, 170, 340, 40);
        eo.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(eo);
        eo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                descend_bin();
            }
        });

        jp.repaint();
        MyColoredButton pn1 = new MyColoredButton("Arrange In Ascending Order (Hex)");
        pn1.setBounds(20, 240, 340, 40);
        pn1.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(pn1);
        pn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                ascend_hex();
            }
        });

        jp.repaint();
        MyColoredButton eo1 = new MyColoredButton("Arrange In Descending Order (Hex)");
        eo1.setBounds(380, 240, 340, 40);
        eo1.setFont(new Font("Arial", Font.BOLD, 15));
        jp.add(eo1);
        eo1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                descend_hex();
            }
        });

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(140, 380, 200, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                jf.getContentPane().removeAll();
                jf.repaint();
                mainmenu();
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(400, 380, 200, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        jp.repaint();
        
    }

    public void ascend_dec() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);;
        jp.repaint();

        JLabel scl = new JLabel("Arrange in ascending Order (Decimal)", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter Numbers:");
        n1.setBounds(40, 70, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 108, 200, 30);
        n1tb.setToolTipText("Enter your decimal numbers here");
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        JLabel ourorder = new JLabel("Your order:");
        ourorder.setBounds(35, 163, 181, 100);
        ourorder.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(ourorder);

        JTextArea ta = new JTextArea(100, 5);
        ta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane spp = new JScrollPane(ta);
        spp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        spp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        spp.setBounds(150, 190, 560, 50);
        ta.setEnabled(false);
        jp.add(spp);

        JLabel aorder = new JLabel("<html>Ascending<br>order:</html>");
        aorder.setBounds(45, 236, 181, 100);
        aorder.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(aorder);

        JTextArea jta = new JTextArea(100, 5);
        jta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane sp = new JScrollPane(jta);
        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        sp.setBounds(150, 265, 560, 50);
        jp.add(sp);

        double arr[] = new double[10000];

        jp.repaint();
        MyColoredButton addnums = new MyColoredButton("Add");
        addnums.setBounds(425, 108, 80, 30);
        addnums.setFont(new Font("Arial", Font.BOLD, 15));
        addnums.setToolTipText("Adds a number into your order of decimal numbers");
        jp.add(addnums);
        addnums.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                int c = co1;
                String sss;
                sss = n1tb.getText();
                if (sss.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Please, Enter a number.");
                } else {
                    arr[c] = Double.parseDouble(sss);
                    ta.append(" ");
                    ta.append(String.valueOf(arr[c]) + " ,");
                    c++;
                    co1 = c;
                    n1tb.setText("");

                }
            }
        });

        jp.repaint();
        MyColoredButton del = new MyColoredButton("Delete");
        del.setBounds(520, 108, 90, 30);
        del.setFont(new Font("Arial", Font.BOLD, 15));
        del.setToolTipText("Deletes a number from your order of decimal numbers");
        jp.add(del);
        del.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String check = ta.getText();
                if (check.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Nothing to delete in your number order.");
                } else {
                    String lens;
                    int c1 = co1;
                    c1--;
                    co1 = c1;
                    lens = String.valueOf(arr[c1]);
                    len_s1 = lens.length();
                    String text = ta.getText();
                    ta.setText(text.substring(0, text.length() - (len_s1 + 3)));
                }
            }
        });

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(630, 108, 90, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets your order of decimal numbers");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
            }
        });

        jp.repaint();
        MyColoredButton fix = new MyColoredButton("Confirm");
        fix.setBounds(125, 330, 100, 30);
        fix.setFont(new Font("Arial", Font.BOLD, 15));
        fix.setToolTipText("Finalize your order of decimal numbers.");
        jp.add(fix);
        fix.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String text = ta.getText();
                if (text.length() != 0) {
                    ta.setText(text.substring(0, text.length() - 1));
                    ta.append(".");
                    addnums.setEnabled(false);
                    del.setEnabled(false);
                    press_con = 1;
                }
            }
        });

        jp.repaint();
        MyColoredButton arrange = new MyColoredButton("Arrange In Ascending Order");
        arrange.setBounds(255, 330, 250, 30);
        arrange.setFont(new Font("Arial", Font.BOLD, 15));
        arrange.setToolTipText("Prints your decimal numbers in ascending order");
        jp.add(arrange);
        arrange.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                if (press_con == 1) {
                    double temp;
                    fix.setEnabled(false);
                    rtn1.setEnabled(false);
                    for (int j = 0; j < co1; ++j) {
                        for (int k = j + 1; k < co1; ++k) {
                            if (arr[j] > arr[k]) {
                                temp = arr[j];
                                arr[j] = arr[k];
                                arr[k] = temp;
                            }
                        }
                    }
                    for (int i = 0; i < co1; i++) {
                        jta.append(" ");
                        jta.append(String.valueOf(arr[i]));
                        jta.append(" ,");
                    }
                    String text = jta.getText();
                    jta.setText(text.substring(0, text.length() - 1));
                    jta.append(".");
                    press_con = 0;
                }
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
                jta.setText("");
                fix.setEnabled(true);
                rtn1.setEnabled(true);
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\dec_ascend_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to arrange your decimal numbers \n"
                            + "in ascending order.\n"
                            + "\n"
                            + "Steps To Arrange In Ascending Order  :\n"
                            + "1.Enter your decimal number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Add <b color='black'>|</b></font> to add the decimal number in your order.</html>\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Delete <b color='black'>|</b></font> to remove last decimal number from your order.</html>\n"
                            + "<html>4.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> to finalize your order.</html>\n"
                            + "<html>5.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Arrange In Ascending Order <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will arrange and print your decimal numbers\n"
                            + "    in ascending order.\n"
                            + "\n"
                            + "<html>*Once you have clicked on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> you cannot add or </html>\n"
                            + "  delete decimal numbers from your order. After which if you wish to \n"
                            + "  change the order then you need to re-enter your order decimal numbers \n"
                            + "<html>  for which you need to click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> which will reset</html>\n"
                            + "  your order of decimal numbers.\n"
                            + "\n"
                            + "<html>*You can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset your order of decimal numbers</html>\n"
                            + "  and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = ta.getText();
                String num3 = jta.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your order: " + num1 + "\n");
                    b.append("Ascending order: " + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            ascend_descend();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    ascend_descend();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Ascending Order (Decimal)");
        sh.addItem("Descending Order (Decimal)");
        sh.addItem("Ascending Order (Binary)");
        sh.addItem("Descending Order (Binary)");
        sh.addItem("Ascending Order (Hexadecimal)");
        sh.addItem("Descending Order (Hexadecimal)");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Descending Order (Decimal)")) {

                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                descend_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        descend_dec();
                    }
                }
                if (op.equals("Ascending Order (Binary)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                ascend_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        ascend_bin();
                    }
                }
                if (op.equals("Descending Order (Binary)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                descend_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        descend_bin();
                    }
                }
                if (op.equals("Ascending Order (Hexadecimal)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                ascend_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        ascend_hex();
                    }
                }

                if (op.equals("Descending Order (Hexadecimal)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                descend_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        descend_hex();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
    }

    public void descend_dec() {

        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);;
        jp.repaint();

        JLabel scl = new JLabel("Arrange in descending Order (Decimal)", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter Numbers:");
        n1.setBounds(40, 70, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your decimal numbers here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '.'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        JLabel ourorder = new JLabel("Your order:");
        ourorder.setBounds(35, 163, 181, 100);
        ourorder.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(ourorder);

        JTextArea ta = new JTextArea(100, 5);
        ta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane spp = new JScrollPane(ta);
        spp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        spp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        spp.setBounds(150, 190, 560, 50);
        ta.setEnabled(false);
        jp.add(spp);

        JLabel aorder = new JLabel("<html>Descending<br>order:</html>");
        aorder.setBounds(40, 236, 181, 100);
        aorder.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(aorder);

        JTextArea jta = new JTextArea(100, 5);
        jta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane sp = new JScrollPane(jta);
        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        sp.setBounds(150, 265, 560, 50);
        jp.add(sp);

        double arr[] = new double[10000];

        jp.repaint();
        MyColoredButton addnums = new MyColoredButton("Add");
        addnums.setBounds(425, 108, 80, 30);
        addnums.setFont(new Font("Arial", Font.BOLD, 15));
        addnums.setToolTipText("Adds a number into your order of decimal numbers");
        jp.add(addnums);
        addnums.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                int c = co1;
                String sss;
                sss = n1tb.getText();
                if (sss.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Please, Enter a number.");
                } else {
                    arr[c] = Double.parseDouble(sss);
                    ta.append(" ");
                    ta.append(String.valueOf(arr[c]) + " ,");
                    c++;
                    co1 = c;
                    n1tb.setText("");

                }
            }
        });

        jp.repaint();
        MyColoredButton del = new MyColoredButton("Delete");
        del.setBounds(520, 108, 90, 30);
        del.setFont(new Font("Arial", Font.BOLD, 15));
        del.setToolTipText("Deletes a number from your order of decimal numbers");
        jp.add(del);
        del.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String check = ta.getText();
                if (check.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Nothing to delete in your number order.");
                } else {
                    String lens;
                    int c1 = co1;
                    c1--;
                    co1 = c1;
                    lens = String.valueOf(arr[c1]);
                    len_s1 = lens.length();
                    String text = ta.getText();
                    ta.setText(text.substring(0, text.length() - (len_s1 + 3)));
                }
            }
        });

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(630, 108, 90, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets your order of decimal numbers");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
            }
        });

        jp.repaint();
        MyColoredButton fix = new MyColoredButton("Confirm");
        fix.setBounds(125, 330, 100, 30);
        fix.setFont(new Font("Arial", Font.BOLD, 15));
        fix.setToolTipText("Finalize your order of decimal numbers.");
        jp.add(fix);
        fix.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String text = ta.getText();
                if (text.length() != 0) {
                    ta.setText(text.substring(0, text.length() - 1));
                    ta.append(".");
                    addnums.setEnabled(false);
                    del.setEnabled(false);
                    press_con = 1;
                }
            }
        });

        jp.repaint();
        MyColoredButton arrange = new MyColoredButton("Arrange In Descending Order");
        arrange.setBounds(255, 330, 250, 30);
        arrange.setFont(new Font("Arial", Font.BOLD, 15));
        arrange.setToolTipText("Prints your decimal numbers in descending order");
        jp.add(arrange);
        arrange.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                if (press_con == 1) {
                    double temp;
                    fix.setEnabled(false);
                    rtn1.setEnabled(false);
                    for (int j = 0; j < co1; ++j) {
                        for (int k = j + 1; k < co1; ++k) {
                            if (arr[j] < arr[k]) {
                                temp = arr[j];
                                arr[j] = arr[k];
                                arr[k] = temp;
                            }
                        }
                    }
                    for (int i = 0; i < co1; i++) {
                        jta.append(" ");
                        jta.append(String.valueOf(arr[i]));
                        jta.append(" ,");
                    }
                    String text = jta.getText();
                    jta.setText(text.substring(0, text.length() - 1));
                    jta.append(".");
                    press_con = 0;
                }
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
                jta.setText("");
                fix.setEnabled(true);
                rtn1.setEnabled(true);
                arrange.setEnabled(true);
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\dec_descend_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to arrange your decimal numbers \n"
                            + "in descending order.\n"
                            + "\n"
                            + "Steps To Arrange In Descending Order  :\n"
                            + "1.Enter your decimal number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Add <b color='black'>|</b></font> to add the decimal number in your order.</html>\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Delete <b color='black'>|</b></font> to remove last decimal number from your order.</html>\n"
                            + "<html>4.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> to finalize your order.</html>\n"
                            + "<html>5.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Arrange In Descending Order <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will arrange and print your decimal numbers\n"
                            + "    in descending order.\n"
                            + "\n"
                            + "<html>*Once you have clicked on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> you cannot add or </html>\n"
                            + "  delete decimal numbers from your order. After which if you wish to \n"
                            + "  change the order then you need to re-enter your order decimal numbers \n"
                            + "<html>  for which you need to click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> which will reset</html>\n"
                            + "  your order of decimal numbers.\n"
                            + "\n"
                            + "<html>*You can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset your order of decimal numbers</html>\n"
                            + "  and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = ta.getText();
                String num3 = jta.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your order: " + num1 + "\n");
                    b.append("Descending order: " + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            ascend_descend();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    ascend_descend();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Descending Order (Decimal)");
        sh.addItem("Ascending Order (Decimal)");
        sh.addItem("Ascending Order (Binary)");
        sh.addItem("Descending Order (Binary)");
        sh.addItem("Ascending Order (Hexadecimal)");
        sh.addItem("Descending Order (Hexadecimal)");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Ascending Order (Decimal)")) {

                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                ascend_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        ascend_dec();
                    }
                }
                if (op.equals("Ascending Order (Binary)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                ascend_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        ascend_bin();
                    }
                }
                if (op.equals("Descending Order (Binary)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                descend_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        descend_bin();
                    }
                }
                if (op.equals("Ascending Order (Hexadecimal)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                ascend_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        ascend_hex();
                    }
                }

                if (op.equals("Descending Order (Hexadecimal)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                descend_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        descend_hex();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        

    }

    public void ascend_bin() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);;
        jp.repaint();

        JLabel scl = new JLabel("Arrange in ascending Order (Binary)", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter Numbers:");
        n1.setBounds(40, 70, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your binary numbers here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((c == '1') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '0'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        JLabel ourorder = new JLabel("Your order:");
        ourorder.setBounds(35, 163, 181, 100);
        ourorder.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(ourorder);

        JTextArea ta = new JTextArea(100, 5);
        ta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane spp = new JScrollPane(ta);
        spp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        spp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        spp.setBounds(150, 190, 560, 50);
        ta.setEnabled(false);
        jp.add(spp);

        JLabel aorder = new JLabel("<html>Ascending<br>order:</html>");
        aorder.setBounds(45, 236, 181, 100);
        aorder.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(aorder);

        JTextArea jta = new JTextArea(100, 5);
        jta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane sp = new JScrollPane(jta);
        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        sp.setBounds(150, 265, 560, 50);
        jp.add(sp);

        double arr[] = new double[10000];

        jp.repaint();
        MyColoredButton addnums = new MyColoredButton("Add");
        addnums.setBounds(425, 108, 80, 30);
        addnums.setFont(new Font("Arial", Font.BOLD, 15));
        addnums.setToolTipText("Adds a number into your order of binary numbers");
        jp.add(addnums);
        addnums.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                int c = co1;
                String sss;
                sss = n1tb.getText();
                if (sss.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Please, Enter a number.");
                } else {
                    arr[c] = Double.parseDouble(sss);
                    ta.append(" ");
                    ta.append(String.valueOf(Math.round(arr[c])) + " ,");
                    c++;
                    co1 = c;
                    n1tb.setText("");
                }
            }
        });

        jp.repaint();
        MyColoredButton del = new MyColoredButton("Delete");
        del.setBounds(520, 108, 90, 30);
        del.setFont(new Font("Arial", Font.BOLD, 15));
        del.setToolTipText("Deletes a number from your order of binary numbers");
        jp.add(del);
        del.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String check = ta.getText();
                if (check.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Nothing to delete in your number order.");
                } else {
                    String lens;
                    int c1 = co1;
                    c1--;
                    lens = String.valueOf(Math.round(arr[c1]));
                    len_s1 = lens.length();
                    co1 = c1;

                    String text = ta.getText();
                    ta.setText(text.substring(0, text.length() - (len_s1 + 3)));
                }
            }
        });

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(630, 108, 90, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets your order of binary numbers");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String lens;
                int c1 = co1;
                lens = String.valueOf(Math.round(arr[c1]));
                len_s1 = lens.length();
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
            }
        });

        jp.repaint();
        MyColoredButton fix = new MyColoredButton("Confirm");
        fix.setBounds(125, 330, 100, 30);
        fix.setFont(new Font("Arial", Font.BOLD, 15));
        fix.setToolTipText("Finalize your order of binary numbers.");
        jp.add(fix);
        fix.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String text = ta.getText();
                if (text.length() != 0) {
                    ta.setText(text.substring(0, text.length() - 1));
                    ta.append(".");
                    addnums.setEnabled(false);
                    del.setEnabled(false);
                    press_con = 1;

                }
            }
        });

        jp.repaint();
        MyColoredButton arrange = new MyColoredButton("Arrange In Ascending Order");
        arrange.setBounds(255, 330, 250, 30);
        arrange.setFont(new Font("Arial", Font.BOLD, 15));
        arrange.setToolTipText("Prints your binary numbers in ascending order");
        jp.add(arrange);
        arrange.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                if (press_con == 1) {
                    double dec_arr[] = new double[co1];
                    double temp;
                    fix.setEnabled(false);
                    rtn1.setEnabled(false);
                    for (int j = 0; j < co1; j++) {
                        int num = (int) Math.round(arr[j]);
                        double pow = 0, res = 0, e;
                        int bit;
                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                e = Math.pow(2, pow);
                                res = res + e;
                                pow++;
                            }
                        }
                        dec_arr[j] = res;

                    }
                    for (int j = 0; j < co1; j++) {
                        for (int k = j + 1; k < co1; ++k) {
                            if (dec_arr[j] > dec_arr[k]) {
                                temp = dec_arr[j];
                                dec_arr[j] = dec_arr[k];
                                dec_arr[k] = temp;
                            }
                        }
                    }
                    for (int i = 0; i < co1; i++) {
                        int num = (int) dec_arr[i];
                        int bin[] = new int[co1];
                        int f;
                        for (f = 0; num > 0; f++) {
                            bin[f] = num % 2;
                            num = num / 2;
                        }
                        jta.append(" ");
                        for (int h = f - 1; h >= 0; h--) {
                            jta.append(String.valueOf(bin[h]));
                        }
                        jta.append(" ,");
                    }
                    String text = jta.getText();
                    jta.setText(text.substring(0, text.length() - 1));
                    jta.append(".");
                    press_con = 0;
                }
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
                jta.setText("");
                fix.setEnabled(true);
                rtn1.setEnabled(true);
                arrange.setEnabled(true);
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\bin_ascend_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to arrange your binary numbers \n"
                            + "in ascending order.\n"
                            + "\n"
                            + "Steps To Arrange In Ascending Order  :\n"
                            + "1.Enter your binary number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Add <b color='black'>|</b></font> to add the binary number in your order.</html>\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Delete <b color='black'>|</b></font> to remove last binary number from your order.</html>\n"
                            + "<html>4.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> to finalize your order.</html>\n"
                            + "<html>5.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Arrange In Ascending Order <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will arrange and print your binary numbers\n"
                            + "    in ascending order.\n"
                            + "\n"
                            + "<html>*Once you have clicked on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> you cannot add or </html>\n"
                            + "  delete binary numbers from your order. After which if you wish to \n"
                            + "  change the order then you need to re-enter your order binary numbers \n"
                            + "<html>  for which you need to click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> which will reset</html>\n"
                            + "  your order of binary numbers.\n"
                            + "\n"
                            + "<html>*You can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset your order of binary numbers</html>\n"
                            + "  and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = ta.getText();
                String num3 = jta.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your order: " + num1 + "\n");
                    b.append("Ascending order: " + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();

                            clip.stop();
                            ascend_descend();
                            jf.repaint();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    ascend_descend();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Ascending Order (Binary)");
        sh.addItem("Ascending Order (Decimal)");
        sh.addItem("Descending Order (Decimal)");
        sh.addItem("Descending Order (Binary)");
        sh.addItem("Ascending Order (Hexadecimal)");
        sh.addItem("Descending Order (Hexadecimal)");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Ascending Order (Decimal)")) {

                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                ascend_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        ascend_dec();
                    }
                }
                if (op.equals("Descending Order (Decimal)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                descend_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        descend_dec();
                    }
                }
                if (op.equals("Descending Order (Binary)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                descend_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        descend_bin();
                    }
                }
                if (op.equals("Ascending Order (Hexadecimal)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                ascend_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        ascend_hex();
                    }
                }

                if (op.equals("Descending Order (Hexadecimal)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                descend_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        descend_hex();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
    }

    public void descend_bin() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);;
        jp.repaint();

        JLabel scl = new JLabel("Arrange in descending Order (Binary)", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter Numbers:");
        n1.setBounds(40, 70, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your binary numbers here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((c == '1') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == '0'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        JLabel ourorder = new JLabel("Your order:");
        ourorder.setBounds(35, 163, 181, 100);
        ourorder.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(ourorder);

        JTextArea ta = new JTextArea(100, 5);
        ta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane spp = new JScrollPane(ta);
        spp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        spp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        spp.setBounds(150, 190, 560, 50);
        ta.setEnabled(false);
        jp.add(spp);

        JLabel aorder = new JLabel("<html>Descending<br>order:</html>");
        aorder.setBounds(40, 236, 181, 100);
        aorder.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(aorder);

        JTextArea jta = new JTextArea(100, 5);
        jta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane sp = new JScrollPane(jta);
        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        sp.setBounds(150, 265, 560, 50);
        jp.add(sp);

        double arr[] = new double[10000];

        jp.repaint();
        MyColoredButton addnums = new MyColoredButton("Add");
        addnums.setBounds(425, 108, 80, 30);
        addnums.setFont(new Font("Arial", Font.BOLD, 15));
        addnums.setToolTipText("Adds a number into your order of binary numbers");
        jp.add(addnums);
        addnums.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                int c = co1;
                String sss;
                sss = n1tb.getText();
                if (sss.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Please, Enter a number.");
                } else {
                    arr[c] = Double.parseDouble(sss);
                    ta.append(" ");
                    ta.append(String.valueOf(Math.round(arr[c])) + " ,");
                    c++;
                    co1 = c;
                    n1tb.setText("");
                }
            }
        });

        jp.repaint();
        MyColoredButton del = new MyColoredButton("Delete");
        del.setBounds(520, 108, 90, 30);
        del.setFont(new Font("Arial", Font.BOLD, 15));
        del.setToolTipText("Deletes a number from your order of binary numbers");
        jp.add(del);
        del.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String check = ta.getText();
                if (check.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Nothing to delete in your number order.");
                } else {
                    String lens;
                    int c1 = co1;
                    c1--;
                    lens = String.valueOf(Math.round(arr[c1]));
                    len_s1 = lens.length();
                    co1 = c1;

                    String text = ta.getText();
                    ta.setText(text.substring(0, text.length() - (len_s1 + 3)));
                }
            }
        });

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(630, 108, 90, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets your order of binary numbers");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String lens;
                int c1 = co1;
                lens = String.valueOf(Math.round(arr[c1]));
                len_s1 = lens.length();
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
            }
        });

        jp.repaint();
        MyColoredButton fix = new MyColoredButton("Confirm");
        fix.setBounds(125, 330, 100, 30);
        fix.setFont(new Font("Arial", Font.BOLD, 15));
        fix.setToolTipText("Finalize your order of binary numbers.");
        jp.add(fix);
        fix.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String text = ta.getText();
                if (text.length() != 0) {
                    ta.setText(text.substring(0, text.length() - 1));
                    ta.append(".");
                    addnums.setEnabled(false);
                    del.setEnabled(false);
                    press_con = 1;
                }
            }
        });

        jp.repaint();
        MyColoredButton arrange = new MyColoredButton("Arrange In Descending Order");
        arrange.setBounds(255, 330, 250, 30);
        arrange.setFont(new Font("Arial", Font.BOLD, 15));
        arrange.setToolTipText("Prints your binary numbers in descending order");
        jp.add(arrange);
        arrange.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                if (press_con == 1) {
                    double dec_arr[] = new double[co1];
                    double temp;
                    fix.setEnabled(false);
                    rtn1.setEnabled(false);
                    for (int j = 0; j < co1; j++) {
                        int num = (int) Math.round(arr[j]);
                        double pow = 0, res = 0, e;
                        int bit;
                        while (num > 0) {
                            bit = num % 10;
                            num = num / 10;
                            if (bit == 0) {
                                pow++;
                            }
                            if (bit == 1) {
                                e = Math.pow(2, pow);
                                res = res + e;
                                pow++;
                            }
                        }
                        dec_arr[j] = res;

                    }
                    for (int j = 0; j < co1; j++) {
                        for (int k = j + 1; k < co1; ++k) {
                            if (dec_arr[j] < dec_arr[k]) {
                                temp = dec_arr[j];
                                dec_arr[j] = dec_arr[k];
                                dec_arr[k] = temp;
                            }
                        }
                    }
                    for (int i = 0; i < co1; i++) {
                        int num = (int) dec_arr[i];
                        int bin[] = new int[co1];
                        int f;
                        for (f = 0; num > 0; f++) {
                            bin[f] = num % 2;
                            num = num / 2;
                        }
                        jta.append(" ");
                        for (int h = f - 1; h >= 0; h--) {
                            jta.append(String.valueOf(bin[h]));
                        }
                        jta.append(" ,");
                    }
                    String text = jta.getText();
                    jta.setText(text.substring(0, text.length() - 1));
                    jta.append(".");
                    press_con = 0;
                }
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
                jta.setText("");
                fix.setEnabled(true);
                rtn1.setEnabled(true);
                arrange.setEnabled(true);
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\bin_descend_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to arrange your binary numbers \n"
                            + "in descending order.\n"
                            + "\n"
                            + "Steps To Arrange In Descending Order  :\n"
                            + "1.Enter your binary number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Add <b color='black'>|</b></font> to add the binary number in your order.</html>\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Delete <b color='black'>|</b></font> to remove last binary number from your order.</html>\n"
                            + "<html>4.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> to finalize your order.</html>\n"
                            + "<html>5.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Arrange In Descending Order <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will arrange and print your binary numbers\n"
                            + "    in descending order.\n"
                            + "\n"
                            + "<html>*Once you have clicked on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> you cannot add or </html>\n"
                            + "  delete binary numbers from your order. After which if you wish to \n"
                            + "  change the order then you need to re-enter your order binary numbers \n"
                            + "<html>  for which you need to click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> which will reset</html>\n"
                            + "  your order of binary numbers.\n"
                            + "\n"
                            + "<html>*You can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset your order of binary numbers</html>\n"
                            + "  and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = ta.getText();
                String num3 = jta.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your order: " + num1 + "\n");
                    b.append("Descending order: " + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            ascend_descend();
                            clip.stop();
                            jf.repaint();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    ascend_descend();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Descending Order (Binary)");
        sh.addItem("Ascending Order (Decimal)");
        sh.addItem("Descending Order (Decimal)");
        sh.addItem("Ascending Order (Binary)");
        sh.addItem("Ascending Order (Hexadecimal)");
        sh.addItem("Descending Order (Hexadecimal)");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Ascending Order (Decimal)")) {

                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                ascend_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        ascend_dec();
                    }
                }
                if (op.equals("Descending Order (Decimal)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                descend_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        descend_dec();
                    }
                }
                if (op.equals("Ascending Order (Binary)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                ascend_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        ascend_bin();
                    }
                }
                if (op.equals("Ascending Order (Hexadecimal)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                ascend_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        ascend_hex();
                    }
                }

                if (op.equals("Descending Order (Hexadecimal)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                descend_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        descend_hex();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();

    }

    public void ascend_hex() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);;
        jp.repaint();

        JLabel scl = new JLabel("Ascending Order (Hexadecimal)", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter Numbers:");
        n1.setBounds(40, 70, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your hexadecimal numbers here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == 'A') || (c == 'B') || (c == 'C') || (c == 'D') || (c == 'E') || (c == 'F'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        JLabel ourorder = new JLabel("Your order:");
        ourorder.setBounds(35, 163, 181, 100);
        ourorder.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(ourorder);

        JTextArea ta = new JTextArea(100, 5);
        ta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane spp = new JScrollPane(ta);
        spp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        spp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        spp.setBounds(150, 190, 560, 50);
        ta.setEnabled(false);
        jp.add(spp);

        JLabel aorder = new JLabel("<html>Ascending<br>order:</html>");
        aorder.setBounds(45, 236, 181, 100);
        aorder.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(aorder);

        JTextArea jta = new JTextArea(100, 5);
        jta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane sp = new JScrollPane(jta);
        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        sp.setBounds(150, 265, 560, 50);
        jp.add(sp);

        String arr[] = new String[10000];

        jp.repaint();
        MyColoredButton addnums = new MyColoredButton("Add");
        addnums.setBounds(425, 108, 80, 30);
        addnums.setFont(new Font("Arial", Font.BOLD, 15));
        addnums.setToolTipText("Adds a number into your order of hexadecimal numbers");
        jp.add(addnums);
        addnums.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                int c = co1;
                String sss;
                sss = n1tb.getText();
                if (sss.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Please, Enter a number.");
                } else {
                    arr[c] = n1tb.getText();
                    ta.append(" ");
                    ta.append(String.valueOf(arr[c]) + " ,");
                    c++;
                    co1 = c;
                    n1tb.setText("");
                }
            }
        });

        jp.repaint();
        MyColoredButton del = new MyColoredButton("Delete");
        del.setBounds(520, 108, 90, 30);
        del.setFont(new Font("Arial", Font.BOLD, 15));
        del.setToolTipText("Deletes a number from your order of hexadecimal numbers");
        jp.add(del);
        del.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String check = ta.getText();
                if (check.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Nothing to delete in your number order.");
                } else {
                    String lens;
                    int c1 = co1;
                    c1--;
                    lens = String.valueOf(arr[c1]);
                    len_s1 = lens.length();
                    co1 = c1;

                    String text = ta.getText();
                    ta.setText(text.substring(0, text.length() - (len_s1 + 3)));
                }
            }
        });

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(630, 108, 90, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets your order of hexadecimal numbers");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String lens;
                int c1 = co1;
                lens = String.valueOf(arr[c1]);
                len_s1 = lens.length();
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
            }
        });

        jp.repaint();
        MyColoredButton fix = new MyColoredButton("Confirm");
        fix.setBounds(125, 330, 100, 30);
        fix.setFont(new Font("Arial", Font.BOLD, 15));
        fix.setToolTipText("Finalize your order of hexadecimal numbers.");
        jp.add(fix);
        fix.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String text = ta.getText();
                if (text.length() != 0) {
                    ta.setText(text.substring(0, text.length() - 1));
                    ta.append(".");
                    addnums.setEnabled(false);
                    del.setEnabled(false);
                    press_con = 1;
                }

            }
        });

        jp.repaint();
        MyColoredButton arrange = new MyColoredButton("Arrange In Ascending Order");
        arrange.setBounds(255, 330, 250, 30);
        arrange.setFont(new Font("Arial", Font.BOLD, 15));
        arrange.setToolTipText("Prints your hexadecimal numbers in ascending order");
        jp.add(arrange);
        arrange.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                if (press_con == 1) {
                    double dec_arr[] = new double[co1];
                    double tem;
                    fix.setEnabled(false);
                    rtn1.setEnabled(false);
                    for (int i = 0; i < co1; i++) {

                        String num = arr[i];

                        char bit1;
                        double po = 0, pe, temp, res = 0;

                        char[] arr = new char[num.length()];
                        for (int h = 0; h < num.length(); h++) {
                            arr[h] = num.charAt(h);
                        }
                        for (int j = num.length() - 1; j >= 0; j--) {
                            bit1 = arr[j];

                            if (bit1 == '1') {
                                pe = Math.pow(16, po);
                                temp = 1 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '2') {
                                pe = Math.pow(16, po);
                                temp = 2 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '3') {
                                pe = Math.pow(16, po);
                                temp = 3 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '4') {
                                pe = Math.pow(16, po);
                                temp = 4 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '5') {
                                pe = Math.pow(16, po);
                                temp = 5 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '6') {
                                pe = Math.pow(16, po);
                                temp = 6 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '7') {
                                pe = Math.pow(16, po);
                                temp = 7 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '8') {
                                pe = Math.pow(16, po);
                                temp = 8 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '9') {
                                pe = Math.pow(16, po);
                                temp = 9 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'A') {
                                pe = Math.pow(16, po);
                                temp = 10 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'B') {
                                pe = Math.pow(16, po);
                                temp = 11 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'C') {
                                pe = Math.pow(16, po);
                                temp = 12 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'D') {
                                pe = Math.pow(16, po);
                                temp = 13 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'E') {
                                pe = Math.pow(16, po);
                                temp = 14 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'F') {
                                pe = Math.pow(16, po);
                                temp = 15 * pe;
                                res = res + temp;
                            }
                            po++;
                        }
                        dec_arr[i] = res;
                    }

                    for (int j = 0; j < co1; j++) {
                        for (int k = j + 1; k < co1; ++k) {
                            if (dec_arr[j] > dec_arr[k]) {
                                tem = dec_arr[j];
                                dec_arr[j] = dec_arr[k];
                                dec_arr[k] = tem;
                            }
                        }
                    }
                    for (int i = 0; i < co1; i++) {
                        StringBuilder b = new StringBuilder();
                        double n = dec_arr[i];
                        if (n > 0) {
                            int p;
                            int nu = (int) n;
                            int extra = 0;
                            String re[] = new String[1000];
                            for (p = 0; nu > 0; p++) {
                                extra = 0;
                                extra = nu % 16;
                                if (extra == 10 || extra == 11 || extra == 12 || extra == 13 || extra == 14 || extra == 15) {
                                    if (extra == 10) {
                                        re[p] = "A";
                                    }
                                    if (extra == 11) {
                                        re[p] = "B";
                                    }
                                    if (extra == 12) {
                                        re[p] = "C";
                                    }
                                    if (extra == 13) {
                                        re[p] = "D";
                                    }
                                    if (extra == 14) {
                                        re[p] = "E";
                                    }
                                    if (extra == 15) {
                                        re[p] = "F";
                                    }

                                } else {
                                    re[p] = Integer.toString(extra);
                                }
                                nu = nu / 16;
                            }
                            for (int j = p - 1; j >= 0; j--) {
                                b.append(re[j]);
                            }
                        }
                        jta.append(" ");
                        jta.append(b.toString());
                        jta.append(" ,");
                    }

                    String text = jta.getText();
                    jta.setText(text.substring(0, text.length() - 1));
                    jta.append(".");
                    press_con = 0;
                }
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
                jta.setText("");
                fix.setEnabled(true);
                rtn1.setEnabled(true);
                arrange.setEnabled(true);
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\hex_ascend_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to arrange your hexadecimal numbers \n"
                            + "in ascending order.\n"
                            + "\n"
                            + "Steps To Arrange In Ascending Order  :\n"
                            + "1.Enter your hexadecimal number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Add <b color='black'>|</b></font> to add the hexadecimal number in your order.</html>\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Delete <b color='black'>|</b></font> to remove last hexadecimal number from your order.</html>\n"
                            + "<html>4.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> to finalize your order.</html>\n"
                            + "<html>5.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Arrange In Ascending Order <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will arrange and print your hexadecimal numbers\n"
                            + "    in ascending order.\n"
                            + "\n"
                            + "<html>*Once you have clicked on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> you cannot add or </html>\n"
                            + "  delete hexadecimal numbers from your order. After which if you wish to \n"
                            + "  change the order then you need to re-enter your order hexadecimal numbers \n"
                            + "<html>  for which you need to click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> which will reset</html>\n"
                            + "  your order of hexadecimal numbers.\n"
                            + "\n"
                            + "*You can use 'ResetAll' button to reset your order of hexadecimal numbers \n"
                            + "  and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = ta.getText();
                String num3 = jta.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your order: " + num1 + "\n");
                    b.append("Ascending order: " + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            clip.stop();
                            ascend_descend();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    ascend_descend();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Ascending Order (Hexadecimal)");
        sh.addItem("Ascending Order (Decimal)");
        sh.addItem("Descending Order (Decimal)");
        sh.addItem("Ascending Order (Binary)");
        sh.addItem("Descending Order (Binary)");
        sh.addItem("Descending Order (Hexadecimal)");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Ascending Order (Decimal)")) {

                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                ascend_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        ascend_dec();
                    }
                }
                if (op.equals("Descending Order (Decimal)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                descend_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        descend_dec();
                    }
                }
                if (op.equals("Ascending Order (Binary)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                ascend_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        ascend_bin();
                    }
                }
                if (op.equals("Descending Order (Binary)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                descend_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        descend_bin();
                    }
                }

                if (op.equals("Descending Order (Hexadecimal)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                descend_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        descend_hex();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
    }

    public void descend_hex() {
        JPanel jp = new JPanel();
        jp.setVisible(true);
        jp.setBackground(Color.decode("#FFFFFF"));
        jp.setLayout(null);
        jp.setSize(750, 465);
        jf.add(jp);
        jf.setCursor(c);
        jp.repaint();

        JLabel scl = new JLabel("Descending Order (Hexadecimal)", SwingConstants.LEFT);
        scl.setBounds(10, 20, 500, 50);
        scl.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(scl, new Integer(-6));

        jp.repaint();
        JLabel uu = new JLabel("--------------------------------------------------------------------------", SwingConstants.LEFT);
        uu.setBounds(0, 50, 1000, 50);
        uu.setFont(new Font("Bookman Old Style", Font.PLAIN, 25));
        jp.add(uu);

        jp.repaint();
        JLabel n1 = new JLabel("Enter Numbers:");
        n1.setBounds(40, 70, 181, 100);
        n1.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(n1);

        jp.repaint();
        JTextField n1tb = new JTextField();
        n1tb.setBounds(200, 108, 200, 30);
        n1tb.setFont(new Font("Serif", Font.BOLD, 15));
        n1tb.setToolTipText("Enter your hexadecimal numbers here");
        jp.add(n1tb);
        n1tb.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                char c = ke.getKeyChar();
                if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == 'A') || (c == 'B') || (c == 'C') || (c == 'D') || (c == 'E') || (c == 'F'))) {
                    ke.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
            }
        });

        JLabel ourorder = new JLabel("Your order:");
        ourorder.setBounds(35, 163, 181, 100);
        ourorder.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(ourorder);

        JTextArea ta = new JTextArea(100, 5);
        ta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane spp = new JScrollPane(ta);
        spp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        spp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        spp.setBounds(150, 190, 560, 50);
        ta.setEnabled(false);
        jp.add(spp);

        JLabel aorder = new JLabel("<html>Descending<br>order:</html>");
        aorder.setBounds(40, 236, 181, 100);
        aorder.setFont(new Font("Serif", Font.BOLD, 21));
        jp.add(aorder);

        JTextArea jta = new JTextArea(100, 5);
        jta.setFont(new Font("Arial", Font.PLAIN, 25));
        JScrollPane sp = new JScrollPane(jta);
        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        sp.setBounds(150, 265, 560, 50);
        jp.add(sp);

        String arr[] = new String[10000];

        jp.repaint();
        MyColoredButton addnums = new MyColoredButton("Add");
        addnums.setBounds(425, 108, 80, 30);
        addnums.setFont(new Font("Arial", Font.BOLD, 15));
        addnums.setToolTipText("Adds a number into your order of hexadecimal numbers");
        jp.add(addnums);
        addnums.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                int c = co1;
                String sss;
                sss = n1tb.getText();
                if (sss.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Please, Enter a number.");
                } else {
                    arr[c] = n1tb.getText();
                    ta.append(" ");
                    ta.append(String.valueOf(arr[c]) + " ,");
                    c++;
                    co1 = c;
                    n1tb.setText("");
                }
            }
        });

        jp.repaint();
        MyColoredButton del = new MyColoredButton("Delete");
        del.setBounds(520, 108, 90, 30);
        del.setFont(new Font("Arial", Font.BOLD, 15));
        del.setToolTipText("Deletes a number from your order of hexadecimal numbers");
        jp.add(del);
        del.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String check = ta.getText();
                if (check.equals("")) {
                    JOptionPane.showMessageDialog(jf, "Nothing to delete in your number order.");
                } else {
                    String lens;
                    int c1 = co1;
                    c1--;
                    lens = String.valueOf(arr[c1]);
                    len_s1 = lens.length();
                    co1 = c1;

                    String text = ta.getText();
                    ta.setText(text.substring(0, text.length() - (len_s1 + 3)));
                }
            }
        });

        jp.repaint();
        MyColoredButton rtn1 = new MyColoredButton("Reset");
        rtn1.setBounds(630, 108, 90, 30);
        rtn1.setFont(new Font("Arial", Font.BOLD, 15));
        rtn1.setToolTipText("Resets your order of hexadecimal numbers");
        jp.add(rtn1);
        rtn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String lens;
                int c1 = co1;
                lens = String.valueOf(arr[c1]);
                len_s1 = lens.length();
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
            }
        });

        jp.repaint();
        MyColoredButton fix = new MyColoredButton("Confirm");
        fix.setBounds(125, 330, 100, 30);
        fix.setFont(new Font("Arial", Font.BOLD, 15));
        fix.setToolTipText("Finalize your order of hexadecimal numbers.");
        jp.add(fix);
        fix.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String text = ta.getText();
                if (text.length() != 0) {
                    ta.setText(text.substring(0, text.length() - 1));
                    ta.append(".");
                    addnums.setEnabled(false);
                    del.setEnabled(false);
                    press_con = 1;
                }

            }
        });

        jp.repaint();
        MyColoredButton arrange = new MyColoredButton("Arrange In Descending Order");
        arrange.setBounds(255, 330, 250, 30);
        arrange.setFont(new Font("Arial", Font.BOLD, 15));
        arrange.setToolTipText("Prints your hexadecimal numbers in descending order");
        jp.add(arrange);
        arrange.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                if (press_con == 1) {
                    double dec_arr[] = new double[co1];
                    double tem;
                    fix.setEnabled(false);
                    rtn1.setEnabled(false);
                    for (int i = 0; i < co1; i++) {

                        String num = arr[i];
                        char bit1;
                        double po = 0, pe, temp, res = 0;

                        char[] arr = new char[num.length()];
                        for (int h = 0; h < num.length(); h++) {
                            arr[h] = num.charAt(h);
                        }
                        for (int j = num.length() - 1; j >= 0; j--) {
                            bit1 = arr[j];

                            if (bit1 == '1') {
                                pe = Math.pow(16, po);
                                temp = 1 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '2') {
                                pe = Math.pow(16, po);
                                temp = 2 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '3') {
                                pe = Math.pow(16, po);
                                temp = 3 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '4') {
                                pe = Math.pow(16, po);
                                temp = 4 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '5') {
                                pe = Math.pow(16, po);
                                temp = 5 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '6') {
                                pe = Math.pow(16, po);
                                temp = 6 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '7') {
                                pe = Math.pow(16, po);
                                temp = 7 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '8') {
                                pe = Math.pow(16, po);
                                temp = 8 * pe;
                                res = res + temp;
                            }
                            if (bit1 == '9') {
                                pe = Math.pow(16, po);
                                temp = 9 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'A') {
                                pe = Math.pow(16, po);
                                temp = 10 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'B') {
                                pe = Math.pow(16, po);
                                temp = 11 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'C') {
                                pe = Math.pow(16, po);
                                temp = 12 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'D') {
                                pe = Math.pow(16, po);
                                temp = 13 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'E') {
                                pe = Math.pow(16, po);
                                temp = 14 * pe;
                                res = res + temp;
                            }
                            if (bit1 == 'F') {
                                pe = Math.pow(16, po);
                                temp = 15 * pe;
                                res = res + temp;
                            }
                            po++;
                        }
                        dec_arr[i] = res;
                    }

                    for (int j = 0; j < co1; j++) {
                        for (int k = j + 1; k < co1; ++k) {
                            if (dec_arr[j] < dec_arr[k]) {
                                tem = dec_arr[j];
                                dec_arr[j] = dec_arr[k];
                                dec_arr[k] = tem;
                            }
                        }
                    }
                    for (int i = 0; i < co1; i++) {
                        StringBuilder b = new StringBuilder();
                        double n = dec_arr[i];
                        if (n > 0) {
                            int p;
                            int nu = (int) n;
                            int extra = 0;
                            String re[] = new String[1000];
                            for (p = 0; nu > 0; p++) {
                                extra = 0;
                                extra = nu % 16;
                                if (extra == 10 || extra == 11 || extra == 12 || extra == 13 || extra == 14 || extra == 15) {
                                    if (extra == 10) {
                                        re[p] = "A";
                                    }
                                    if (extra == 11) {
                                        re[p] = "B";
                                    }
                                    if (extra == 12) {
                                        re[p] = "C";
                                    }
                                    if (extra == 13) {
                                        re[p] = "D";
                                    }
                                    if (extra == 14) {
                                        re[p] = "E";
                                    }
                                    if (extra == 15) {
                                        re[p] = "F";
                                    }

                                } else {
                                    re[p] = Integer.toString(extra);
                                }
                                nu = nu / 16;
                            }
                            for (int j = p - 1; j >= 0; j--) {
                                b.append(re[j]);
                            }
                        }
                        jta.append(" ");
                        jta.append(b.toString());
                        jta.append(" ,");
                    }

                    String text = jta.getText();
                    jta.setText(text.substring(0, text.length() - 1));
                    jta.append(".");
                    press_con = 0;
                }
            }
        });

        jp.repaint();
        MyColoredButton ra = new MyColoredButton("Reset All");
        ra.setBounds(540, 330, 100, 30);
        ra.setFont(new Font("Arial", Font.BOLD, 15));
        ra.setToolTipText("Resets everything");
        jp.add(ra);
        ra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                n1tb.setText("");
                ta.setText("");
                co1 = 0;
                addnums.setEnabled(true);
                del.setEnabled(true);
                jta.setText("");
                fix.setEnabled(true);
                rtn1.setEnabled(true);
                arrange.setEnabled(true);
            }
        });

        jp.repaint();
        MyImgButton Editor = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\editor.png");
        Editor.setBounds(712, 208, 30, 30);
        Editor.setFont(new Font("Arial", Font.BOLD, 15));
        Editor.setToolTipText("Click Here to open VM Text Editor");
        Editor.setOpaque(false);
        Editor.setContentAreaFilled(false);
        Editor.setBorderPainted(false);
        Editor.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(Editor);
        Editor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                vm_text_edtior();
            }
        });
        Editor.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton info = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\info.png");
        info.setBounds(712, 248, 30, 30);
        info.setFont(new Font("Arial", Font.BOLD, 15));
        info.setOpaque(false);
        info.setContentAreaFilled(false);
        info.setBorderPainted(false);
        info.setToolTipText("Click for info");
        info.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(info);
        info.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\hex_descend_cal_info.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    final ImageIcon icon = new ImageIcon("D:\\CAPP\\src\\MEDIAS\\logo.png");

                    String un[] = new String[1];
                    un[0] = "Understood";
                    JOptionPane dia = new JOptionPane();
                    int re = dia.showOptionDialog(null, "This option allows you to arrange your hexadecimal numbers \n"
                            + "in descending order.\n"
                            + "\n"
                            + "Steps To Arrange In Descending Order  :\n"
                            + "1.Enter your hexadecimal number.\n"
                            + "<html>2.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Add <b color='black'>|</b></font> to add the hexadecimal number in your order.</html>\n"
                            + "<html>3.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Delete <b color='black'>|</b></font> to remove last hexadecimal number from your order.</html>\n"
                            + "<html>4.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> to finalize your order.</html>\n"
                            + "<html>5.Click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Arrange In Descending Order <b color='black'>|</b></font> .</html>\n"
                            + "    And then it will arrange and print your hexadecimal numbers\n"
                            + "    in descending order.\n"
                            + "\n"
                            + "<html>*Once you have clicked on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Confirm <b color='black'>|</b></font> you cannot add or </html>\n"
                            + "  delete hexadecimal numbers from your order. After which if you wish to \n"
                            + "  change the order then you need to re-enter your order hexadecimal numbers \n"
                            + "<html>  for which you need to click on <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset <b color='black'>|</b></font> which will reset</html>\n" + "  your order of hexadecimal numbers.\n"
                            + "\n"
                            + "<html>*You can use <font size='3' color='white' face='Arial' bgcolor='black'><b color='black'>|</b> Reset All <b color='black'>|</b></font> to reset your order of hexadecimal numbers</html>\n"
                            + "  and result.",
                            "Information",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.PLAIN_MESSAGE,
                            icon,
                            un,
                            null
                    );

                    if (re == 0 || re == dia.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }
            }
        });
        info.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyImgButton paste = new MyImgButton("D:\\CAPP\\src\\MEDIAS\\paste.png");
        paste.setBounds(712, 288, 30, 30);
        paste.setFont(new Font("Arial", Font.BOLD, 15));
        paste.setOpaque(false);
        paste.setContentAreaFilled(false);
        paste.setBorderPainted(false);
        paste.setToolTipText("Click to get copy of result");
        paste.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jp.add(paste);
        paste.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String num1 = ta.getText();
                String num3 = jta.getText();
                if (!(num1.equals("")) && !(num3.equals(""))) {
                    StringBuffer b = new StringBuffer();
                    b.append("Your order: " + num1 + "\n");
                    b.append("Descending order: " + num3);
                    String res_copy = b.toString();
                    StringSelection selection = new StringSelection(res_copy);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(selection, selection);
                } else {
                    JOptionPane.showMessageDialog(jf, "Error is generating copy of result.\nPlease make sure you have fill all textbox and result is displayed.");
                }
            }
        });
        paste.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
                jp.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent me) {
                jp.setCursor(c);
            }
        });
        jp.repaint();

        jp.repaint();
        MyColoredButtonE b = new MyColoredButtonE("<<Back");
        b.setBounds(90, 380, 150, 40);
        b.setFont(new Font("Arial", Font.BOLD, 17));
        
        b.setToolTipText("Click here to go back");
        jp.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            clip.stop();
                            ascend_descend();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    ascend_descend();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE mm = new MyColoredButtonE("Main Menu");
        mm.setBounds(300, 380, 150, 40);
        mm.setFont(new Font("Arial", Font.BOLD, 17));
        
        mm.setToolTipText("Click here to go to the Main Menu");
        jp.add(mm);
        mm.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                String s1 = n1tb.getText();
                String s3 = ta.getText();
                String s2 = jta.getText();
                if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                    try {
                        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                        Clip clip = AudioSystem.getClip();
                        clip.open(audioInputStream);
                        clip.start();
                        JOptionPane backkk = new JOptionPane();
                        int choice = backkk.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                        if (choice == backkk.YES_OPTION) {
                            co1 = 0;
                            len_s1 = 0;
                            press_con = 0;
                            jf.getContentPane().removeAll();
                            jf.repaint();
                            mainmenu();
                            clip.stop();
                        }
                        if (choice == backkk.NO_OPTION || choice == backkk.CLOSED_OPTION || choice == backkk.CANCEL_OPTION) {
                            clip.stop();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    co1 = 0;
                    len_s1 = 0;
                    press_con = 0;
                    jf.getContentPane().removeAll();
                    jf.repaint();
                    mainmenu();
                }
            }
        });

        jp.repaint();
        MyColoredButtonE ex = new MyColoredButtonE("Exit");
        ex.setBounds(510, 380, 150, 40);
        ex.setFont(new Font("Arial", Font.BOLD, 17));
        
        ex.setToolTipText("Click here to exit");
        jp.add(ex);
        ex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Button.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }
                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Exit.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                    int choice = JOptionPane.showConfirmDialog(jf, "Are You Sure,You Want Exit?");
                    if (choice == JOptionPane.YES_OPTION) {
                        clip.stop();
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\exit_tone.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        System.exit(0);
                    }
                    if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                        clip.stop();
                    }
                } catch (Exception e) {
                }

            }
        });

        JComboBox sh = new JComboBox();
        sh.setBounds(502, 0, 240, 20);
        jp.add(sh);
        sh.addItem("Descending Order (Hexadecimal)");
        sh.addItem("Ascending Order (Decimal)");
        sh.addItem("Descending Order (Decimal)");
        sh.addItem("Ascending Order (Binary)");
        sh.addItem("Descending Order (Binary)");
        sh.addItem("Ascending Order (Hexadecimal)");
        sh.revalidate();
        sh.repaint();
        sh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                try {
                    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Click.wav").getAbsoluteFile());
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioInputStream);
                    clip.start();
                } catch (Exception e) {
                }

                JComboBox<String> combo = (JComboBox<String>) ae.getSource();
                String op = (String) combo.getSelectedItem();
                if (op.equals("Ascending Order (Decimal)")) {

                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                ascend_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        ascend_dec();
                    }
                }
                if (op.equals("Descending Order (Decimal)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                descend_dec();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        descend_dec();
                    }
                }
                if (op.equals("Ascending Order (Binary)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                ascend_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        ascend_bin();
                    }
                }
                if (op.equals("Descending Order (Binary)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                descend_bin();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        descend_bin();
                    }
                }

                if (op.equals("Ascending Order (Hexadecimal)")) {
                    String s1 = n1tb.getText();
                    String s3 = ta.getText();
                    String s2 = jta.getText();
                    if (!(s1.equals("")) || !(s2.equals("")) || !(s3.equals(""))) {
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Data_con.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip();
                            clip.open(audioInputStream);
                            clip.start();
                            int choice = JOptionPane.showConfirmDialog(jf, "Your data will not be saved\nAre You Sure,You Want Leave?");
                            if (choice == JOptionPane.YES_OPTION) {
                                clip.stop();
                                try {
                                    AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                                    Clip cli = AudioSystem.getClip();
                                    cli.open(audioInput);
                                    cli.start();
                                } catch (Exception e) {
                                }
                                co1 = 0;
                                len_s1 = 0;
                                press_con = 0;
                                jf.getContentPane().removeAll();
                                jf.repaint();
                                ascend_hex();
                            }
                            if (choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION || choice == JOptionPane.CLOSED_OPTION) {
                                clip.stop();
                            }
                        } catch (Exception e) {
                        }

                    } else {
                        try {
                            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("D:\\CAPP\\src\\MEDIAS\\Page.wav").getAbsoluteFile());
                            Clip cli = AudioSystem.getClip();
                            cli.open(audioInput);
                            cli.start();
                        } catch (Exception e) {
                        }
                        co1 = 0;
                        len_s1 = 0;
                        press_con = 0;
                        jf.getContentPane().removeAll();
                        jf.repaint();
                        ascend_hex();
                    }
                }
            }
        });
        jp.repaint();

        jp.repaint();
        
        jp.repaint();
    }

    public static void main(String[] args) {
        new CAPP().mainmenu();
    }
}
